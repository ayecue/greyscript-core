// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`parse default scripts ascii.src 1`] = `
"Chunk[
	1: AssignmentStatement[Identifier[AsciiGen] = MapConstructor[]]
	3: AssignmentStatement[Identifier[map] = MapConstructor[]]
	5: AssignmentStatement[MemberExpression[Identifier[map].Identifier[a]] = ListConstructor[
		5: ListValue[Literal[||¯|| ]]
		5: ListValue[Literal[||_|| ]]
		5: ListValue[Literal[|| || ]]
	]]
	6: AssignmentStatement[MemberExpression[Identifier[map].Identifier[b]] = ListConstructor[
		6: ListValue[Literal[||¯/ ]]
		6: ListValue[Literal[|| \\\\ ]]
		6: ListValue[Literal[||_/ ]]
	]]
	7: AssignmentStatement[MemberExpression[Identifier[map].Identifier[c]] = ListConstructor[
		7: ListValue[Literal[||¯ ]]
		7: ListValue[Literal[||  ]]
		7: ListValue[Literal[||_ ]]
	]]
	8: AssignmentStatement[MemberExpression[Identifier[map].Identifier[d]] = ListConstructor[
		8: ListValue[Literal[||¯\\\\\\\\ ]]
		8: ListValue[Literal[|| // ]]
		8: ListValue[Literal[||//  ]]
	]]
	9: AssignmentStatement[MemberExpression[Identifier[map].Identifier[e]] = ListConstructor[
		9: ListValue[Literal[||¯ ]]
		9: ListValue[Literal[||- ]]
		9: ListValue[Literal[||_ ]]
	]]
	10: AssignmentStatement[MemberExpression[Identifier[map].Identifier[f]] = ListConstructor[
		10: ListValue[Literal[||¯ ]]
		10: ListValue[Literal[||_ ]]
		10: ListValue[Literal[||  ]]
	]]
	11: AssignmentStatement[MemberExpression[Identifier[map].Identifier[g]] = ListConstructor[
		11: ListValue[Literal[||¯¯  ]]
		11: ListValue[Literal[|| \\\\\\\\ ]]
		11: ListValue[Literal[||_|| ]]
	]]
	12: AssignmentStatement[MemberExpression[Identifier[map].Identifier[h]] = ListConstructor[
		12: ListValue[Literal[|| || ]]
		12: ListValue[Literal[||-|| ]]
		12: ListValue[Literal[|| || ]]
	]]
	13: AssignmentStatement[MemberExpression[Identifier[map].Identifier[i]] = ListConstructor[
		13: ListValue[Literal[|| ]]
		13: ListValue[Literal[|| ]]
		13: ListValue[Literal[|| ]]
	]]
	14: AssignmentStatement[MemberExpression[Identifier[map].Identifier[j]] = ListConstructor[
		14: ListValue[Literal[ ¯||¯ ]]
		14: ListValue[Literal[  ||  ]]
		14: ListValue[Literal[|_||  ]]
	]]
	15: AssignmentStatement[MemberExpression[Identifier[map].Identifier[k]] = ListConstructor[
		15: ListValue[Literal[||  / ]]
		15: ListValue[Literal[|| /  ]]
		15: ListValue[Literal[||¯\\\\\\\\ ]]
	]]
	16: AssignmentStatement[MemberExpression[Identifier[map].Identifier[l]] = ListConstructor[
		16: ListValue[Literal[||  ]]
		16: ListValue[Literal[||  ]]
		16: ListValue[Literal[||_ ]]
	]]
	17: AssignmentStatement[MemberExpression[Identifier[map].Identifier[m]] = ListConstructor[
		17: ListValue[Literal[||\\\\\\\\/|| ]]
		17: ListValue[Literal[||   || ]]
		17: ListValue[Literal[||   || ]]
	]]
	18: AssignmentStatement[MemberExpression[Identifier[map].Identifier[n]] = ListConstructor[
		18: ListValue[Literal[||\\\\\\\\ || ]]
		18: ListValue[Literal[|| \\\\\\\\|| ]]
		18: ListValue[Literal[||  \\\\|| ]]
	]]
	19: AssignmentStatement[MemberExpression[Identifier[map].Identifier[o]] = ListConstructor[
		19: ListValue[Literal[||¯|| ]]
		19: ListValue[Literal[|| || ]]
		19: ListValue[Literal[||_|| ]]
	]]
	20: AssignmentStatement[MemberExpression[Identifier[map].Identifier[p]] = ListConstructor[
		20: ListValue[Literal[||¯|| ]]
		20: ListValue[Literal[||_|| ]]
		20: ListValue[Literal[||    ]]
	]]
	21: AssignmentStatement[MemberExpression[Identifier[map].Identifier[q]] = ListConstructor[
		21: ListValue[Literal[||¯||  ]]
		21: ListValue[Literal[|| ||  ]]
		21: ListValue[Literal[||_||¬ ]]
	]]
	22: AssignmentStatement[MemberExpression[Identifier[map].Identifier[r]] = ListConstructor[
		22: ListValue[Literal[||¯|| ]]
		22: ListValue[Literal[||¯\\\\\\\\ ]]
		22: ListValue[Literal[|| || ]]
	]]
	23: AssignmentStatement[MemberExpression[Identifier[map].Identifier[s]] = ListConstructor[
		23: ListValue[Literal[||¯¯ ]]
		23: ListValue[Literal[ \\\\\\\\  ]]
		23: ListValue[Literal[__|| ]]
	]]
	24: AssignmentStatement[MemberExpression[Identifier[map].Identifier[t]] = ListConstructor[
		24: ListValue[Literal[¯||¯ ]]
		24: ListValue[Literal[ ||  ]]
		24: ListValue[Literal[ ||  ]]
	]]
	25: AssignmentStatement[MemberExpression[Identifier[map].Identifier[u]] = ListConstructor[
		25: ListValue[Literal[|| || ]]
		25: ListValue[Literal[|| || ]]
		25: ListValue[Literal[||_|| ]]
	]]
	26: AssignmentStatement[MemberExpression[Identifier[map].Identifier[v]] = ListConstructor[
		26: ListValue[Literal[\\\\\\\\ || ]]
		26: ListValue[Literal[ \\\\\\\\|| ]]
		26: ListValue[Literal[  \\\\\\\\| ]]
	]]
	27: AssignmentStatement[MemberExpression[Identifier[map].Identifier[w]] = ListConstructor[
		27: ListValue[Literal[\\\\\\\\ |\\\\\\\\ | ]]
		27: ListValue[Literal[ \\\\\\\\| \\\\\\\\| ]]
		27: ListValue[Literal[  \\\\\\\\  \\\\\\\\ ]]
	]]
	28: AssignmentStatement[MemberExpression[Identifier[map].Identifier[x]] = ListConstructor[
		28: ListValue[Literal[\\\\\\\\  / ]]
		28: ListValue[Literal[ \\\\\\\\/  ]]
		28: ListValue[Literal[ //\\\\  ]]
	]]
	29: AssignmentStatement[MemberExpression[Identifier[map].Identifier[y]] = ListConstructor[
		29: ListValue[Literal[\\\\\\\\  // ]]
		29: ListValue[Literal[ \\\\\\\\//  ]]
		29: ListValue[Literal[  ||   ]]
	]]
	30: AssignmentStatement[MemberExpression[Identifier[map].Identifier[z]] = ListConstructor[
		30: ListValue[Literal[¯// ]]
		30: ListValue[Literal[//  ]]
		30: ListValue[Literal[||_ ]]
	]]
	31: AssignmentStatement[IndexExpression[Identifier[map][Literal[0]]] = ListConstructor[
		31: ListValue[Literal[||¯|| ]]
		31: ListValue[Literal[||x|| ]]
		31: ListValue[Literal[||_|| ]]
	]]
	32: AssignmentStatement[IndexExpression[Identifier[map][Literal[1]]] = ListConstructor[
		32: ListValue[Literal['|| ]]
		32: ListValue[Literal[ || ]]
		32: ListValue[Literal[ || ]]
	]]
	33: AssignmentStatement[IndexExpression[Identifier[map][Literal[2]]] = ListConstructor[
		33: ListValue[Literal[¯¯|| ]]
		33: ListValue[Literal[||¯  ]]
		33: ListValue[Literal[||_  ]]
	]]
	34: AssignmentStatement[IndexExpression[Identifier[map][Literal[3]]] = ListConstructor[
		34: ListValue[Literal[¯|| ]]
		34: ListValue[Literal[-|| ]]
		34: ListValue[Literal[_|| ]]
	]]
	35: AssignmentStatement[IndexExpression[Identifier[map][Literal[4]]] = ListConstructor[
		35: ListValue[Literal[ /|| ]]
		35: ListValue[Literal[/_|| ]]
		35: ListValue[Literal[  || ]]
	]]
	36: AssignmentStatement[IndexExpression[Identifier[map][Literal[5]]] = ListConstructor[
		36: ListValue[Literal[||¯¯ ]]
		36: ListValue[Literal[ ¯|| ]]
		36: ListValue[Literal[ _|| ]]
	]]
	37: AssignmentStatement[IndexExpression[Identifier[map][Literal[6]]] = ListConstructor[
		37: ListValue[Literal[||¯¯  ]]
		37: ListValue[Literal[||¯|| ]]
		37: ListValue[Literal[||_|| ]]
	]]
	38: AssignmentStatement[IndexExpression[Identifier[map][Literal[7]]] = ListConstructor[
		38: ListValue[Literal[¯¯// ]]
		38: ListValue[Literal[ //  ]]
		38: ListValue[Literal[//   ]]
	]]
	39: AssignmentStatement[IndexExpression[Identifier[map][Literal[8]]] = ListConstructor[
		39: ListValue[Literal[||¯|| ]]
		39: ListValue[Literal[||-|| ]]
		39: ListValue[Literal[||_|| ]]
	]]
	40: AssignmentStatement[IndexExpression[Identifier[map][Literal[9]]] = ListConstructor[
		40: ListValue[Literal[||¯|| ]]
		40: ListValue[Literal[  ¯|| ]]
		40: ListValue[Literal[  //  ]]
	]]
	41: AssignmentStatement[IndexExpression[Identifier[map][Literal[ ]]] = ListConstructor[
		41: ListValue[Literal[  ]]
		41: ListValue[Literal[  ]]
		41: ListValue[Literal[  ]]
	]]
	43: AssignmentStatement[MemberExpression[Identifier[AsciiGen].Identifier[MAP]] = Identifier[map]]
	45: AssignmentStatement[MemberExpression[Identifier[AsciiGen].Identifier[gen]] = Function[Identifier[str], Identifier[colors] =>
		46: AssignmentStatement[Identifier[r] = ListConstructor[
			46: ListValue[ListConstructor[]]
			46: ListValue[ListConstructor[]]
			46: ListValue[ListConstructor[]]
		]]
		47: AssignmentStatement[Identifier[signs] = MemberExpression[Identifier[self].Identifier[MAP]]]
		49: For[Identifier[char] in Identifier[str]
			50: AssignmentStatement[Identifier[char] = MemberExpression[Identifier[char].Identifier[lower]]]
			51: IfStatement[
				51: IfClause[CallExpression[MemberExpression[Identifier[signs].Identifier[hasIndex]](Identifier[char])]
					52: CallStatment[CallExpression[MemberExpression[IndexExpression[Identifier[r][Literal[0]]].Identifier[push]](IndexExpression[IndexExpression[Identifier[signs][Identifier[char]]][Literal[0]]])]]
					53: CallStatment[CallExpression[MemberExpression[IndexExpression[Identifier[r][Literal[1]]].Identifier[push]](IndexExpression[IndexExpression[Identifier[signs][Identifier[char]]][Literal[1]]])]]
					54: CallStatment[CallExpression[MemberExpression[IndexExpression[Identifier[r][Literal[2]]].Identifier[push]](IndexExpression[IndexExpression[Identifier[signs][Identifier[char]]][Literal[2]]])]]
				]
			]
		]
		58: IfStatement[
			58: IfClause[BinaryExpression[CallExpression[Identifier[typeof](Identifier[colors])] == Literal[string]]
				59: AssignmentStatement[IndexExpression[Identifier[r][Literal[0]]] = BinaryExpression[BinaryExpression[ListConstructor[
					59: ListValue[BinaryExpression[BinaryExpression[Literal[<color=#] + Identifier[colors]] + Literal[>]]]
				] + IndexExpression[Identifier[r][Literal[0]]]] + ListConstructor[
					59: ListValue[Literal[</color>]]
				]]]
				60: AssignmentStatement[IndexExpression[Identifier[r][Literal[1]]] = BinaryExpression[BinaryExpression[ListConstructor[
					60: ListValue[BinaryExpression[BinaryExpression[Literal[<color=#] + Identifier[colors]] + Literal[>]]]
				] + IndexExpression[Identifier[r][Literal[1]]]] + ListConstructor[
					60: ListValue[Literal[</color>]]
				]]]
				61: AssignmentStatement[IndexExpression[Identifier[r][Literal[2]]] = BinaryExpression[BinaryExpression[ListConstructor[
					61: ListValue[BinaryExpression[BinaryExpression[Literal[<color=#] + Identifier[colors]] + Literal[>]]]
				] + IndexExpression[Identifier[r][Literal[2]]]] + ListConstructor[
					61: ListValue[Literal[</color>]]
				]]]
			]
			62: ElseifClause[BinaryExpression[CallExpression[Identifier[typeof](Identifier[colors])] == Literal[list]]
				63: AssignmentStatement[IndexExpression[Identifier[r][Literal[0]]] = BinaryExpression[BinaryExpression[ListConstructor[
					63: ListValue[BinaryExpression[BinaryExpression[Literal[<color=#] + IndexExpression[Identifier[colors][Literal[0]]]] + Literal[>]]]
				] + IndexExpression[Identifier[r][Literal[0]]]] + ListConstructor[
					63: ListValue[Literal[</color>]]
				]]]
				64: AssignmentStatement[IndexExpression[Identifier[r][Literal[1]]] = BinaryExpression[BinaryExpression[ListConstructor[
					64: ListValue[BinaryExpression[BinaryExpression[Literal[<color=#] + IndexExpression[Identifier[colors][Literal[1]]]] + Literal[>]]]
				] + IndexExpression[Identifier[r][Literal[1]]]] + ListConstructor[
					64: ListValue[Literal[</color>]]
				]]]
				65: AssignmentStatement[IndexExpression[Identifier[r][Literal[2]]] = BinaryExpression[BinaryExpression[ListConstructor[
					65: ListValue[BinaryExpression[BinaryExpression[Literal[<color=#] + IndexExpression[Identifier[colors][Literal[2]]]] + Literal[>]]]
				] + IndexExpression[Identifier[r][Literal[2]]]] + ListConstructor[
					65: ListValue[Literal[</color>]]
				]]]
			]
		]
		68: ReturnStatement[CallExpression[MemberExpression[ListConstructor[
			68: ListValue[CallExpression[MemberExpression[IndexExpression[Identifier[r][Literal[0]]].Identifier[join]](Literal[])]]
			68: ListValue[CallExpression[MemberExpression[IndexExpression[Identifier[r][Literal[1]]].Identifier[join]](Literal[])]]
			68: ListValue[CallExpression[MemberExpression[IndexExpression[Identifier[r][Literal[2]]].Identifier[join]](Literal[])]]
		].Identifier[join]](Literal[\\\\n])]]
	]]
	71: CallStatment[CallExpression[Identifier[print](CallExpression[MemberExpression[Identifier[AsciiGen].Identifier[gen]](Literal[Hallo])])]]
]"
`;

exports[`parse default scripts ascii.src unsafe 1`] = `
"Chunk[
	1: AssignmentStatement[Identifier[AsciiGen] = MapConstructor[]]
	3: AssignmentStatement[Identifier[map] = MapConstructor[]]
	5: AssignmentStatement[MemberExpression[Identifier[map].Identifier[a]] = ListConstructor[
		5: ListValue[Literal[||¯|| ]]
		5: ListValue[Literal[||_|| ]]
		5: ListValue[Literal[|| || ]]
	]]
	6: AssignmentStatement[MemberExpression[Identifier[map].Identifier[b]] = ListConstructor[
		6: ListValue[Literal[||¯/ ]]
		6: ListValue[Literal[|| \\\\ ]]
		6: ListValue[Literal[||_/ ]]
	]]
	7: AssignmentStatement[MemberExpression[Identifier[map].Identifier[c]] = ListConstructor[
		7: ListValue[Literal[||¯ ]]
		7: ListValue[Literal[||  ]]
		7: ListValue[Literal[||_ ]]
	]]
	8: AssignmentStatement[MemberExpression[Identifier[map].Identifier[d]] = ListConstructor[
		8: ListValue[Literal[||¯\\\\\\\\ ]]
		8: ListValue[Literal[|| // ]]
		8: ListValue[Literal[||//  ]]
	]]
	9: AssignmentStatement[MemberExpression[Identifier[map].Identifier[e]] = ListConstructor[
		9: ListValue[Literal[||¯ ]]
		9: ListValue[Literal[||- ]]
		9: ListValue[Literal[||_ ]]
	]]
	10: AssignmentStatement[MemberExpression[Identifier[map].Identifier[f]] = ListConstructor[
		10: ListValue[Literal[||¯ ]]
		10: ListValue[Literal[||_ ]]
		10: ListValue[Literal[||  ]]
	]]
	11: AssignmentStatement[MemberExpression[Identifier[map].Identifier[g]] = ListConstructor[
		11: ListValue[Literal[||¯¯  ]]
		11: ListValue[Literal[|| \\\\\\\\ ]]
		11: ListValue[Literal[||_|| ]]
	]]
	12: AssignmentStatement[MemberExpression[Identifier[map].Identifier[h]] = ListConstructor[
		12: ListValue[Literal[|| || ]]
		12: ListValue[Literal[||-|| ]]
		12: ListValue[Literal[|| || ]]
	]]
	13: AssignmentStatement[MemberExpression[Identifier[map].Identifier[i]] = ListConstructor[
		13: ListValue[Literal[|| ]]
		13: ListValue[Literal[|| ]]
		13: ListValue[Literal[|| ]]
	]]
	14: AssignmentStatement[MemberExpression[Identifier[map].Identifier[j]] = ListConstructor[
		14: ListValue[Literal[ ¯||¯ ]]
		14: ListValue[Literal[  ||  ]]
		14: ListValue[Literal[|_||  ]]
	]]
	15: AssignmentStatement[MemberExpression[Identifier[map].Identifier[k]] = ListConstructor[
		15: ListValue[Literal[||  / ]]
		15: ListValue[Literal[|| /  ]]
		15: ListValue[Literal[||¯\\\\\\\\ ]]
	]]
	16: AssignmentStatement[MemberExpression[Identifier[map].Identifier[l]] = ListConstructor[
		16: ListValue[Literal[||  ]]
		16: ListValue[Literal[||  ]]
		16: ListValue[Literal[||_ ]]
	]]
	17: AssignmentStatement[MemberExpression[Identifier[map].Identifier[m]] = ListConstructor[
		17: ListValue[Literal[||\\\\\\\\/|| ]]
		17: ListValue[Literal[||   || ]]
		17: ListValue[Literal[||   || ]]
	]]
	18: AssignmentStatement[MemberExpression[Identifier[map].Identifier[n]] = ListConstructor[
		18: ListValue[Literal[||\\\\\\\\ || ]]
		18: ListValue[Literal[|| \\\\\\\\|| ]]
		18: ListValue[Literal[||  \\\\|| ]]
	]]
	19: AssignmentStatement[MemberExpression[Identifier[map].Identifier[o]] = ListConstructor[
		19: ListValue[Literal[||¯|| ]]
		19: ListValue[Literal[|| || ]]
		19: ListValue[Literal[||_|| ]]
	]]
	20: AssignmentStatement[MemberExpression[Identifier[map].Identifier[p]] = ListConstructor[
		20: ListValue[Literal[||¯|| ]]
		20: ListValue[Literal[||_|| ]]
		20: ListValue[Literal[||    ]]
	]]
	21: AssignmentStatement[MemberExpression[Identifier[map].Identifier[q]] = ListConstructor[
		21: ListValue[Literal[||¯||  ]]
		21: ListValue[Literal[|| ||  ]]
		21: ListValue[Literal[||_||¬ ]]
	]]
	22: AssignmentStatement[MemberExpression[Identifier[map].Identifier[r]] = ListConstructor[
		22: ListValue[Literal[||¯|| ]]
		22: ListValue[Literal[||¯\\\\\\\\ ]]
		22: ListValue[Literal[|| || ]]
	]]
	23: AssignmentStatement[MemberExpression[Identifier[map].Identifier[s]] = ListConstructor[
		23: ListValue[Literal[||¯¯ ]]
		23: ListValue[Literal[ \\\\\\\\  ]]
		23: ListValue[Literal[__|| ]]
	]]
	24: AssignmentStatement[MemberExpression[Identifier[map].Identifier[t]] = ListConstructor[
		24: ListValue[Literal[¯||¯ ]]
		24: ListValue[Literal[ ||  ]]
		24: ListValue[Literal[ ||  ]]
	]]
	25: AssignmentStatement[MemberExpression[Identifier[map].Identifier[u]] = ListConstructor[
		25: ListValue[Literal[|| || ]]
		25: ListValue[Literal[|| || ]]
		25: ListValue[Literal[||_|| ]]
	]]
	26: AssignmentStatement[MemberExpression[Identifier[map].Identifier[v]] = ListConstructor[
		26: ListValue[Literal[\\\\\\\\ || ]]
		26: ListValue[Literal[ \\\\\\\\|| ]]
		26: ListValue[Literal[  \\\\\\\\| ]]
	]]
	27: AssignmentStatement[MemberExpression[Identifier[map].Identifier[w]] = ListConstructor[
		27: ListValue[Literal[\\\\\\\\ |\\\\\\\\ | ]]
		27: ListValue[Literal[ \\\\\\\\| \\\\\\\\| ]]
		27: ListValue[Literal[  \\\\\\\\  \\\\\\\\ ]]
	]]
	28: AssignmentStatement[MemberExpression[Identifier[map].Identifier[x]] = ListConstructor[
		28: ListValue[Literal[\\\\\\\\  / ]]
		28: ListValue[Literal[ \\\\\\\\/  ]]
		28: ListValue[Literal[ //\\\\  ]]
	]]
	29: AssignmentStatement[MemberExpression[Identifier[map].Identifier[y]] = ListConstructor[
		29: ListValue[Literal[\\\\\\\\  // ]]
		29: ListValue[Literal[ \\\\\\\\//  ]]
		29: ListValue[Literal[  ||   ]]
	]]
	30: AssignmentStatement[MemberExpression[Identifier[map].Identifier[z]] = ListConstructor[
		30: ListValue[Literal[¯// ]]
		30: ListValue[Literal[//  ]]
		30: ListValue[Literal[||_ ]]
	]]
	31: AssignmentStatement[IndexExpression[Identifier[map][Literal[0]]] = ListConstructor[
		31: ListValue[Literal[||¯|| ]]
		31: ListValue[Literal[||x|| ]]
		31: ListValue[Literal[||_|| ]]
	]]
	32: AssignmentStatement[IndexExpression[Identifier[map][Literal[1]]] = ListConstructor[
		32: ListValue[Literal['|| ]]
		32: ListValue[Literal[ || ]]
		32: ListValue[Literal[ || ]]
	]]
	33: AssignmentStatement[IndexExpression[Identifier[map][Literal[2]]] = ListConstructor[
		33: ListValue[Literal[¯¯|| ]]
		33: ListValue[Literal[||¯  ]]
		33: ListValue[Literal[||_  ]]
	]]
	34: AssignmentStatement[IndexExpression[Identifier[map][Literal[3]]] = ListConstructor[
		34: ListValue[Literal[¯|| ]]
		34: ListValue[Literal[-|| ]]
		34: ListValue[Literal[_|| ]]
	]]
	35: AssignmentStatement[IndexExpression[Identifier[map][Literal[4]]] = ListConstructor[
		35: ListValue[Literal[ /|| ]]
		35: ListValue[Literal[/_|| ]]
		35: ListValue[Literal[  || ]]
	]]
	36: AssignmentStatement[IndexExpression[Identifier[map][Literal[5]]] = ListConstructor[
		36: ListValue[Literal[||¯¯ ]]
		36: ListValue[Literal[ ¯|| ]]
		36: ListValue[Literal[ _|| ]]
	]]
	37: AssignmentStatement[IndexExpression[Identifier[map][Literal[6]]] = ListConstructor[
		37: ListValue[Literal[||¯¯  ]]
		37: ListValue[Literal[||¯|| ]]
		37: ListValue[Literal[||_|| ]]
	]]
	38: AssignmentStatement[IndexExpression[Identifier[map][Literal[7]]] = ListConstructor[
		38: ListValue[Literal[¯¯// ]]
		38: ListValue[Literal[ //  ]]
		38: ListValue[Literal[//   ]]
	]]
	39: AssignmentStatement[IndexExpression[Identifier[map][Literal[8]]] = ListConstructor[
		39: ListValue[Literal[||¯|| ]]
		39: ListValue[Literal[||-|| ]]
		39: ListValue[Literal[||_|| ]]
	]]
	40: AssignmentStatement[IndexExpression[Identifier[map][Literal[9]]] = ListConstructor[
		40: ListValue[Literal[||¯|| ]]
		40: ListValue[Literal[  ¯|| ]]
		40: ListValue[Literal[  //  ]]
	]]
	41: AssignmentStatement[IndexExpression[Identifier[map][Literal[ ]]] = ListConstructor[
		41: ListValue[Literal[  ]]
		41: ListValue[Literal[  ]]
		41: ListValue[Literal[  ]]
	]]
	43: AssignmentStatement[MemberExpression[Identifier[AsciiGen].Identifier[MAP]] = Identifier[map]]
	45: AssignmentStatement[MemberExpression[Identifier[AsciiGen].Identifier[gen]] = Function[Identifier[str], Identifier[colors] =>
		46: AssignmentStatement[Identifier[r] = ListConstructor[
			46: ListValue[ListConstructor[]]
			46: ListValue[ListConstructor[]]
			46: ListValue[ListConstructor[]]
		]]
		47: AssignmentStatement[Identifier[signs] = MemberExpression[Identifier[self].Identifier[MAP]]]
		49: For[Identifier[char] in Identifier[str]
			50: AssignmentStatement[Identifier[char] = MemberExpression[Identifier[char].Identifier[lower]]]
			51: IfStatement[
				51: IfClause[CallExpression[MemberExpression[Identifier[signs].Identifier[hasIndex]](Identifier[char])]
					52: CallStatment[CallExpression[MemberExpression[IndexExpression[Identifier[r][Literal[0]]].Identifier[push]](IndexExpression[IndexExpression[Identifier[signs][Identifier[char]]][Literal[0]]])]]
					53: CallStatment[CallExpression[MemberExpression[IndexExpression[Identifier[r][Literal[1]]].Identifier[push]](IndexExpression[IndexExpression[Identifier[signs][Identifier[char]]][Literal[1]]])]]
					54: CallStatment[CallExpression[MemberExpression[IndexExpression[Identifier[r][Literal[2]]].Identifier[push]](IndexExpression[IndexExpression[Identifier[signs][Identifier[char]]][Literal[2]]])]]
				]
			]
		]
		58: IfStatement[
			58: IfClause[BinaryExpression[CallExpression[Identifier[typeof](Identifier[colors])] == Literal[string]]
				59: AssignmentStatement[IndexExpression[Identifier[r][Literal[0]]] = BinaryExpression[BinaryExpression[ListConstructor[
					59: ListValue[BinaryExpression[BinaryExpression[Literal[<color=#] + Identifier[colors]] + Literal[>]]]
				] + IndexExpression[Identifier[r][Literal[0]]]] + ListConstructor[
					59: ListValue[Literal[</color>]]
				]]]
				60: AssignmentStatement[IndexExpression[Identifier[r][Literal[1]]] = BinaryExpression[BinaryExpression[ListConstructor[
					60: ListValue[BinaryExpression[BinaryExpression[Literal[<color=#] + Identifier[colors]] + Literal[>]]]
				] + IndexExpression[Identifier[r][Literal[1]]]] + ListConstructor[
					60: ListValue[Literal[</color>]]
				]]]
				61: AssignmentStatement[IndexExpression[Identifier[r][Literal[2]]] = BinaryExpression[BinaryExpression[ListConstructor[
					61: ListValue[BinaryExpression[BinaryExpression[Literal[<color=#] + Identifier[colors]] + Literal[>]]]
				] + IndexExpression[Identifier[r][Literal[2]]]] + ListConstructor[
					61: ListValue[Literal[</color>]]
				]]]
			]
			62: ElseifClause[BinaryExpression[CallExpression[Identifier[typeof](Identifier[colors])] == Literal[list]]
				63: AssignmentStatement[IndexExpression[Identifier[r][Literal[0]]] = BinaryExpression[BinaryExpression[ListConstructor[
					63: ListValue[BinaryExpression[BinaryExpression[Literal[<color=#] + IndexExpression[Identifier[colors][Literal[0]]]] + Literal[>]]]
				] + IndexExpression[Identifier[r][Literal[0]]]] + ListConstructor[
					63: ListValue[Literal[</color>]]
				]]]
				64: AssignmentStatement[IndexExpression[Identifier[r][Literal[1]]] = BinaryExpression[BinaryExpression[ListConstructor[
					64: ListValue[BinaryExpression[BinaryExpression[Literal[<color=#] + IndexExpression[Identifier[colors][Literal[1]]]] + Literal[>]]]
				] + IndexExpression[Identifier[r][Literal[1]]]] + ListConstructor[
					64: ListValue[Literal[</color>]]
				]]]
				65: AssignmentStatement[IndexExpression[Identifier[r][Literal[2]]] = BinaryExpression[BinaryExpression[ListConstructor[
					65: ListValue[BinaryExpression[BinaryExpression[Literal[<color=#] + IndexExpression[Identifier[colors][Literal[2]]]] + Literal[>]]]
				] + IndexExpression[Identifier[r][Literal[2]]]] + ListConstructor[
					65: ListValue[Literal[</color>]]
				]]]
			]
		]
		68: ReturnStatement[CallExpression[MemberExpression[ListConstructor[
			68: ListValue[CallExpression[MemberExpression[IndexExpression[Identifier[r][Literal[0]]].Identifier[join]](Literal[])]]
			68: ListValue[CallExpression[MemberExpression[IndexExpression[Identifier[r][Literal[1]]].Identifier[join]](Literal[])]]
			68: ListValue[CallExpression[MemberExpression[IndexExpression[Identifier[r][Literal[2]]].Identifier[join]](Literal[])]]
		].Identifier[join]](Literal[\\\\n])]]
	]]
	71: CallStatment[CallExpression[Identifier[print](CallExpression[MemberExpression[Identifier[AsciiGen].Identifier[gen]](Literal[Hallo])])]]
]"
`;

exports[`parse default scripts binary-expressions.src 1`] = `
"Chunk[
	1: CallStatment[AssignmentStatement[Identifier[a] = BinaryExpression[Identifier[a] / Identifier[b]]]]
	2: CallStatment[AssignmentStatement[Identifier[a] = BinaryExpression[Identifier[a] * Identifier[b]]]]
	3: CallStatment[AssignmentStatement[Identifier[a] = BinaryExpression[Identifier[a] - Identifier[b]]]]
	4: CallStatment[AssignmentStatement[Identifier[a] = BinaryExpression[Identifier[a] + Identifier[b]]]]
	5: BinaryExpression[Identifier[a] << Identifier[b]]
	6: BinaryExpression[Identifier[a] >> Identifier[b]]
	7: AssignmentStatement[Identifier[w] = BinaryExpression[BinaryExpression[Identifier[a] >>> BinaryExpression[Identifier[b] << Identifier[c]]] >> Identifier[a]]]
	8: BinaryExpression[Identifier[a] | Identifier[b]]
	9: BinaryExpression[Identifier[a] & Identifier[b]]
	10: BinaryExpression[Identifier[a] ^ Identifier[b]]
	11: LogicalExpression[Identifier[a] and Identifier[b]]
	12: LogicalExpression[Identifier[a] or Identifier[b]]
	15: BinaryExpression[MemberExpression[Identifier[test].Identifier[len]] / Literal[2]]
	16: BinaryExpression[MemberExpression[Identifier[test].Identifier[len]] + Literal[2]]
	17: BinaryExpression[MemberExpression[Identifier[test].Identifier[len]] - Literal[2]]
]"
`;

exports[`parse default scripts binary-expressions.src unsafe 1`] = `
"Chunk[
	1: CallStatment[AssignmentStatement[Identifier[a] = BinaryExpression[Identifier[a] / Identifier[b]]]]
	2: CallStatment[AssignmentStatement[Identifier[a] = BinaryExpression[Identifier[a] * Identifier[b]]]]
	3: CallStatment[AssignmentStatement[Identifier[a] = BinaryExpression[Identifier[a] - Identifier[b]]]]
	4: CallStatment[AssignmentStatement[Identifier[a] = BinaryExpression[Identifier[a] + Identifier[b]]]]
	5: BinaryExpression[Identifier[a] << Identifier[b]]
	6: BinaryExpression[Identifier[a] >> Identifier[b]]
	7: AssignmentStatement[Identifier[w] = BinaryExpression[BinaryExpression[Identifier[a] >>> BinaryExpression[Identifier[b] << Identifier[c]]] >> Identifier[a]]]
	8: BinaryExpression[Identifier[a] | Identifier[b]]
	9: BinaryExpression[Identifier[a] & Identifier[b]]
	10: BinaryExpression[Identifier[a] ^ Identifier[b]]
	11: LogicalExpression[Identifier[a] and Identifier[b]]
	12: LogicalExpression[Identifier[a] or Identifier[b]]
	15: BinaryExpression[MemberExpression[Identifier[test].Identifier[len]] / Literal[2]]
	16: BinaryExpression[MemberExpression[Identifier[test].Identifier[len]] + Literal[2]]
	17: BinaryExpression[MemberExpression[Identifier[test].Identifier[len]] - Literal[2]]
]"
`;

exports[`parse default scripts callexpr-with-nl.src 1`] = `
"Chunk[
	1: CallStatment[CallExpression[Identifier[x](Literal[1], Literal[2], Literal[3], Literal[4], Literal[5])]]
]"
`;

exports[`parse default scripts callexpr-with-nl.src unsafe 1`] = `
"Chunk[
	1: CallStatment[CallExpression[Identifier[x](Literal[1], Literal[2], Literal[3], Literal[4], Literal[5])]]
]"
`;

exports[`parse default scripts eol.src 1`] = `
"Chunk[
	1: IfStatement[
		1: IfClause[Literal[true]
			2: CallStatment[CallExpression[Identifier[print](Literal[true])]]
		]
		3: ElseClause[
			4: CallStatment[CallExpression[Identifier[print](Literal[false])]]
		}]
	]
	7: WhileStatement[Literal[false]\\\\n	8: CallStatment[CallExpression[Identifier[print](Literal[foo])]]
	]
	11: For[Identifier[foo] in ListConstructor[]
		12: CallStatment[CallExpression[Identifier[print](Literal[foo])]]
	]
]"
`;

exports[`parse default scripts eol.src unsafe 1`] = `
"Chunk[
	1: IfStatement[
		1: IfClause[Literal[true]
			2: CallStatment[CallExpression[Identifier[print](Literal[true])]]
		]
		3: ElseClause[
			4: CallStatment[CallExpression[Identifier[print](Literal[false])]]
		}]
	]
	7: WhileStatement[Literal[false]\\\\n	8: CallStatment[CallExpression[Identifier[print](Literal[foo])]]
	]
	11: For[Identifier[foo] in ListConstructor[]
		12: CallStatment[CallExpression[Identifier[print](Literal[foo])]]
	]
]"
`;

exports[`parse default scripts if-clause.src 1`] = `
"Chunk[
	1: AssignmentStatement[Identifier[params] = ListConstructor[
		1: ListValue[Literal[/home/test]]
		1: ListValue[Literal[myTestFolder]]
	]]
	3: CallStatment[CallExpression[Identifier[print](LogicalExpression[LogicalExpression[BinaryExpression[MemberExpression[Identifier[params].Identifier[len]] != Literal[1]] or BinaryExpression[IndexExpression[Identifier[params][Literal[0]]] == Literal[-h]]] or BinaryExpression[IndexExpression[Identifier[params][Literal[0]]] == Literal[--help]]])]]
	4: CallStatment[CallExpression[Identifier[print](LogicalExpression[LogicalExpression[BinaryExpression[MemberExpression[Identifier[params].Identifier[len]] != Literal[1]] or BinaryExpression[IndexExpression[Identifier[params][Literal[0]]] == Literal[-h]]] or BinaryExpression[IndexExpression[Identifier[params][Literal[0]]] == Literal[--help]]])]]
]"
`;

exports[`parse default scripts if-clause.src unsafe 1`] = `
"Chunk[
	1: AssignmentStatement[Identifier[params] = ListConstructor[
		1: ListValue[Literal[/home/test]]
		1: ListValue[Literal[myTestFolder]]
	]]
	3: CallStatment[CallExpression[Identifier[print](LogicalExpression[LogicalExpression[BinaryExpression[MemberExpression[Identifier[params].Identifier[len]] != Literal[1]] or BinaryExpression[IndexExpression[Identifier[params][Literal[0]]] == Literal[-h]]] or BinaryExpression[IndexExpression[Identifier[params][Literal[0]]] == Literal[--help]]])]]
	4: CallStatment[CallExpression[Identifier[print](LogicalExpression[LogicalExpression[BinaryExpression[MemberExpression[Identifier[params].Identifier[len]] != Literal[1]] or BinaryExpression[IndexExpression[Identifier[params][Literal[0]]] == Literal[-h]]] or BinaryExpression[IndexExpression[Identifier[params][Literal[0]]] == Literal[--help]]])]]
]"
`;

exports[`parse default scripts if-shorthand.src 1`] = `
"Chunk[
	1: IfStatement[
		1: IfShortcutClause[Literal[true]
			1: CallStatment[CallExpression[Identifier[print](Literal[true])]]
		]
	]
	2: IfStatement[
		2: IfShortcutClause[Literal[false]
			2: CallStatment[CallExpression[Identifier[print](Literal[true])]]
		]
		2: ElseShortcutClause[
			2: CallStatment[CallExpression[Identifier[print](Literal[true])]]
		}]
	]
	3: CallStatment[CallExpression[Identifier[print](Literal[was])]]
	4: IfStatement[
		4: IfClause[Literal[false]
			5: CallStatment[CallExpression[Identifier[print](Literal[false])]]
		]
		6: ElseClause[
			7: CallStatment[CallExpression[Identifier[print](Literal[true])]]
		}]
	]
	10: For[Identifier[i] in ListConstructor[]
		10: CallStatment[CallExpression[Identifier[print](Identifier[i])]]
	]
	11: For[Identifier[b] in ListConstructor[]
		12: CallStatment[CallExpression[Identifier[print](Identifier[b])]]
	]
	14: WhileStatement[BinaryExpression[Identifier[i] < Identifier[b]]\\\\n	14: CallStatment[AssignmentStatement[Identifier[i] = BinaryExpression[Identifier[i] + Literal[1]]]]
	]
	15: WhileStatement[BinaryExpression[Identifier[b] < Identifier[i]]\\\\n	16: CallStatment[AssignmentStatement[Identifier[b] = BinaryExpression[Identifier[b] + Literal[1]]]]
	]
	18: AssignmentStatement[Identifier[myFunction] = Function[Identifier[v] =>
		18: CallStatment[CallExpression[Identifier[print](Identifier[v])]]
	]]
	19: AssignmentStatement[Identifier[otherFunction] = Function[Identifier[n] =>
		20: CallStatment[CallExpression[Identifier[print](Identifier[n])]]
	]]
	23: Function[Identifier[m] =>
		23: ReturnStatement[Literal[was]]
	]
	26: Function[Identifier[b] =>
		27: IfStatement[
			27: IfShortcutClause[Identifier[a]
				27: ReturnStatement[Literal[foo]]
			]
		]
	]
	30: IfStatement[
		30: IfClause[NegationExpression[not UnaryExpression[@ Identifier[ref]]]]
	]
	33: IfStatement[
		33: IfClause[Literal[true]
			34: AssignmentStatement[Identifier[elseSomething] = Literal[false]]
		]
		35: ElseClause[]
	]
]"
`;

exports[`parse default scripts if-shorthand.src unsafe 1`] = `
"Chunk[
	1: IfStatement[
		1: IfShortcutClause[Literal[true]
			1: CallStatment[CallExpression[Identifier[print](Literal[true])]]
		]
	]
	2: IfStatement[
		2: IfShortcutClause[Literal[false]
			2: CallStatment[CallExpression[Identifier[print](Literal[true])]]
		]
		2: ElseShortcutClause[
			2: CallStatment[CallExpression[Identifier[print](Literal[true])]]
		}]
	]
	3: CallStatment[CallExpression[Identifier[print](Literal[was])]]
	4: IfStatement[
		4: IfClause[Literal[false]
			5: CallStatment[CallExpression[Identifier[print](Literal[false])]]
		]
		6: ElseClause[
			7: CallStatment[CallExpression[Identifier[print](Literal[true])]]
		}]
	]
	10: For[Identifier[i] in ListConstructor[]
		10: CallStatment[CallExpression[Identifier[print](Identifier[i])]]
	]
	11: For[Identifier[b] in ListConstructor[]
		12: CallStatment[CallExpression[Identifier[print](Identifier[b])]]
	]
	14: WhileStatement[BinaryExpression[Identifier[i] < Identifier[b]]\\\\n	14: CallStatment[AssignmentStatement[Identifier[i] = BinaryExpression[Identifier[i] + Literal[1]]]]
	]
	15: WhileStatement[BinaryExpression[Identifier[b] < Identifier[i]]\\\\n	16: CallStatment[AssignmentStatement[Identifier[b] = BinaryExpression[Identifier[b] + Literal[1]]]]
	]
	18: AssignmentStatement[Identifier[myFunction] = Function[Identifier[v] =>
		18: CallStatment[CallExpression[Identifier[print](Identifier[v])]]
	]]
	19: AssignmentStatement[Identifier[otherFunction] = Function[Identifier[n] =>
		20: CallStatment[CallExpression[Identifier[print](Identifier[n])]]
	]]
	23: Function[Identifier[m] =>
		23: ReturnStatement[Literal[was]]
	]
	26: Function[Identifier[b] =>
		27: IfStatement[
			27: IfShortcutClause[Identifier[a]
				27: ReturnStatement[Literal[foo]]
			]
		]
	]
	30: IfStatement[
		30: IfClause[NegationExpression[not UnaryExpression[@ Identifier[ref]]]]
	]
	33: IfStatement[
		33: IfClause[Literal[true]
			34: AssignmentStatement[Identifier[elseSomething] = Literal[false]]
		]
		35: ElseClause[]
	]
]"
`;

exports[`parse default scripts invalid code 1`] = `Array []`;

exports[`parse default scripts invalid code 2`] = `
Array [
  [Error: Unexpected value ";" at line 3. Expected: ")"],
  [Error: Unexpected assignment or call at line 8.],
  [Error: Unexpected argument for "not" at line 11.],
  [Error: Unexpected argument for "not" at line 13.],
  [Error: Unexpected expression at line 17.],
  [Error: Unexpected expression at line 18.],
  [Error: Unexpected value "print" at line 28. Expected: "then"],
  [Error: Unexpected end of if statement "<eof>" at line 29.],
]
`;

exports[`parse default scripts map.src 1`] = `
"Chunk[
	1: AssignmentStatement[Identifier[test] = MapConstructor[
		2: MapKeyString[MapConstructor[
			2: MapKeyString[Literal[myTest]: Literal[0]]
			2: MapKeyString[Literal[1]: Literal[2]]
		]: Literal[true]]
	]]
	4: AssignmentStatement[Identifier[test2] = MapConstructor[
		5: MapKeyString[ListConstructor[
			5: ListValue[Literal[12]]
			5: ListValue[Literal[14]]
		]: Literal[true]]
	]]
	7: AssignmentStatement[Identifier[test3] = MapConstructor[
		8: MapKeyString[Identifier[test]: Literal[234]]
	]]
	10: AssignmentStatement[Identifier[test4] = MapConstructor[
		11: MapKeyString[Literal[true]: Literal[foo]]
	]]
	13: AssignmentStatement[Identifier[test5] = MapConstructor[
		14: MapKeyString[Literal[123]: Literal[bar]]
	]]
]"
`;

exports[`parse default scripts map.src unsafe 1`] = `
"Chunk[
	1: AssignmentStatement[Identifier[test] = MapConstructor[
		2: MapKeyString[MapConstructor[
			2: MapKeyString[Literal[myTest]: Literal[0]]
			2: MapKeyString[Literal[1]: Literal[2]]
		]: Literal[true]]
	]]
	4: AssignmentStatement[Identifier[test2] = MapConstructor[
		5: MapKeyString[ListConstructor[
			5: ListValue[Literal[12]]
			5: ListValue[Literal[14]]
		]: Literal[true]]
	]]
	7: AssignmentStatement[Identifier[test3] = MapConstructor[
		8: MapKeyString[Identifier[test]: Literal[234]]
	]]
	10: AssignmentStatement[Identifier[test4] = MapConstructor[
		11: MapKeyString[Literal[true]: Literal[foo]]
	]]
	13: AssignmentStatement[Identifier[test5] = MapConstructor[
		14: MapKeyString[Literal[123]: Literal[bar]]
	]]
]"
`;

exports[`parse default scripts member-with-nl.src 1`] = `
"Chunk[
	1: CallStatment[MemberExpression[MemberExpression[MemberExpression[Identifier[x].Identifier[test]].Identifier[test]].Identifier[test]]]
]"
`;

exports[`parse default scripts member-with-nl.src unsafe 1`] = `
"Chunk[
	1: CallStatment[MemberExpression[MemberExpression[MemberExpression[Identifier[x].Identifier[test]].Identifier[test]].Identifier[test]]]
]"
`;

exports[`parse default scripts multiline.src 1`] = `
"Chunk[
	1: CallStatment[CallExpression[Identifier[print](Literal[
	
	was
	print(\\"was\\")
	foo[\\"xxxx\\"].test
	])]]
	8: CallStatment[CallExpression[Identifier[print](BinaryExpression[BinaryExpression[Literal[
	print(\\"was\\") ] + Literal[
	foo[\\"xxxx\\"].test
	]] + Literal[
	
	
	was
	]])]]
	17: CallStatment[CallExpression[Identifier[print](Literal[
	
	    if (typeof(@item.value) == \\"function\\") then
	
	    end if
	])]]
]"
`;

exports[`parse default scripts multiline.src unsafe 1`] = `
"Chunk[
	1: CallStatment[CallExpression[Identifier[print](Literal[
	
	was
	print(\\"was\\")
	foo[\\"xxxx\\"].test
	])]]
	8: CallStatment[CallExpression[Identifier[print](BinaryExpression[BinaryExpression[Literal[
	print(\\"was\\") ] + Literal[
	foo[\\"xxxx\\"].test
	]] + Literal[
	
	
	was
	]])]]
	17: CallStatment[CallExpression[Identifier[print](Literal[
	
	    if (typeof(@item.value) == \\"function\\") then
	
	    end if
	])]]
]"
`;

exports[`parse default scripts negation.src 1`] = `
"Chunk[
	1: AssignmentStatement[Identifier[test] = BinaryExpression[BinaryExpression[BinaryExpression[BinaryNegatedExpression[- Literal[1]] + Literal[2]] + BinaryNegatedExpression[- Literal[2]]] + BinaryNegatedExpression[+ Literal[3]]]]
	2: AssignmentStatement[Identifier[foo] = ListConstructor[
		2: ListValue[BinaryNegatedExpression[- Literal[1]]]
		2: ListValue[BinaryExpression[BinaryNegatedExpression[- Literal[2]] + Literal[4]]]
		2: ListValue[BinaryExpression[BinaryExpression[BinaryNegatedExpression[- Literal[2]] + BinaryNegatedExpression[- Literal[4]]] + BinaryNegatedExpression[+ Literal[6]]]]
	]]
	4: CallStatment[CallExpression[Identifier[print](Identifier[test])]]
	5: CallStatment[CallExpression[Identifier[print](Identifier[foo])]]
]"
`;

exports[`parse default scripts negation.src unsafe 1`] = `
"Chunk[
	1: AssignmentStatement[Identifier[test] = BinaryExpression[BinaryExpression[BinaryExpression[BinaryNegatedExpression[- Literal[1]] + Literal[2]] + BinaryNegatedExpression[- Literal[2]]] + BinaryNegatedExpression[+ Literal[3]]]]
	2: AssignmentStatement[Identifier[foo] = ListConstructor[
		2: ListValue[BinaryNegatedExpression[- Literal[1]]]
		2: ListValue[BinaryExpression[BinaryNegatedExpression[- Literal[2]] + Literal[4]]]
		2: ListValue[BinaryExpression[BinaryExpression[BinaryNegatedExpression[- Literal[2]] + BinaryNegatedExpression[- Literal[4]]] + BinaryNegatedExpression[+ Literal[6]]]]
	]]
	4: CallStatment[CallExpression[Identifier[print](Identifier[test])]]
	5: CallStatment[CallExpression[Identifier[print](Identifier[foo])]]
]"
`;

exports[`parse default scripts obj-init.src 1`] = `
"Chunk[
	1: AssignmentStatement[Identifier[valueOfIdentifier] = Literal[foo]]
	3: AssignmentStatement[Identifier[myObject] = MapConstructor[
		4: MapKeyString[Literal[test]: MapConstructor[
			5: MapKeyString[Literal[another]: Literal[123]]
		]]
		7: MapKeyString[Literal[value]: Literal[123]]
		8: MapKeyString[Literal[idtf]: Identifier[valueOfIdentifier]]
	]]
	11: CallStatment[CallExpression[Identifier[print](ListConstructor[
		11: ListValue[MemberExpression[MemberExpression[Identifier[myObject].Identifier[test]].Identifier[another]]]
		11: ListValue[MemberExpression[Identifier[myObject].Identifier[value]]]
		11: ListValue[MemberExpression[Identifier[myObject].Identifier[idtf]]]
	])]]
	13: AssignmentStatement[Identifier[myList] = ListConstructor[
		14: ListValue[MapConstructor[
			15: MapKeyString[Literal[another]: Literal[123]]
		]]
		17: ListValue[Literal[123]]
		18: ListValue[Identifier[valueOfIdentifier]]
	]]
	21: CallStatment[CallExpression[Identifier[print](Identifier[myList])]]
]"
`;

exports[`parse default scripts obj-init.src unsafe 1`] = `
"Chunk[
	1: AssignmentStatement[Identifier[valueOfIdentifier] = Literal[foo]]
	3: AssignmentStatement[Identifier[myObject] = MapConstructor[
		4: MapKeyString[Literal[test]: MapConstructor[
			5: MapKeyString[Literal[another]: Literal[123]]
		]]
		7: MapKeyString[Literal[value]: Literal[123]]
		8: MapKeyString[Literal[idtf]: Identifier[valueOfIdentifier]]
	]]
	11: CallStatment[CallExpression[Identifier[print](ListConstructor[
		11: ListValue[MemberExpression[MemberExpression[Identifier[myObject].Identifier[test]].Identifier[another]]]
		11: ListValue[MemberExpression[Identifier[myObject].Identifier[value]]]
		11: ListValue[MemberExpression[Identifier[myObject].Identifier[idtf]]]
	])]]
	13: AssignmentStatement[Identifier[myList] = ListConstructor[
		14: ListValue[MapConstructor[
			15: MapKeyString[Literal[another]: Literal[123]]
		]]
		17: ListValue[Literal[123]]
		18: ListValue[Identifier[valueOfIdentifier]]
	]]
	21: CallStatment[CallExpression[Identifier[print](Identifier[myList])]]
]"
`;

exports[`parse default scripts password-generator.src 1`] = `
"Chunk[
	1: AssignmentStatement[Identifier[PasswordGenerator] = MapConstructor[]]
	3: AssignmentStatement[MemberExpression[Identifier[PasswordGenerator].Identifier[MAX_PASSWORD_LENGTH]] = Literal[15]]
	4: AssignmentStatement[MemberExpression[Identifier[PasswordGenerator].Identifier[ALPHABETIC_CHARACTERS]] = Literal[qwertzuiopasdfghjklyxcvbnm]]
	5: AssignmentStatement[MemberExpression[Identifier[PasswordGenerator].Identifier[NUMBER_CHARACTERS]] = Literal[0123456789]]
	6: AssignmentStatement[MemberExpression[Identifier[PasswordGenerator].Identifier[ALPHA_NUMERIC]] = BinaryExpression[BinaryExpression[MemberExpression[Identifier[PasswordGenerator].Identifier[ALPHABETIC_CHARACTERS]] + MemberExpression[MemberExpression[Identifier[PasswordGenerator].Identifier[ALPHABETIC_CHARACTERS]].Identifier[upper]]] + MemberExpression[Identifier[PasswordGenerator].Identifier[NUMBER_CHARACTERS]]]]
	8: AssignmentStatement[MemberExpression[Identifier[PasswordGenerator].Identifier[constructor]] = Function[ =>
		9: AssignmentStatement[Identifier[me] = Identifier[self]]
		10: AssignmentStatement[MemberExpression[Identifier[me].Identifier[buffer]] = ListConstructor[
			10: ListValue[Literal[0]]
		]]
		11: AssignmentStatement[MemberExpression[Identifier[me].Identifier[characters]] = MemberExpression[Identifier[me].Identifier[ALPHA_NUMERIC]]]
		12: ReturnStatement[Identifier[me]]
	]]
	15: AssignmentStatement[MemberExpression[Identifier[PasswordGenerator].Identifier[increaseBuffer]] = Function[Identifier[i] =>
		16: AssignmentStatement[Identifier[me] = Identifier[self]]
		17: AssignmentStatement[Identifier[currentCharBuffer] = MemberExpression[Identifier[me].Identifier[buffer]]]
		18: AssignmentStatement[Identifier[maxBufferSize] = MemberExpression[MemberExpression[Identifier[me].Identifier[characters]].Identifier[len]]]
		19: IfStatement[
			19: IfShortcutClause[BinaryExpression[Identifier[i] == Literal[null]]
				19: AssignmentStatement[Identifier[i] = BinaryExpression[MemberExpression[Identifier[currentCharBuffer].Identifier[len]] - Literal[1]]]
			]
		]
		20: AssignmentStatement[Identifier[p] = IndexExpression[Identifier[currentCharBuffer][Identifier[i]]]]
		21: AssignmentStatement[Identifier[p] = BinaryExpression[Identifier[p] + Literal[1]]]
		22: AssignmentStatement[IndexExpression[Identifier[currentCharBuffer][Identifier[i]]] = Identifier[p]]
		23: IfStatement[
			23: IfClause[BinaryExpression[Identifier[p] == Identifier[maxBufferSize]]
				24: AssignmentStatement[IndexExpression[Identifier[currentCharBuffer][Identifier[i]]] = Literal[0]]
				25: IfStatement[
					25: IfClause[BinaryExpression[Identifier[i] == Literal[0]]
						26: CallStatment[CallExpression[MemberExpression[Identifier[currentCharBuffer].Identifier[push]](Literal[0])]]
					]
					27: ElseClause[
						28: CallStatment[CallExpression[MemberExpression[Identifier[me].Identifier[increaseBuffer]](BinaryExpression[Identifier[i] - Literal[1]])]]
					}]
				]
			]
		]
	]]
	33: AssignmentStatement[MemberExpression[Identifier[PasswordGenerator].Identifier[gen]] = Function[ =>
		34: AssignmentStatement[Identifier[me] = Identifier[self]]
		35: AssignmentStatement[Identifier[currentCharBuffer] = MemberExpression[Identifier[me].Identifier[buffer]]]
		36: AssignmentStatement[Identifier[generatorCharacters] = MemberExpression[Identifier[me].Identifier[characters]]]
		37: AssignmentStatement[Identifier[password] = Literal[]]
		38: AssignmentStatement[Identifier[index] = Literal[0]]
		40: WhileStatement[BinaryExpression[Identifier[index] < MemberExpression[Identifier[currentCharBuffer].Identifier[len]]]\\\\n	41: AssignmentStatement[Identifier[pointer] = IndexExpression[Identifier[currentCharBuffer][Identifier[index]]]]
			42: AssignmentStatement[Identifier[password] = BinaryExpression[Identifier[password] + IndexExpression[Identifier[generatorCharacters][Identifier[pointer]]]]]
			43: IfStatement[
				43: IfShortcutClause[BinaryExpression[Identifier[index] == BinaryExpression[MemberExpression[Identifier[currentCharBuffer].Identifier[len]] - Literal[1]]]
					43: CallStatment[CallExpression[MemberExpression[Identifier[self].Identifier[increaseBuffer]]()]]
				]
			]
			44: AssignmentStatement[Identifier[index] = BinaryExpression[Identifier[index] + Literal[1]]]
		]
		47: IfStatement[
			47: IfClause[BinaryExpression[MemberExpression[Identifier[currentCharBuffer].Identifier[len]] > MemberExpression[Identifier[me].Identifier[MAX_PASSWORD_LENGTH]]]
				48: ReturnStatement[Literal[null]]
			]
		]
		51: ReturnStatement[Identifier[password]]
	]]
	54: AssignmentStatement[Identifier[pgen] = CallExpression[MemberExpression[UnaryExpression[new Identifier[PasswordGenerator]].Identifier[constructor]]()]]
	56: AssignmentStatement[Identifier[index] = Literal[0]]
	57: AssignmentStatement[Identifier[max] = Literal[10]]
	58: AssignmentStatement[Identifier[result] = ListConstructor[]]
	60: WhileStatement[BinaryExpression[Identifier[index] < Identifier[max]]\\\\n	61: CallStatment[CallExpression[MemberExpression[Identifier[result].Identifier[push]](CallExpression[MemberExpression[Identifier[pgen].Identifier[gen]]()])]]
		62: AssignmentStatement[Identifier[index] = BinaryExpression[Identifier[index] + Literal[1]]]
	]
	65: CallStatment[CallExpression[Identifier[print](Identifier[result])]]
]"
`;

exports[`parse default scripts password-generator.src unsafe 1`] = `
"Chunk[
	1: AssignmentStatement[Identifier[PasswordGenerator] = MapConstructor[]]
	3: AssignmentStatement[MemberExpression[Identifier[PasswordGenerator].Identifier[MAX_PASSWORD_LENGTH]] = Literal[15]]
	4: AssignmentStatement[MemberExpression[Identifier[PasswordGenerator].Identifier[ALPHABETIC_CHARACTERS]] = Literal[qwertzuiopasdfghjklyxcvbnm]]
	5: AssignmentStatement[MemberExpression[Identifier[PasswordGenerator].Identifier[NUMBER_CHARACTERS]] = Literal[0123456789]]
	6: AssignmentStatement[MemberExpression[Identifier[PasswordGenerator].Identifier[ALPHA_NUMERIC]] = BinaryExpression[BinaryExpression[MemberExpression[Identifier[PasswordGenerator].Identifier[ALPHABETIC_CHARACTERS]] + MemberExpression[MemberExpression[Identifier[PasswordGenerator].Identifier[ALPHABETIC_CHARACTERS]].Identifier[upper]]] + MemberExpression[Identifier[PasswordGenerator].Identifier[NUMBER_CHARACTERS]]]]
	8: AssignmentStatement[MemberExpression[Identifier[PasswordGenerator].Identifier[constructor]] = Function[ =>
		9: AssignmentStatement[Identifier[me] = Identifier[self]]
		10: AssignmentStatement[MemberExpression[Identifier[me].Identifier[buffer]] = ListConstructor[
			10: ListValue[Literal[0]]
		]]
		11: AssignmentStatement[MemberExpression[Identifier[me].Identifier[characters]] = MemberExpression[Identifier[me].Identifier[ALPHA_NUMERIC]]]
		12: ReturnStatement[Identifier[me]]
	]]
	15: AssignmentStatement[MemberExpression[Identifier[PasswordGenerator].Identifier[increaseBuffer]] = Function[Identifier[i] =>
		16: AssignmentStatement[Identifier[me] = Identifier[self]]
		17: AssignmentStatement[Identifier[currentCharBuffer] = MemberExpression[Identifier[me].Identifier[buffer]]]
		18: AssignmentStatement[Identifier[maxBufferSize] = MemberExpression[MemberExpression[Identifier[me].Identifier[characters]].Identifier[len]]]
		19: IfStatement[
			19: IfShortcutClause[BinaryExpression[Identifier[i] == Literal[null]]
				19: AssignmentStatement[Identifier[i] = BinaryExpression[MemberExpression[Identifier[currentCharBuffer].Identifier[len]] - Literal[1]]]
			]
		]
		20: AssignmentStatement[Identifier[p] = IndexExpression[Identifier[currentCharBuffer][Identifier[i]]]]
		21: AssignmentStatement[Identifier[p] = BinaryExpression[Identifier[p] + Literal[1]]]
		22: AssignmentStatement[IndexExpression[Identifier[currentCharBuffer][Identifier[i]]] = Identifier[p]]
		23: IfStatement[
			23: IfClause[BinaryExpression[Identifier[p] == Identifier[maxBufferSize]]
				24: AssignmentStatement[IndexExpression[Identifier[currentCharBuffer][Identifier[i]]] = Literal[0]]
				25: IfStatement[
					25: IfClause[BinaryExpression[Identifier[i] == Literal[0]]
						26: CallStatment[CallExpression[MemberExpression[Identifier[currentCharBuffer].Identifier[push]](Literal[0])]]
					]
					27: ElseClause[
						28: CallStatment[CallExpression[MemberExpression[Identifier[me].Identifier[increaseBuffer]](BinaryExpression[Identifier[i] - Literal[1]])]]
					}]
				]
			]
		]
	]]
	33: AssignmentStatement[MemberExpression[Identifier[PasswordGenerator].Identifier[gen]] = Function[ =>
		34: AssignmentStatement[Identifier[me] = Identifier[self]]
		35: AssignmentStatement[Identifier[currentCharBuffer] = MemberExpression[Identifier[me].Identifier[buffer]]]
		36: AssignmentStatement[Identifier[generatorCharacters] = MemberExpression[Identifier[me].Identifier[characters]]]
		37: AssignmentStatement[Identifier[password] = Literal[]]
		38: AssignmentStatement[Identifier[index] = Literal[0]]
		40: WhileStatement[BinaryExpression[Identifier[index] < MemberExpression[Identifier[currentCharBuffer].Identifier[len]]]\\\\n	41: AssignmentStatement[Identifier[pointer] = IndexExpression[Identifier[currentCharBuffer][Identifier[index]]]]
			42: AssignmentStatement[Identifier[password] = BinaryExpression[Identifier[password] + IndexExpression[Identifier[generatorCharacters][Identifier[pointer]]]]]
			43: IfStatement[
				43: IfShortcutClause[BinaryExpression[Identifier[index] == BinaryExpression[MemberExpression[Identifier[currentCharBuffer].Identifier[len]] - Literal[1]]]
					43: CallStatment[CallExpression[MemberExpression[Identifier[self].Identifier[increaseBuffer]]()]]
				]
			]
			44: AssignmentStatement[Identifier[index] = BinaryExpression[Identifier[index] + Literal[1]]]
		]
		47: IfStatement[
			47: IfClause[BinaryExpression[MemberExpression[Identifier[currentCharBuffer].Identifier[len]] > MemberExpression[Identifier[me].Identifier[MAX_PASSWORD_LENGTH]]]
				48: ReturnStatement[Literal[null]]
			]
		]
		51: ReturnStatement[Identifier[password]]
	]]
	54: AssignmentStatement[Identifier[pgen] = CallExpression[MemberExpression[UnaryExpression[new Identifier[PasswordGenerator]].Identifier[constructor]]()]]
	56: AssignmentStatement[Identifier[index] = Literal[0]]
	57: AssignmentStatement[Identifier[max] = Literal[10]]
	58: AssignmentStatement[Identifier[result] = ListConstructor[]]
	60: WhileStatement[BinaryExpression[Identifier[index] < Identifier[max]]\\\\n	61: CallStatment[CallExpression[MemberExpression[Identifier[result].Identifier[push]](CallExpression[MemberExpression[Identifier[pgen].Identifier[gen]]()])]]
		62: AssignmentStatement[Identifier[index] = BinaryExpression[Identifier[index] + Literal[1]]]
	]
	65: CallStatment[CallExpression[Identifier[print](Identifier[result])]]
]"
`;

exports[`parse default scripts pseudo-crypto.src 1`] = `
"Chunk[
	1: AssignmentStatement[Identifier[String] = MapConstructor[]]
	3: AssignmentStatement[MemberExpression[Identifier[String].Identifier[constructor]] = Function[Identifier[str] =>
		4: AssignmentStatement[MemberExpression[Identifier[self].Identifier[str]] = Identifier[str]]
		5: ReturnStatement[Identifier[self]]
	]]
	8: AssignmentStatement[MemberExpression[Identifier[String].Identifier[parse]] = Function[Identifier[values] =>
		9: AssignmentStatement[Identifier[result] = MemberExpression[Identifier[self].Identifier[str]]]
		10: AssignmentStatement[Identifier[index] = Literal[0]]
		11: AssignmentStatement[Identifier[maxIndex] = MemberExpression[Identifier[values].Identifier[len]]]
		13: WhileStatement[BinaryExpression[Identifier[index] < Identifier[maxIndex]]\\\\n	14: AssignmentStatement[Identifier[result] = CallExpression[MemberExpression[Identifier[result].Identifier[replace]](BinaryExpression[Literal[$] + Identifier[index]], IndexExpression[Identifier[values][Identifier[index]]])]]
			15: AssignmentStatement[Identifier[index] = BinaryExpression[Identifier[index] + Literal[1]]]
		]
		18: ReturnStatement[CallExpression[MemberExpression[UnaryExpression[new Identifier[self]].Identifier[constructor]](Identifier[result])]]
	]]
	21: AssignmentStatement[MemberExpression[Identifier[String].Identifier[startsWith]] = Function[Identifier[str] =>
		22: ReturnStatement[BinaryExpression[CallExpression[MemberExpression[MemberExpression[Identifier[self].Identifier[str]].Identifier[indexOf]](Identifier[str])] == Literal[0]]]
	]]
	25: AssignmentStatement[MemberExpression[Identifier[String].Identifier[substr]] = Function[Identifier[startIndex], Identifier[endIndex] =>
		26: ReturnStatement[CallExpression[MemberExpression[UnaryExpression[new Identifier[self]].Identifier[constructor]](CallExpression[Identifier[slice](MemberExpression[Identifier[self].Identifier[str]], Identifier[startIndex], Identifier[endIndex])])]]
	]]
	29: AssignmentStatement[MemberExpression[Identifier[String].Identifier[indexOf]] = Function[Identifier[str] =>
		30: ReturnStatement[CallExpression[MemberExpression[MemberExpression[Identifier[self].Identifier[str]].Identifier[indexOf]](Identifier[str])]]
	]]
	33: AssignmentStatement[MemberExpression[Identifier[String].Identifier[replace]] = Function[Identifier[str], Identifier[newStr] =>
		34: ReturnStatement[CallExpression[MemberExpression[UnaryExpression[new Identifier[self]].Identifier[constructor]](CallExpression[MemberExpression[MemberExpression[Identifier[self].Identifier[str]].Identifier[replace]](Identifier[str], Identifier[newStr])])]]
	]]
	37: AssignmentStatement[MemberExpression[Identifier[String].Identifier[remove]] = Function[Identifier[str] =>
		38: ReturnStatement[CallExpression[MemberExpression[UnaryExpression[new Identifier[self]].Identifier[constructor]](CallExpression[MemberExpression[MemberExpression[Identifier[self].Identifier[str]].Identifier[remove]](Identifier[str])])]]
	]]
	41: AssignmentStatement[MemberExpression[Identifier[String].Identifier[toString]] = Function[ =>
		42: ReturnStatement[MemberExpression[Identifier[self].Identifier[str]]]
	]]
	45: AssignmentStatement[MemberExpression[Identifier[String].Identifier[length]] = Function[ =>
		46: ReturnStatement[MemberExpression[MemberExpression[Identifier[self].Identifier[str]].Identifier[len]]]
	]]
	49: AssignmentStatement[MemberExpression[Identifier[String].Identifier[split]] = Function[Identifier[seperator] =>
		50: ReturnStatement[CallExpression[MemberExpression[MemberExpression[Identifier[self].Identifier[str]].Identifier[split]](Identifier[seperator])]]
	]]
	53: AssignmentStatement[MemberExpression[Identifier[String].Identifier[trim]] = Function[Identifier[seperator] =>
		54: ReturnStatement[CallExpression[MemberExpression[UnaryExpression[new Identifier[self]].Identifier[constructor]](CallExpression[MemberExpression[MemberExpression[Identifier[self].Identifier[str]].Identifier[trim]]()])]]
	]]
	57: AssignmentStatement[Identifier[Error] = MapConstructor[]]
	59: AssignmentStatement[MemberExpression[Identifier[Error].Identifier[String]] = Identifier[String]]
	61: AssignmentStatement[MemberExpression[Identifier[Error].Identifier[constructor]] = Function[Identifier[message], Identifier[values] =>
		62: AssignmentStatement[Identifier[m] = Identifier[self]]
		63: AssignmentStatement[MemberExpression[Identifier[m].Identifier[message]] = Identifier[message]]
		64: IfStatement[
			64: IfClause[BinaryExpression[Identifier[values] != Literal[null]]
				65: AssignmentStatement[MemberExpression[Identifier[m].Identifier[message]] = CallExpression[MemberExpression[CallExpression[MemberExpression[CallExpression[MemberExpression[UnaryExpression[new MemberExpression[Identifier[m].Identifier[String]]].Identifier[constructor]](Identifier[message])].Identifier[parse]](Identifier[values])].Identifier[toString]]()]]
			]
		]
		67: ReturnStatement[Identifier[m]]
	]]
	70: AssignmentStatement[MemberExpression[Identifier[Error].Identifier[throw]] = Function[ =>
		71: CallStatment[CallExpression[Identifier[exit](BinaryExpression[BinaryExpression[Literal[<color=#ff0000>] + MemberExpression[Identifier[self].Identifier[message]]] + Literal[</color>]])]]
	]]
	74: AssignmentStatement[Identifier[Crypto] = MapConstructor[]]
	76: AssignmentStatement[MemberExpression[Identifier[Crypto].Identifier[defaultCharset]] = Literal[QWERTZUIOPASDFGHJKLYXCVBNMqwertzuiopasdfghjklyxcvbnm1234567890+-]]
	77: AssignmentStatement[MemberExpression[Identifier[Crypto].Identifier[defaultSecret]] = Literal[test123]]
	78: AssignmentStatement[MemberExpression[Identifier[Crypto].Identifier[maxCharCode]] = Literal[55295]]
	79: AssignmentStatement[MemberExpression[Identifier[Crypto].Identifier[Error]] = Identifier[Error]]
	81: AssignmentStatement[MemberExpression[Identifier[Crypto].Identifier[constructor]] = Function[Identifier[defaultSecret], Identifier[hashFn], Identifier[charset] =>
		82: AssignmentStatement[Identifier[me] = Identifier[self]]
		83: AssignmentStatement[MemberExpression[Identifier[me].Identifier[defaultSecret]] = Identifier[defaultSecret]]
		84: AssignmentStatement[MemberExpression[Identifier[me].Identifier[table]] = Identifier[charset]]
		85: AssignmentStatement[MemberExpression[Identifier[me].Identifier[hashFn]] = UnaryExpression[@ Identifier[hashFn]]]
		86: IfStatement[
			86: IfShortcutClause[BinaryExpression[UnaryExpression[@ Identifier[hashFn]] == Literal[null]]
				86: AssignmentStatement[MemberExpression[Identifier[me].Identifier[hashFn]] = UnaryExpression[@ Identifier[md5]]]
			]
		]
		87: IfStatement[
			87: IfShortcutClause[BinaryExpression[Identifier[charset] == Literal[null]]
				87: AssignmentStatement[MemberExpression[Identifier[me].Identifier[table]] = MemberExpression[Identifier[me].Identifier[defaultCharset]]]
			]
		]
		88: IfStatement[
			88: IfShortcutClause[BinaryExpression[MemberExpression[MemberExpression[Identifier[me].Identifier[table]].Identifier[len]] != Literal[64]]
				88: CallStatment[CallExpression[MemberExpression[CallExpression[MemberExpression[UnaryExpression[new MemberExpression[Identifier[me].Identifier[Error]]].Identifier[constructor]](Literal[Invalid charset $0...], ListConstructor[
					88: ListValue[MemberExpression[Identifier[me].Identifier[table]]]
				])].Identifier[throw]]()]]
			]
		]
		89: ReturnStatement[Identifier[me]]
	]]
	92: AssignmentStatement[MemberExpression[Identifier[Crypto].Identifier[getHash]] = Function[Identifier[pw] =>
		93: AssignmentStatement[Identifier[me] = Identifier[self]]
		94: AssignmentStatement[Identifier[hash] = ListConstructor[]]
		95: AssignmentStatement[Identifier[x] = CallExpression[MemberExpression[Identifier[me].Identifier[hashFn]](Identifier[pw])]]
		96: For[Identifier[char] in Identifier[x]
			97: CallStatment[CallExpression[MemberExpression[Identifier[hash].Identifier[push]](MemberExpression[Identifier[char].Identifier[code]])]]
		]
		99: CallStatment[MemberExpression[Identifier[hash].Identifier[reverse]]]
		100: ReturnStatement[Identifier[hash]]
	]]
	103: AssignmentStatement[MemberExpression[Identifier[Crypto].Identifier[encrypt]] = Function[Identifier[str], Identifier[pw] =>
		104: AssignmentStatement[Identifier[me] = Identifier[self]]
		105: IfStatement[
			105: IfShortcutClause[BinaryExpression[Identifier[pw] == Literal[null]]
				105: AssignmentStatement[Identifier[pw] = MemberExpression[Identifier[me].Identifier[defaultSecret]]]
			]
		]
		106: AssignmentStatement[Identifier[hash] = CallExpression[MemberExpression[Identifier[me].Identifier[getHash]](Identifier[pw])]]
		107: AssignmentStatement[Identifier[hashPointer] = Literal[0]]
		108: AssignmentStatement[Identifier[output] = ListConstructor[]]
		109: AssignmentStatement[Identifier[position] = Literal[0]]
		110: AssignmentStatement[Identifier[padding] = BinaryExpression[MemberExpression[Identifier[str].Identifier[len]] % Literal[3]]]
		111: AssignmentStatement[Identifier[max] = BinaryExpression[MemberExpression[Identifier[str].Identifier[len]] - Identifier[padding]]]
		112: AssignmentStatement[Identifier[get] = Function[Identifier[v] =>
			113: IfStatement[
				113: IfClause[NegationExpression[not CallExpression[MemberExpression[MemberExpression[Identifier[me].Identifier[table]].Identifier[hasIndex]](Identifier[v])]]
					114: CallStatment[CallExpression[MemberExpression[CallExpression[MemberExpression[UnaryExpression[new MemberExpression[Identifier[me].Identifier[Error]]].Identifier[constructor]](Literal[Invalid index $0...], ListConstructor[
						114: ListValue[Identifier[v]]
					])].Identifier[throw]]()]]
				]
			]
			116: ReturnStatement[IndexExpression[MemberExpression[Identifier[me].Identifier[table]][Identifier[v]]]]
		]]
		118: AssignmentStatement[Identifier[AND] = Function[Identifier[a], Identifier[b] =>
			119: ReturnStatement[CallExpression[Identifier[bitwise](Literal[&], Identifier[a], Identifier[b])]]
		]]
		121: AssignmentStatement[Identifier[LSHIFT] = Function[Identifier[a], Identifier[b] =>
			122: ReturnStatement[CallExpression[Identifier[bitwise](Literal[<<], Identifier[a], Identifier[b])]]
		]]
		124: AssignmentStatement[Identifier[RSHIFT] = Function[Identifier[a], Identifier[b] =>
			125: ReturnStatement[CallExpression[Identifier[bitwise](Literal[>>], Identifier[a], Identifier[b])]]
		]]
		127: WhileStatement[BinaryExpression[Identifier[position] < Identifier[max]]\\\\n	128: AssignmentStatement[Identifier[m] = IndexExpression[Identifier[hash][BinaryExpression[BinaryExpression[Identifier[position] % MemberExpression[Identifier[hash].Identifier[len]]] - Literal[1]]]]]
			129: AssignmentStatement[Identifier[a] = CallExpression[Identifier[LSHIFT](BinaryExpression[MemberExpression[IndexExpression[Identifier[str][Identifier[position]]].Identifier[code]] + Identifier[m]], Literal[16])]]
			130: AssignmentStatement[Identifier[b] = CallExpression[Identifier[LSHIFT](BinaryExpression[MemberExpression[IndexExpression[Identifier[str][BinaryExpression[Identifier[position] + Literal[1]]]].Identifier[code]] + Identifier[m]], Literal[8])]]
			131: AssignmentStatement[Identifier[c] = BinaryExpression[MemberExpression[IndexExpression[Identifier[str][BinaryExpression[Identifier[position] + Literal[2]]]].Identifier[code]] + Identifier[m]]]
			132: AssignmentStatement[Identifier[buffer] = BinaryExpression[BinaryExpression[Identifier[a] + Identifier[b]] + Identifier[c]]]
			133: CallStatment[CallExpression[MemberExpression[Identifier[output].Identifier[push]](CallExpression[Identifier[get](CallExpression[Identifier[AND](CallExpression[Identifier[RSHIFT](Identifier[buffer], Literal[18])], Literal[63])])])]]
			134: CallStatment[CallExpression[MemberExpression[Identifier[output].Identifier[push]](CallExpression[Identifier[get](CallExpression[Identifier[AND](CallExpression[Identifier[RSHIFT](Identifier[buffer], Literal[12])], Literal[63])])])]]
			135: CallStatment[CallExpression[MemberExpression[Identifier[output].Identifier[push]](CallExpression[Identifier[get](CallExpression[Identifier[AND](CallExpression[Identifier[RSHIFT](Identifier[buffer], Literal[6])], Literal[63])])])]]
			136: CallStatment[CallExpression[MemberExpression[Identifier[output].Identifier[push]](CallExpression[Identifier[get](CallExpression[Identifier[AND](Identifier[buffer], Literal[63])])])]]
			137: AssignmentStatement[Identifier[position] = BinaryExpression[Identifier[position] + Literal[3]]]
		]
		139: IfStatement[
			139: IfClause[BinaryExpression[Identifier[padding] == Literal[2]]
				140: AssignmentStatement[Identifier[m] = IndexExpression[Identifier[hash][BinaryExpression[BinaryExpression[Identifier[position] % MemberExpression[Identifier[hash].Identifier[len]]] - Literal[1]]]]]
				141: AssignmentStatement[Identifier[a] = CallExpression[Identifier[LSHIFT](BinaryExpression[MemberExpression[IndexExpression[Identifier[str][Identifier[position]]].Identifier[code]] + Identifier[m]], Literal[8])]]
				142: AssignmentStatement[Identifier[b] = BinaryExpression[MemberExpression[IndexExpression[Identifier[str][BinaryExpression[Identifier[position] + Literal[1]]]].Identifier[code]] + Identifier[m]]]
				143: AssignmentStatement[Identifier[buffer] = BinaryExpression[Identifier[a] + Identifier[b]]]
				144: CallStatment[CallExpression[MemberExpression[Identifier[output].Identifier[push]](CallExpression[Identifier[get](CallExpression[Identifier[RSHIFT](Identifier[buffer], Literal[10])])])]]
				145: CallStatment[CallExpression[MemberExpression[Identifier[output].Identifier[push]](CallExpression[Identifier[get](CallExpression[Identifier[AND](CallExpression[Identifier[RSHIFT](Identifier[buffer], Literal[4])], Literal[63])])])]]
				146: CallStatment[CallExpression[MemberExpression[Identifier[output].Identifier[push]](CallExpression[Identifier[get](CallExpression[Identifier[AND](CallExpression[Identifier[LSHIFT](Identifier[buffer], Literal[2])], Literal[63])])])]]
				147: CallStatment[CallExpression[MemberExpression[Identifier[output].Identifier[push]](Literal[=])]]
			]
			148: ElseifClause[BinaryExpression[Identifier[padding] == Literal[1]]
				149: AssignmentStatement[Identifier[m] = IndexExpression[Identifier[hash][BinaryExpression[BinaryExpression[Identifier[position] % MemberExpression[Identifier[hash].Identifier[len]]] - Literal[1]]]]]
				150: AssignmentStatement[Identifier[buffer] = BinaryExpression[MemberExpression[IndexExpression[Identifier[str][Identifier[position]]].Identifier[code]] + Identifier[m]]]
				151: CallStatment[CallExpression[MemberExpression[Identifier[output].Identifier[push]](CallExpression[Identifier[get](CallExpression[Identifier[RSHIFT](Identifier[buffer], Literal[2])])])]]
				152: CallStatment[CallExpression[MemberExpression[Identifier[output].Identifier[push]](CallExpression[Identifier[get](CallExpression[Identifier[AND](CallExpression[Identifier[LSHIFT](Identifier[buffer], Literal[4])], Literal[63])])])]]
				153: CallStatment[CallExpression[MemberExpression[Identifier[output].Identifier[push]](Literal[==])]]
			]
		]
		155: ReturnStatement[CallExpression[MemberExpression[Identifier[output].Identifier[join]](Literal[])]]
	]]
	158: AssignmentStatement[MemberExpression[Identifier[Crypto].Identifier[decrypt]] = Function[Identifier[str], Identifier[pw] =>
		159: AssignmentStatement[Identifier[me] = Identifier[self]]
		160: IfStatement[
			160: IfShortcutClause[BinaryExpression[Identifier[pw] == Literal[null]]
				160: AssignmentStatement[Identifier[pw] = MemberExpression[Identifier[me].Identifier[defaultSecret]]]
			]
		]
		161: AssignmentStatement[Identifier[hash] = CallExpression[MemberExpression[Identifier[me].Identifier[getHash]](Identifier[pw])]]
		162: AssignmentStatement[Identifier[hashPointer] = Literal[0]]
		163: AssignmentStatement[Identifier[hashLength] = MemberExpression[Identifier[hash].Identifier[len]]]
		164: AssignmentStatement[Identifier[output] = ListConstructor[]]
		165: AssignmentStatement[Identifier[bitCounter] = Literal[0]]
		166: AssignmentStatement[Identifier[bitStorage] = Literal[0]]
		167: AssignmentStatement[Identifier[position] = Literal[0]]
		168: AssignmentStatement[Identifier[hashPointer] = Literal[0]]
		169: AssignmentStatement[Identifier[max] = MemberExpression[Identifier[str].Identifier[len]]]
		170: AssignmentStatement[Identifier[AND] = Function[Identifier[a], Identifier[b] =>
			171: ReturnStatement[CallExpression[Identifier[bitwise](Literal[&], Identifier[a], Identifier[b])]]
		]]
		173: AssignmentStatement[Identifier[RSHIFT] = Function[Identifier[a], Identifier[b] =>
			174: ReturnStatement[CallExpression[Identifier[bitwise](Literal[>>], Identifier[a], Identifier[b])]]
		]]
		176: WhileStatement[BinaryExpression[Identifier[position] < Identifier[max]]\\\\n	177: AssignmentStatement[Identifier[buffer] = CallExpression[MemberExpression[MemberExpression[Identifier[me].Identifier[table]].Identifier[indexOf]](IndexExpression[Identifier[str][Identifier[position]]])]]
			178: AssignmentStatement[Identifier[currentBit] = Identifier[bitCounter]]
			179: AssignmentStatement[Identifier[bitCounter] = BinaryExpression[Identifier[bitCounter] + Literal[1]]]
			180: IfStatement[
				180: IfClause[BinaryExpression[Identifier[currentBit] % Literal[4]]
					181: AssignmentStatement[Identifier[bitStorage] = BinaryExpression[BinaryExpression[Identifier[bitStorage] * Literal[64]] + Identifier[buffer]]]
				]
				182: ElseClause[
					183: AssignmentStatement[Identifier[bitStorage] = Identifier[buffer]]
				}]
			]
			185: IfStatement[
				185: IfClause[BinaryExpression[Identifier[currentBit] % Literal[4]]
					186: AssignmentStatement[Identifier[expectedHashIndex] = BinaryExpression[BinaryExpression[BinaryExpression[CallExpression[Identifier[floor](BinaryExpression[Identifier[hashPointer] / Literal[3]])] * Literal[3]] % Identifier[hashLength]] - Literal[1]]]
					187: IfStatement[
						187: IfShortcutClause[NegationExpression[not CallExpression[MemberExpression[Identifier[hash].Identifier[hasIndex]](Identifier[expectedHashIndex])]]
							187: BreakStatement[]
						]
					]
					188: AssignmentStatement[Identifier[m] = IndexExpression[Identifier[hash][Identifier[expectedHashIndex]]]]
					189: AssignmentStatement[Identifier[operation] = CallExpression[Identifier[AND](BinaryExpression[BinaryNegatedExpression[- Literal[2]] * Identifier[bitCounter]], Literal[6])]]
					190: AssignmentStatement[Identifier[operation] = CallExpression[Identifier[RSHIFT](Identifier[bitStorage], Identifier[operation])]]
					191: AssignmentStatement[Identifier[operation] = CallExpression[Identifier[AND](Literal[255], Identifier[operation])]]
					192: IfStatement[
						192: IfClause[BinaryExpression[Identifier[operation] != Literal[0]]
							193: AssignmentStatement[Identifier[charCode] = BinaryExpression[Identifier[operation] - Identifier[m]]]
							194: IfStatement[
								194: IfShortcutClause[BinaryExpression[Identifier[charCode] > MemberExpression[Identifier[me].Identifier[maxCharCode]]]
									194: BreakStatement[]
								]
							]
							195: CallStatment[CallExpression[MemberExpression[Identifier[output].Identifier[push]](CallExpression[Identifier[char](Identifier[charCode])])]]
						]
					]
					197: AssignmentStatement[Identifier[hashPointer] = BinaryExpression[Identifier[hashPointer] + Literal[1]]]
				]
			]
			199: AssignmentStatement[Identifier[position] = BinaryExpression[Identifier[position] + Literal[1]]]
		]
		201: ReturnStatement[CallExpression[MemberExpression[Identifier[output].Identifier[join]](Literal[])]]
	]]
	204: AssignmentStatement[Identifier[test] = CallExpression[MemberExpression[UnaryExpression[new Identifier[Crypto]].Identifier[constructor]](Literal[test])]]
	206: AssignmentStatement[Identifier[pwd] = Literal[abcde]]
	208: AssignmentStatement[Identifier[foo] = CallExpression[MemberExpression[Identifier[test].Identifier[encrypt]](Identifier[pwd])]]
	209: AssignmentStatement[Identifier[decrypted] = CallExpression[MemberExpression[Identifier[test].Identifier[decrypt]](Identifier[foo])]]
	211: CallStatment[CallExpression[Identifier[print](Identifier[foo])]]
	212: CallStatment[CallExpression[Identifier[print](Identifier[decrypted])]]
]"
`;

exports[`parse default scripts pseudo-crypto.src unsafe 1`] = `
"Chunk[
	1: AssignmentStatement[Identifier[String] = MapConstructor[]]
	3: AssignmentStatement[MemberExpression[Identifier[String].Identifier[constructor]] = Function[Identifier[str] =>
		4: AssignmentStatement[MemberExpression[Identifier[self].Identifier[str]] = Identifier[str]]
		5: ReturnStatement[Identifier[self]]
	]]
	8: AssignmentStatement[MemberExpression[Identifier[String].Identifier[parse]] = Function[Identifier[values] =>
		9: AssignmentStatement[Identifier[result] = MemberExpression[Identifier[self].Identifier[str]]]
		10: AssignmentStatement[Identifier[index] = Literal[0]]
		11: AssignmentStatement[Identifier[maxIndex] = MemberExpression[Identifier[values].Identifier[len]]]
		13: WhileStatement[BinaryExpression[Identifier[index] < Identifier[maxIndex]]\\\\n	14: AssignmentStatement[Identifier[result] = CallExpression[MemberExpression[Identifier[result].Identifier[replace]](BinaryExpression[Literal[$] + Identifier[index]], IndexExpression[Identifier[values][Identifier[index]]])]]
			15: AssignmentStatement[Identifier[index] = BinaryExpression[Identifier[index] + Literal[1]]]
		]
		18: ReturnStatement[CallExpression[MemberExpression[UnaryExpression[new Identifier[self]].Identifier[constructor]](Identifier[result])]]
	]]
	21: AssignmentStatement[MemberExpression[Identifier[String].Identifier[startsWith]] = Function[Identifier[str] =>
		22: ReturnStatement[BinaryExpression[CallExpression[MemberExpression[MemberExpression[Identifier[self].Identifier[str]].Identifier[indexOf]](Identifier[str])] == Literal[0]]]
	]]
	25: AssignmentStatement[MemberExpression[Identifier[String].Identifier[substr]] = Function[Identifier[startIndex], Identifier[endIndex] =>
		26: ReturnStatement[CallExpression[MemberExpression[UnaryExpression[new Identifier[self]].Identifier[constructor]](CallExpression[Identifier[slice](MemberExpression[Identifier[self].Identifier[str]], Identifier[startIndex], Identifier[endIndex])])]]
	]]
	29: AssignmentStatement[MemberExpression[Identifier[String].Identifier[indexOf]] = Function[Identifier[str] =>
		30: ReturnStatement[CallExpression[MemberExpression[MemberExpression[Identifier[self].Identifier[str]].Identifier[indexOf]](Identifier[str])]]
	]]
	33: AssignmentStatement[MemberExpression[Identifier[String].Identifier[replace]] = Function[Identifier[str], Identifier[newStr] =>
		34: ReturnStatement[CallExpression[MemberExpression[UnaryExpression[new Identifier[self]].Identifier[constructor]](CallExpression[MemberExpression[MemberExpression[Identifier[self].Identifier[str]].Identifier[replace]](Identifier[str], Identifier[newStr])])]]
	]]
	37: AssignmentStatement[MemberExpression[Identifier[String].Identifier[remove]] = Function[Identifier[str] =>
		38: ReturnStatement[CallExpression[MemberExpression[UnaryExpression[new Identifier[self]].Identifier[constructor]](CallExpression[MemberExpression[MemberExpression[Identifier[self].Identifier[str]].Identifier[remove]](Identifier[str])])]]
	]]
	41: AssignmentStatement[MemberExpression[Identifier[String].Identifier[toString]] = Function[ =>
		42: ReturnStatement[MemberExpression[Identifier[self].Identifier[str]]]
	]]
	45: AssignmentStatement[MemberExpression[Identifier[String].Identifier[length]] = Function[ =>
		46: ReturnStatement[MemberExpression[MemberExpression[Identifier[self].Identifier[str]].Identifier[len]]]
	]]
	49: AssignmentStatement[MemberExpression[Identifier[String].Identifier[split]] = Function[Identifier[seperator] =>
		50: ReturnStatement[CallExpression[MemberExpression[MemberExpression[Identifier[self].Identifier[str]].Identifier[split]](Identifier[seperator])]]
	]]
	53: AssignmentStatement[MemberExpression[Identifier[String].Identifier[trim]] = Function[Identifier[seperator] =>
		54: ReturnStatement[CallExpression[MemberExpression[UnaryExpression[new Identifier[self]].Identifier[constructor]](CallExpression[MemberExpression[MemberExpression[Identifier[self].Identifier[str]].Identifier[trim]]()])]]
	]]
	57: AssignmentStatement[Identifier[Error] = MapConstructor[]]
	59: AssignmentStatement[MemberExpression[Identifier[Error].Identifier[String]] = Identifier[String]]
	61: AssignmentStatement[MemberExpression[Identifier[Error].Identifier[constructor]] = Function[Identifier[message], Identifier[values] =>
		62: AssignmentStatement[Identifier[m] = Identifier[self]]
		63: AssignmentStatement[MemberExpression[Identifier[m].Identifier[message]] = Identifier[message]]
		64: IfStatement[
			64: IfClause[BinaryExpression[Identifier[values] != Literal[null]]
				65: AssignmentStatement[MemberExpression[Identifier[m].Identifier[message]] = CallExpression[MemberExpression[CallExpression[MemberExpression[CallExpression[MemberExpression[UnaryExpression[new MemberExpression[Identifier[m].Identifier[String]]].Identifier[constructor]](Identifier[message])].Identifier[parse]](Identifier[values])].Identifier[toString]]()]]
			]
		]
		67: ReturnStatement[Identifier[m]]
	]]
	70: AssignmentStatement[MemberExpression[Identifier[Error].Identifier[throw]] = Function[ =>
		71: CallStatment[CallExpression[Identifier[exit](BinaryExpression[BinaryExpression[Literal[<color=#ff0000>] + MemberExpression[Identifier[self].Identifier[message]]] + Literal[</color>]])]]
	]]
	74: AssignmentStatement[Identifier[Crypto] = MapConstructor[]]
	76: AssignmentStatement[MemberExpression[Identifier[Crypto].Identifier[defaultCharset]] = Literal[QWERTZUIOPASDFGHJKLYXCVBNMqwertzuiopasdfghjklyxcvbnm1234567890+-]]
	77: AssignmentStatement[MemberExpression[Identifier[Crypto].Identifier[defaultSecret]] = Literal[test123]]
	78: AssignmentStatement[MemberExpression[Identifier[Crypto].Identifier[maxCharCode]] = Literal[55295]]
	79: AssignmentStatement[MemberExpression[Identifier[Crypto].Identifier[Error]] = Identifier[Error]]
	81: AssignmentStatement[MemberExpression[Identifier[Crypto].Identifier[constructor]] = Function[Identifier[defaultSecret], Identifier[hashFn], Identifier[charset] =>
		82: AssignmentStatement[Identifier[me] = Identifier[self]]
		83: AssignmentStatement[MemberExpression[Identifier[me].Identifier[defaultSecret]] = Identifier[defaultSecret]]
		84: AssignmentStatement[MemberExpression[Identifier[me].Identifier[table]] = Identifier[charset]]
		85: AssignmentStatement[MemberExpression[Identifier[me].Identifier[hashFn]] = UnaryExpression[@ Identifier[hashFn]]]
		86: IfStatement[
			86: IfShortcutClause[BinaryExpression[UnaryExpression[@ Identifier[hashFn]] == Literal[null]]
				86: AssignmentStatement[MemberExpression[Identifier[me].Identifier[hashFn]] = UnaryExpression[@ Identifier[md5]]]
			]
		]
		87: IfStatement[
			87: IfShortcutClause[BinaryExpression[Identifier[charset] == Literal[null]]
				87: AssignmentStatement[MemberExpression[Identifier[me].Identifier[table]] = MemberExpression[Identifier[me].Identifier[defaultCharset]]]
			]
		]
		88: IfStatement[
			88: IfShortcutClause[BinaryExpression[MemberExpression[MemberExpression[Identifier[me].Identifier[table]].Identifier[len]] != Literal[64]]
				88: CallStatment[CallExpression[MemberExpression[CallExpression[MemberExpression[UnaryExpression[new MemberExpression[Identifier[me].Identifier[Error]]].Identifier[constructor]](Literal[Invalid charset $0...], ListConstructor[
					88: ListValue[MemberExpression[Identifier[me].Identifier[table]]]
				])].Identifier[throw]]()]]
			]
		]
		89: ReturnStatement[Identifier[me]]
	]]
	92: AssignmentStatement[MemberExpression[Identifier[Crypto].Identifier[getHash]] = Function[Identifier[pw] =>
		93: AssignmentStatement[Identifier[me] = Identifier[self]]
		94: AssignmentStatement[Identifier[hash] = ListConstructor[]]
		95: AssignmentStatement[Identifier[x] = CallExpression[MemberExpression[Identifier[me].Identifier[hashFn]](Identifier[pw])]]
		96: For[Identifier[char] in Identifier[x]
			97: CallStatment[CallExpression[MemberExpression[Identifier[hash].Identifier[push]](MemberExpression[Identifier[char].Identifier[code]])]]
		]
		99: CallStatment[MemberExpression[Identifier[hash].Identifier[reverse]]]
		100: ReturnStatement[Identifier[hash]]
	]]
	103: AssignmentStatement[MemberExpression[Identifier[Crypto].Identifier[encrypt]] = Function[Identifier[str], Identifier[pw] =>
		104: AssignmentStatement[Identifier[me] = Identifier[self]]
		105: IfStatement[
			105: IfShortcutClause[BinaryExpression[Identifier[pw] == Literal[null]]
				105: AssignmentStatement[Identifier[pw] = MemberExpression[Identifier[me].Identifier[defaultSecret]]]
			]
		]
		106: AssignmentStatement[Identifier[hash] = CallExpression[MemberExpression[Identifier[me].Identifier[getHash]](Identifier[pw])]]
		107: AssignmentStatement[Identifier[hashPointer] = Literal[0]]
		108: AssignmentStatement[Identifier[output] = ListConstructor[]]
		109: AssignmentStatement[Identifier[position] = Literal[0]]
		110: AssignmentStatement[Identifier[padding] = BinaryExpression[MemberExpression[Identifier[str].Identifier[len]] % Literal[3]]]
		111: AssignmentStatement[Identifier[max] = BinaryExpression[MemberExpression[Identifier[str].Identifier[len]] - Identifier[padding]]]
		112: AssignmentStatement[Identifier[get] = Function[Identifier[v] =>
			113: IfStatement[
				113: IfClause[NegationExpression[not CallExpression[MemberExpression[MemberExpression[Identifier[me].Identifier[table]].Identifier[hasIndex]](Identifier[v])]]
					114: CallStatment[CallExpression[MemberExpression[CallExpression[MemberExpression[UnaryExpression[new MemberExpression[Identifier[me].Identifier[Error]]].Identifier[constructor]](Literal[Invalid index $0...], ListConstructor[
						114: ListValue[Identifier[v]]
					])].Identifier[throw]]()]]
				]
			]
			116: ReturnStatement[IndexExpression[MemberExpression[Identifier[me].Identifier[table]][Identifier[v]]]]
		]]
		118: AssignmentStatement[Identifier[AND] = Function[Identifier[a], Identifier[b] =>
			119: ReturnStatement[CallExpression[Identifier[bitwise](Literal[&], Identifier[a], Identifier[b])]]
		]]
		121: AssignmentStatement[Identifier[LSHIFT] = Function[Identifier[a], Identifier[b] =>
			122: ReturnStatement[CallExpression[Identifier[bitwise](Literal[<<], Identifier[a], Identifier[b])]]
		]]
		124: AssignmentStatement[Identifier[RSHIFT] = Function[Identifier[a], Identifier[b] =>
			125: ReturnStatement[CallExpression[Identifier[bitwise](Literal[>>], Identifier[a], Identifier[b])]]
		]]
		127: WhileStatement[BinaryExpression[Identifier[position] < Identifier[max]]\\\\n	128: AssignmentStatement[Identifier[m] = IndexExpression[Identifier[hash][BinaryExpression[BinaryExpression[Identifier[position] % MemberExpression[Identifier[hash].Identifier[len]]] - Literal[1]]]]]
			129: AssignmentStatement[Identifier[a] = CallExpression[Identifier[LSHIFT](BinaryExpression[MemberExpression[IndexExpression[Identifier[str][Identifier[position]]].Identifier[code]] + Identifier[m]], Literal[16])]]
			130: AssignmentStatement[Identifier[b] = CallExpression[Identifier[LSHIFT](BinaryExpression[MemberExpression[IndexExpression[Identifier[str][BinaryExpression[Identifier[position] + Literal[1]]]].Identifier[code]] + Identifier[m]], Literal[8])]]
			131: AssignmentStatement[Identifier[c] = BinaryExpression[MemberExpression[IndexExpression[Identifier[str][BinaryExpression[Identifier[position] + Literal[2]]]].Identifier[code]] + Identifier[m]]]
			132: AssignmentStatement[Identifier[buffer] = BinaryExpression[BinaryExpression[Identifier[a] + Identifier[b]] + Identifier[c]]]
			133: CallStatment[CallExpression[MemberExpression[Identifier[output].Identifier[push]](CallExpression[Identifier[get](CallExpression[Identifier[AND](CallExpression[Identifier[RSHIFT](Identifier[buffer], Literal[18])], Literal[63])])])]]
			134: CallStatment[CallExpression[MemberExpression[Identifier[output].Identifier[push]](CallExpression[Identifier[get](CallExpression[Identifier[AND](CallExpression[Identifier[RSHIFT](Identifier[buffer], Literal[12])], Literal[63])])])]]
			135: CallStatment[CallExpression[MemberExpression[Identifier[output].Identifier[push]](CallExpression[Identifier[get](CallExpression[Identifier[AND](CallExpression[Identifier[RSHIFT](Identifier[buffer], Literal[6])], Literal[63])])])]]
			136: CallStatment[CallExpression[MemberExpression[Identifier[output].Identifier[push]](CallExpression[Identifier[get](CallExpression[Identifier[AND](Identifier[buffer], Literal[63])])])]]
			137: AssignmentStatement[Identifier[position] = BinaryExpression[Identifier[position] + Literal[3]]]
		]
		139: IfStatement[
			139: IfClause[BinaryExpression[Identifier[padding] == Literal[2]]
				140: AssignmentStatement[Identifier[m] = IndexExpression[Identifier[hash][BinaryExpression[BinaryExpression[Identifier[position] % MemberExpression[Identifier[hash].Identifier[len]]] - Literal[1]]]]]
				141: AssignmentStatement[Identifier[a] = CallExpression[Identifier[LSHIFT](BinaryExpression[MemberExpression[IndexExpression[Identifier[str][Identifier[position]]].Identifier[code]] + Identifier[m]], Literal[8])]]
				142: AssignmentStatement[Identifier[b] = BinaryExpression[MemberExpression[IndexExpression[Identifier[str][BinaryExpression[Identifier[position] + Literal[1]]]].Identifier[code]] + Identifier[m]]]
				143: AssignmentStatement[Identifier[buffer] = BinaryExpression[Identifier[a] + Identifier[b]]]
				144: CallStatment[CallExpression[MemberExpression[Identifier[output].Identifier[push]](CallExpression[Identifier[get](CallExpression[Identifier[RSHIFT](Identifier[buffer], Literal[10])])])]]
				145: CallStatment[CallExpression[MemberExpression[Identifier[output].Identifier[push]](CallExpression[Identifier[get](CallExpression[Identifier[AND](CallExpression[Identifier[RSHIFT](Identifier[buffer], Literal[4])], Literal[63])])])]]
				146: CallStatment[CallExpression[MemberExpression[Identifier[output].Identifier[push]](CallExpression[Identifier[get](CallExpression[Identifier[AND](CallExpression[Identifier[LSHIFT](Identifier[buffer], Literal[2])], Literal[63])])])]]
				147: CallStatment[CallExpression[MemberExpression[Identifier[output].Identifier[push]](Literal[=])]]
			]
			148: ElseifClause[BinaryExpression[Identifier[padding] == Literal[1]]
				149: AssignmentStatement[Identifier[m] = IndexExpression[Identifier[hash][BinaryExpression[BinaryExpression[Identifier[position] % MemberExpression[Identifier[hash].Identifier[len]]] - Literal[1]]]]]
				150: AssignmentStatement[Identifier[buffer] = BinaryExpression[MemberExpression[IndexExpression[Identifier[str][Identifier[position]]].Identifier[code]] + Identifier[m]]]
				151: CallStatment[CallExpression[MemberExpression[Identifier[output].Identifier[push]](CallExpression[Identifier[get](CallExpression[Identifier[RSHIFT](Identifier[buffer], Literal[2])])])]]
				152: CallStatment[CallExpression[MemberExpression[Identifier[output].Identifier[push]](CallExpression[Identifier[get](CallExpression[Identifier[AND](CallExpression[Identifier[LSHIFT](Identifier[buffer], Literal[4])], Literal[63])])])]]
				153: CallStatment[CallExpression[MemberExpression[Identifier[output].Identifier[push]](Literal[==])]]
			]
		]
		155: ReturnStatement[CallExpression[MemberExpression[Identifier[output].Identifier[join]](Literal[])]]
	]]
	158: AssignmentStatement[MemberExpression[Identifier[Crypto].Identifier[decrypt]] = Function[Identifier[str], Identifier[pw] =>
		159: AssignmentStatement[Identifier[me] = Identifier[self]]
		160: IfStatement[
			160: IfShortcutClause[BinaryExpression[Identifier[pw] == Literal[null]]
				160: AssignmentStatement[Identifier[pw] = MemberExpression[Identifier[me].Identifier[defaultSecret]]]
			]
		]
		161: AssignmentStatement[Identifier[hash] = CallExpression[MemberExpression[Identifier[me].Identifier[getHash]](Identifier[pw])]]
		162: AssignmentStatement[Identifier[hashPointer] = Literal[0]]
		163: AssignmentStatement[Identifier[hashLength] = MemberExpression[Identifier[hash].Identifier[len]]]
		164: AssignmentStatement[Identifier[output] = ListConstructor[]]
		165: AssignmentStatement[Identifier[bitCounter] = Literal[0]]
		166: AssignmentStatement[Identifier[bitStorage] = Literal[0]]
		167: AssignmentStatement[Identifier[position] = Literal[0]]
		168: AssignmentStatement[Identifier[hashPointer] = Literal[0]]
		169: AssignmentStatement[Identifier[max] = MemberExpression[Identifier[str].Identifier[len]]]
		170: AssignmentStatement[Identifier[AND] = Function[Identifier[a], Identifier[b] =>
			171: ReturnStatement[CallExpression[Identifier[bitwise](Literal[&], Identifier[a], Identifier[b])]]
		]]
		173: AssignmentStatement[Identifier[RSHIFT] = Function[Identifier[a], Identifier[b] =>
			174: ReturnStatement[CallExpression[Identifier[bitwise](Literal[>>], Identifier[a], Identifier[b])]]
		]]
		176: WhileStatement[BinaryExpression[Identifier[position] < Identifier[max]]\\\\n	177: AssignmentStatement[Identifier[buffer] = CallExpression[MemberExpression[MemberExpression[Identifier[me].Identifier[table]].Identifier[indexOf]](IndexExpression[Identifier[str][Identifier[position]]])]]
			178: AssignmentStatement[Identifier[currentBit] = Identifier[bitCounter]]
			179: AssignmentStatement[Identifier[bitCounter] = BinaryExpression[Identifier[bitCounter] + Literal[1]]]
			180: IfStatement[
				180: IfClause[BinaryExpression[Identifier[currentBit] % Literal[4]]
					181: AssignmentStatement[Identifier[bitStorage] = BinaryExpression[BinaryExpression[Identifier[bitStorage] * Literal[64]] + Identifier[buffer]]]
				]
				182: ElseClause[
					183: AssignmentStatement[Identifier[bitStorage] = Identifier[buffer]]
				}]
			]
			185: IfStatement[
				185: IfClause[BinaryExpression[Identifier[currentBit] % Literal[4]]
					186: AssignmentStatement[Identifier[expectedHashIndex] = BinaryExpression[BinaryExpression[BinaryExpression[CallExpression[Identifier[floor](BinaryExpression[Identifier[hashPointer] / Literal[3]])] * Literal[3]] % Identifier[hashLength]] - Literal[1]]]
					187: IfStatement[
						187: IfShortcutClause[NegationExpression[not CallExpression[MemberExpression[Identifier[hash].Identifier[hasIndex]](Identifier[expectedHashIndex])]]
							187: BreakStatement[]
						]
					]
					188: AssignmentStatement[Identifier[m] = IndexExpression[Identifier[hash][Identifier[expectedHashIndex]]]]
					189: AssignmentStatement[Identifier[operation] = CallExpression[Identifier[AND](BinaryExpression[BinaryNegatedExpression[- Literal[2]] * Identifier[bitCounter]], Literal[6])]]
					190: AssignmentStatement[Identifier[operation] = CallExpression[Identifier[RSHIFT](Identifier[bitStorage], Identifier[operation])]]
					191: AssignmentStatement[Identifier[operation] = CallExpression[Identifier[AND](Literal[255], Identifier[operation])]]
					192: IfStatement[
						192: IfClause[BinaryExpression[Identifier[operation] != Literal[0]]
							193: AssignmentStatement[Identifier[charCode] = BinaryExpression[Identifier[operation] - Identifier[m]]]
							194: IfStatement[
								194: IfShortcutClause[BinaryExpression[Identifier[charCode] > MemberExpression[Identifier[me].Identifier[maxCharCode]]]
									194: BreakStatement[]
								]
							]
							195: CallStatment[CallExpression[MemberExpression[Identifier[output].Identifier[push]](CallExpression[Identifier[char](Identifier[charCode])])]]
						]
					]
					197: AssignmentStatement[Identifier[hashPointer] = BinaryExpression[Identifier[hashPointer] + Literal[1]]]
				]
			]
			199: AssignmentStatement[Identifier[position] = BinaryExpression[Identifier[position] + Literal[1]]]
		]
		201: ReturnStatement[CallExpression[MemberExpression[Identifier[output].Identifier[join]](Literal[])]]
	]]
	204: AssignmentStatement[Identifier[test] = CallExpression[MemberExpression[UnaryExpression[new Identifier[Crypto]].Identifier[constructor]](Literal[test])]]
	206: AssignmentStatement[Identifier[pwd] = Literal[abcde]]
	208: AssignmentStatement[Identifier[foo] = CallExpression[MemberExpression[Identifier[test].Identifier[encrypt]](Identifier[pwd])]]
	209: AssignmentStatement[Identifier[decrypted] = CallExpression[MemberExpression[Identifier[test].Identifier[decrypt]](Identifier[foo])]]
	211: CallStatment[CallExpression[Identifier[print](Identifier[foo])]]
	212: CallStatment[CallExpression[Identifier[print](Identifier[decrypted])]]
]"
`;

exports[`parse default scripts random.src 1`] = `
"Chunk[
	1: AssignmentStatement[Identifier[Random] = MapConstructor[]]
	3: AssignmentStatement[MemberExpression[Identifier[Random].Identifier[pool]] = MapConstructor[]]
	4: AssignmentStatement[MemberExpression[Identifier[Random].Identifier[defaultSeed]] = Literal[random]]
	6: AssignmentStatement[MemberExpression[Identifier[Random].Identifier[createPool]] = Function[Identifier[seed], Identifier[val] =>
		7: ReturnStatement[MapConstructor[
			7: MapKeyString[Literal[seed]: Identifier[seed]]
			7: MapKeyString[Literal[value]: Identifier[val]]
			7: MapKeyString[Literal[generation]: Literal[0]]
		]]
	]]
	10: AssignmentStatement[MemberExpression[Identifier[Random].Identifier[calcSeed]] = Function[Identifier[seed] =>
		11: AssignmentStatement[Identifier[seedVal] = Literal[0]]
		12: AssignmentStatement[Identifier[pos] = MemberExpression[Identifier[seed].Identifier[len]]]
		14: For[Identifier[char] in Identifier[seed]
			15: AssignmentStatement[Identifier[seedVal] = BinaryExpression[BinaryExpression[Identifier[seedVal] + MemberExpression[Identifier[char].Identifier[code]]] + Identifier[pos]]]
			16: AssignmentStatement[Identifier[pos] = BinaryExpression[Identifier[pos] - Literal[1]]]
		]
		19: ReturnStatement[Identifier[seedVal]]
	]]
	22: AssignmentStatement[MemberExpression[Identifier[Random].Identifier[gen]] = Function[Identifier[min], Identifier[max], Identifier[seed], Identifier[inc] =>
		23: AssignmentStatement[Identifier[me] = Identifier[self]]
		24: AssignmentStatement[Identifier[pool] = MemberExpression[Identifier[me].Identifier[pool]]]
		25: IfStatement[
			25: IfShortcutClause[BinaryExpression[Identifier[inc] == Literal[null]]
				25: AssignmentStatement[Identifier[inc] = Literal[true]]
			]
		]
		26: IfStatement[
			26: IfShortcutClause[BinaryExpression[Identifier[seed] == Literal[null]]
				26: AssignmentStatement[Identifier[seed] = MemberExpression[Identifier[me].Identifier[defaultSeed]]]
			]
		]
		27: IfStatement[
			27: IfClause[CallExpression[MemberExpression[Identifier[pool].Identifier[hasIndex]](Identifier[seed])]
				28: AssignmentStatement[Identifier[ps] = IndexExpression[Identifier[pool][Identifier[seed]]]]
				29: IfStatement[
					29: IfShortcutClause[NegationExpression[not Identifier[inc]]
						29: ReturnStatement[MemberExpression[Identifier[ps].Identifier[value]]]
					]
				]
				30: AssignmentStatement[MemberExpression[Identifier[ps].Identifier[generation]] = BinaryExpression[MemberExpression[Identifier[ps].Identifier[generation]] + Literal[1]]]
				31: AssignmentStatement[Identifier[val] = CallExpression[Identifier[floor](BinaryExpression[BinaryExpression[CallExpression[Identifier[rnd](BinaryExpression[MemberExpression[Identifier[ps].Identifier[value]] + MemberExpression[Identifier[ps].Identifier[generation]]])] * BinaryExpression[Identifier[max] - Identifier[min]]] + Identifier[min]])]]
				32: AssignmentStatement[MemberExpression[Identifier[ps].Identifier[value]] = Identifier[val]]
				33: ReturnStatement[Identifier[val]]
			]
		]
		36: AssignmentStatement[Identifier[seedVal] = CallExpression[MemberExpression[Identifier[me].Identifier[calcSeed]](Identifier[seed])]]
		38: AssignmentStatement[Identifier[val] = CallExpression[Identifier[floor](BinaryExpression[BinaryExpression[CallExpression[Identifier[rnd](Identifier[seedVal])] * BinaryExpression[Identifier[max] - Identifier[min]]] + Identifier[min]])]]
		39: AssignmentStatement[IndexExpression[Identifier[pool][Identifier[seed]]] = CallExpression[MemberExpression[Identifier[me].Identifier[createPool]](Identifier[seedVal], Identifier[val])]]
		41: ReturnStatement[Identifier[val]]
	]]
	44: AssignmentStatement[MemberExpression[Identifier[Random].Identifier[seq]] = Function[Identifier[min], Identifier[max], Identifier[seed], Identifier[amount], Identifier[keepPool] =>
		45: AssignmentStatement[Identifier[me] = Identifier[self]]
		46: AssignmentStatement[Identifier[index] = Literal[0]]
		47: AssignmentStatement[Identifier[result] = ListConstructor[]]
		48: WhileStatement[BinaryExpression[Identifier[index] < Identifier[amount]]\\\\n	49: AssignmentStatement[Identifier[temp] = CallExpression[MemberExpression[Identifier[me].Identifier[gen]](Identifier[min], Identifier[max], Identifier[seed])]]
			50: CallStatment[CallExpression[MemberExpression[Identifier[result].Identifier[push]](Identifier[temp])]]
			51: AssignmentStatement[Identifier[index] = BinaryExpression[Identifier[index] + Literal[1]]]
		]
		53: IfStatement[
			53: IfShortcutClause[BinaryExpression[Identifier[keepPool] != Literal[true]]
				53: CallStatment[CallExpression[MemberExpression[MemberExpression[Identifier[me].Identifier[pool]].Identifier[remove]](Identifier[seed])]]
			]
		]
		54: ReturnStatement[Identifier[result]]
	]]
	57: AssignmentStatement[MemberExpression[Identifier[Random].Identifier[get]] = Function[Identifier[min], Identifier[max] =>
		58: ReturnStatement[CallExpression[MemberExpression[Identifier[self].Identifier[gen]](Identifier[min], Identifier[max])]]
	]]
	61: CallStatment[CallExpression[Identifier[print](CallExpression[MemberExpression[Identifier[Random].Identifier[get]](Literal[100], Literal[500])])]]
	62: CallStatment[CallExpression[Identifier[print](CallExpression[MemberExpression[Identifier[Random].Identifier[seq]](Literal[100], Literal[500], Literal[test], Literal[10])])]]
]"
`;

exports[`parse default scripts random.src unsafe 1`] = `
"Chunk[
	1: AssignmentStatement[Identifier[Random] = MapConstructor[]]
	3: AssignmentStatement[MemberExpression[Identifier[Random].Identifier[pool]] = MapConstructor[]]
	4: AssignmentStatement[MemberExpression[Identifier[Random].Identifier[defaultSeed]] = Literal[random]]
	6: AssignmentStatement[MemberExpression[Identifier[Random].Identifier[createPool]] = Function[Identifier[seed], Identifier[val] =>
		7: ReturnStatement[MapConstructor[
			7: MapKeyString[Literal[seed]: Identifier[seed]]
			7: MapKeyString[Literal[value]: Identifier[val]]
			7: MapKeyString[Literal[generation]: Literal[0]]
		]]
	]]
	10: AssignmentStatement[MemberExpression[Identifier[Random].Identifier[calcSeed]] = Function[Identifier[seed] =>
		11: AssignmentStatement[Identifier[seedVal] = Literal[0]]
		12: AssignmentStatement[Identifier[pos] = MemberExpression[Identifier[seed].Identifier[len]]]
		14: For[Identifier[char] in Identifier[seed]
			15: AssignmentStatement[Identifier[seedVal] = BinaryExpression[BinaryExpression[Identifier[seedVal] + MemberExpression[Identifier[char].Identifier[code]]] + Identifier[pos]]]
			16: AssignmentStatement[Identifier[pos] = BinaryExpression[Identifier[pos] - Literal[1]]]
		]
		19: ReturnStatement[Identifier[seedVal]]
	]]
	22: AssignmentStatement[MemberExpression[Identifier[Random].Identifier[gen]] = Function[Identifier[min], Identifier[max], Identifier[seed], Identifier[inc] =>
		23: AssignmentStatement[Identifier[me] = Identifier[self]]
		24: AssignmentStatement[Identifier[pool] = MemberExpression[Identifier[me].Identifier[pool]]]
		25: IfStatement[
			25: IfShortcutClause[BinaryExpression[Identifier[inc] == Literal[null]]
				25: AssignmentStatement[Identifier[inc] = Literal[true]]
			]
		]
		26: IfStatement[
			26: IfShortcutClause[BinaryExpression[Identifier[seed] == Literal[null]]
				26: AssignmentStatement[Identifier[seed] = MemberExpression[Identifier[me].Identifier[defaultSeed]]]
			]
		]
		27: IfStatement[
			27: IfClause[CallExpression[MemberExpression[Identifier[pool].Identifier[hasIndex]](Identifier[seed])]
				28: AssignmentStatement[Identifier[ps] = IndexExpression[Identifier[pool][Identifier[seed]]]]
				29: IfStatement[
					29: IfShortcutClause[NegationExpression[not Identifier[inc]]
						29: ReturnStatement[MemberExpression[Identifier[ps].Identifier[value]]]
					]
				]
				30: AssignmentStatement[MemberExpression[Identifier[ps].Identifier[generation]] = BinaryExpression[MemberExpression[Identifier[ps].Identifier[generation]] + Literal[1]]]
				31: AssignmentStatement[Identifier[val] = CallExpression[Identifier[floor](BinaryExpression[BinaryExpression[CallExpression[Identifier[rnd](BinaryExpression[MemberExpression[Identifier[ps].Identifier[value]] + MemberExpression[Identifier[ps].Identifier[generation]]])] * BinaryExpression[Identifier[max] - Identifier[min]]] + Identifier[min]])]]
				32: AssignmentStatement[MemberExpression[Identifier[ps].Identifier[value]] = Identifier[val]]
				33: ReturnStatement[Identifier[val]]
			]
		]
		36: AssignmentStatement[Identifier[seedVal] = CallExpression[MemberExpression[Identifier[me].Identifier[calcSeed]](Identifier[seed])]]
		38: AssignmentStatement[Identifier[val] = CallExpression[Identifier[floor](BinaryExpression[BinaryExpression[CallExpression[Identifier[rnd](Identifier[seedVal])] * BinaryExpression[Identifier[max] - Identifier[min]]] + Identifier[min]])]]
		39: AssignmentStatement[IndexExpression[Identifier[pool][Identifier[seed]]] = CallExpression[MemberExpression[Identifier[me].Identifier[createPool]](Identifier[seedVal], Identifier[val])]]
		41: ReturnStatement[Identifier[val]]
	]]
	44: AssignmentStatement[MemberExpression[Identifier[Random].Identifier[seq]] = Function[Identifier[min], Identifier[max], Identifier[seed], Identifier[amount], Identifier[keepPool] =>
		45: AssignmentStatement[Identifier[me] = Identifier[self]]
		46: AssignmentStatement[Identifier[index] = Literal[0]]
		47: AssignmentStatement[Identifier[result] = ListConstructor[]]
		48: WhileStatement[BinaryExpression[Identifier[index] < Identifier[amount]]\\\\n	49: AssignmentStatement[Identifier[temp] = CallExpression[MemberExpression[Identifier[me].Identifier[gen]](Identifier[min], Identifier[max], Identifier[seed])]]
			50: CallStatment[CallExpression[MemberExpression[Identifier[result].Identifier[push]](Identifier[temp])]]
			51: AssignmentStatement[Identifier[index] = BinaryExpression[Identifier[index] + Literal[1]]]
		]
		53: IfStatement[
			53: IfShortcutClause[BinaryExpression[Identifier[keepPool] != Literal[true]]
				53: CallStatment[CallExpression[MemberExpression[MemberExpression[Identifier[me].Identifier[pool]].Identifier[remove]](Identifier[seed])]]
			]
		]
		54: ReturnStatement[Identifier[result]]
	]]
	57: AssignmentStatement[MemberExpression[Identifier[Random].Identifier[get]] = Function[Identifier[min], Identifier[max] =>
		58: ReturnStatement[CallExpression[MemberExpression[Identifier[self].Identifier[gen]](Identifier[min], Identifier[max])]]
	]]
	61: CallStatment[CallExpression[Identifier[print](CallExpression[MemberExpression[Identifier[Random].Identifier[get]](Literal[100], Literal[500])])]]
	62: CallStatment[CallExpression[Identifier[print](CallExpression[MemberExpression[Identifier[Random].Identifier[seq]](Literal[100], Literal[500], Literal[test], Literal[10])])]]
]"
`;

exports[`parse default scripts scuffed-if-clauses.src 1`] = `
"Chunk[
	1: IfStatement[
		1: IfShortcutClause[Literal[true]
			1: CallStatment[CallExpression[Identifier[print](Literal[true - 1])]]
		]
	]
	5: IfStatement[
		5: IfShortcutClause[Literal[true]
			5: CallStatment[CallExpression[Identifier[print](Literal[true - 2])]]
		]
		6: ElseifShortcutClause[Literal[true]
			6: CallStatment[CallExpression[Identifier[print](Literal[true - 2])]]
		]
	]
	9: IfStatement[
		9: IfShortcutClause[Literal[true]
			9: CallStatment[CallExpression[Identifier[print](Literal[true - 3])]]
		]
		10: ElseifShortcutClause[Literal[true]
			10: CallStatment[CallExpression[Identifier[print](Literal[true - 3])]]
		]
		11: ElseifShortcutClause[Literal[true]
			11: CallStatment[CallExpression[Identifier[print](Literal[true - 3])]]
		]
	]
	15: IfStatement[
		15: IfShortcutClause[Literal[true]
			15: CallStatment[CallExpression[Identifier[print](Literal[true - 4])]]
		]
		16: ElseifShortcutClause[Literal[true]
			16: CallStatment[CallExpression[Identifier[print](Literal[true - 4])]]
		]
		17: ElseifShortcutClause[Literal[true]
			17: CallStatment[CallExpression[Identifier[print](Literal[true - 4])]]
		]
		18: ElseShortcutClause[
			18: CallStatment[CallExpression[Identifier[print](Literal[true - 4])]]
		}]
	]
	21: IfStatement[
		21: IfShortcutClause[Literal[true]
			21: CallStatment[CallExpression[Identifier[print](Literal[true - 5])]]
		]
		22: ElseifShortcutClause[Literal[true]
			22: CallStatment[CallExpression[Identifier[print](Literal[true - 5])]]
		]
		23: ElseShortcutClause[
			23: CallStatment[CallExpression[Identifier[print](Literal[true - 5])]]
		}]
	]
	26: IfStatement[
		26: IfShortcutClause[Literal[true]
			26: CallStatment[CallExpression[Identifier[print](Literal[true - 6])]]
		]
		27: ElseShortcutClause[
			27: CallStatment[CallExpression[Identifier[print](Literal[true - 6])]]
		}]
	]
]"
`;

exports[`parse default scripts scuffed-if-clauses.src unsafe 1`] = `
"Chunk[
	1: IfStatement[
		1: IfShortcutClause[Literal[true]
			1: CallStatment[CallExpression[Identifier[print](Literal[true - 1])]]
		]
	]
	5: IfStatement[
		5: IfShortcutClause[Literal[true]
			5: CallStatment[CallExpression[Identifier[print](Literal[true - 2])]]
		]
		6: ElseifShortcutClause[Literal[true]
			6: CallStatment[CallExpression[Identifier[print](Literal[true - 2])]]
		]
	]
	9: IfStatement[
		9: IfShortcutClause[Literal[true]
			9: CallStatment[CallExpression[Identifier[print](Literal[true - 3])]]
		]
		10: ElseifShortcutClause[Literal[true]
			10: CallStatment[CallExpression[Identifier[print](Literal[true - 3])]]
		]
		11: ElseifShortcutClause[Literal[true]
			11: CallStatment[CallExpression[Identifier[print](Literal[true - 3])]]
		]
	]
	15: IfStatement[
		15: IfShortcutClause[Literal[true]
			15: CallStatment[CallExpression[Identifier[print](Literal[true - 4])]]
		]
		16: ElseifShortcutClause[Literal[true]
			16: CallStatment[CallExpression[Identifier[print](Literal[true - 4])]]
		]
		17: ElseifShortcutClause[Literal[true]
			17: CallStatment[CallExpression[Identifier[print](Literal[true - 4])]]
		]
		18: ElseShortcutClause[
			18: CallStatment[CallExpression[Identifier[print](Literal[true - 4])]]
		}]
	]
	21: IfStatement[
		21: IfShortcutClause[Literal[true]
			21: CallStatment[CallExpression[Identifier[print](Literal[true - 5])]]
		]
		22: ElseifShortcutClause[Literal[true]
			22: CallStatment[CallExpression[Identifier[print](Literal[true - 5])]]
		]
		23: ElseShortcutClause[
			23: CallStatment[CallExpression[Identifier[print](Literal[true - 5])]]
		}]
	]
	26: IfStatement[
		26: IfShortcutClause[Literal[true]
			26: CallStatment[CallExpression[Identifier[print](Literal[true - 6])]]
		]
		27: ElseShortcutClause[
			27: CallStatment[CallExpression[Identifier[print](Literal[true - 6])]]
		}]
	]
]"
`;

exports[`parse default scripts simple-object.src 1`] = `
"Chunk[
	1: AssignmentStatement[Identifier[test] = MapConstructor[]]
	3: AssignmentStatement[MemberExpression[Identifier[test].Identifier[here]] = Literal[was]]
	5: AssignmentStatement[MemberExpression[Identifier[test].Identifier[was]] = Function[ =>
		6: CallStatment[CallExpression[Identifier[print](MemberExpression[Identifier[self].Identifier[here]])]]
	]]
	9: CallStatment[CallExpression[Identifier[print](CallExpression[MemberExpression[Identifier[test].Identifier[was]]()])]]
]"
`;

exports[`parse default scripts simple-object.src unsafe 1`] = `
"Chunk[
	1: AssignmentStatement[Identifier[test] = MapConstructor[]]
	3: AssignmentStatement[MemberExpression[Identifier[test].Identifier[here]] = Literal[was]]
	5: AssignmentStatement[MemberExpression[Identifier[test].Identifier[was]] = Function[ =>
		6: CallStatment[CallExpression[Identifier[print](MemberExpression[Identifier[self].Identifier[here]])]]
	]]
	9: CallStatment[CallExpression[Identifier[print](CallExpression[MemberExpression[Identifier[test].Identifier[was]]()])]]
]"
`;

exports[`parse default scripts slice.src 1`] = `
"Chunk[
	1: AssignmentStatement[Identifier[divideString] = Function[Identifier[str], Identifier[limit] =>
		2: AssignmentStatement[Identifier[offset] = Literal[0]]
		3: AssignmentStatement[Identifier[maxLen] = MemberExpression[Identifier[str].Identifier[len]]]
		4: AssignmentStatement[Identifier[frags] = ListConstructor[]]
		6: WhileStatement[BinaryExpression[Identifier[offset] < Identifier[maxLen]]\\\\n	7: AssignmentStatement[Identifier[next] = BinaryExpression[Identifier[offset] + Identifier[limit]]]
			8: CallStatment[CallExpression[MemberExpression[Identifier[frags].Identifier[push]](IndexExpression[Identifier[str][SliceExpression[Identifier[offset]:Identifier[next]]]])]]
			9: AssignmentStatement[Identifier[offset] = Identifier[next]]
		]
		12: ReturnStatement[Identifier[frags]]
	]]
	15: CallStatment[CallExpression[Identifier[print](CallExpression[Identifier[divideString](Literal[blahhblahhblahhblahhblahhblahhgad], Literal[5])])]]
	17: AssignmentStatement[MemberExpression[Identifier[test].Identifier[current_path]] = BinaryExpression[Literal[/home/] + IndexExpression[MemberExpression[IndexExpression[MemberExpression[Identifier[test].Identifier[moo]][BinaryNegatedExpression[- Literal[1]]]].Identifier[user]][SliceExpression[BinaryExpression[CallExpression[MemberExpression[MemberExpression[IndexExpression[MemberExpression[Identifier[test].Identifier[bar]][BinaryNegatedExpression[- Literal[1]]]].Identifier[foo]].Identifier[indexOf]](Literal[@])] + Literal[1]]:EmptyExpression[]]]]]]
	19: For[Identifier[i] in CallExpression[Identifier[range](Literal[0], BinaryExpression[MemberExpression[Identifier[s].Identifier[len]] - Literal[4]])]
		20: IfStatement[
			20: IfShortcutClause[CallExpression[MemberExpression[Identifier[f].Identifier[hasIndex]](IndexExpression[Identifier[s][SliceExpression[Identifier[i]:BinaryExpression[Identifier[i] + Literal[3]]]]])]
				20: AssignmentStatement[IndexExpression[IndexExpression[Identifier[f][IndexExpression[Identifier[s][SliceExpression[Identifier[i]:BinaryExpression[Identifier[i] + Literal[3]]]]]]][MemberExpression[Identifier[s].Identifier[len]]]] = Literal[1]]
			]
			20: ElseShortcutClause[
				20: AssignmentStatement[IndexExpression[Identifier[f][IndexExpression[Identifier[s][SliceExpression[Identifier[i]:BinaryExpression[Identifier[i] + Literal[3]]]]]]] = MapConstructor[
					20: MapKeyString[MemberExpression[Identifier[s].Identifier[len]]: Literal[1]]
				]]
			}]
		]
	]
	23: CallStatment[IndexExpression[Identifier[foo][SliceExpression[Literal[1]:EmptyExpression[]]]]]
	24: CallStatment[IndexExpression[Identifier[foo][SliceExpression[EmptyExpression[]:Literal[1]]]]]
	25: CallStatment[IndexExpression[Identifier[foo][SliceExpression[IndexExpression[Identifier[foo][SliceExpression[Literal[1]:EmptyExpression[]]]]:EmptyExpression[]]]]]
	26: CallStatment[IndexExpression[Identifier[foo][SliceExpression[EmptyExpression[]:IndexExpression[Identifier[foo][SliceExpression[EmptyExpression[]:Literal[1]]]]]]]]
	27: CallStatment[IndexExpression[Identifier[foo][SliceExpression[IndexExpression[Identifier[foo][SliceExpression[Literal[1]:EmptyExpression[]]]]:IndexExpression[Identifier[foo][SliceExpression[EmptyExpression[]:Literal[1]]]]]]]]
]"
`;

exports[`parse default scripts slice.src unsafe 1`] = `
"Chunk[
	1: AssignmentStatement[Identifier[divideString] = Function[Identifier[str], Identifier[limit] =>
		2: AssignmentStatement[Identifier[offset] = Literal[0]]
		3: AssignmentStatement[Identifier[maxLen] = MemberExpression[Identifier[str].Identifier[len]]]
		4: AssignmentStatement[Identifier[frags] = ListConstructor[]]
		6: WhileStatement[BinaryExpression[Identifier[offset] < Identifier[maxLen]]\\\\n	7: AssignmentStatement[Identifier[next] = BinaryExpression[Identifier[offset] + Identifier[limit]]]
			8: CallStatment[CallExpression[MemberExpression[Identifier[frags].Identifier[push]](IndexExpression[Identifier[str][SliceExpression[Identifier[offset]:Identifier[next]]]])]]
			9: AssignmentStatement[Identifier[offset] = Identifier[next]]
		]
		12: ReturnStatement[Identifier[frags]]
	]]
	15: CallStatment[CallExpression[Identifier[print](CallExpression[Identifier[divideString](Literal[blahhblahhblahhblahhblahhblahhgad], Literal[5])])]]
	17: AssignmentStatement[MemberExpression[Identifier[test].Identifier[current_path]] = BinaryExpression[Literal[/home/] + IndexExpression[MemberExpression[IndexExpression[MemberExpression[Identifier[test].Identifier[moo]][BinaryNegatedExpression[- Literal[1]]]].Identifier[user]][SliceExpression[BinaryExpression[CallExpression[MemberExpression[MemberExpression[IndexExpression[MemberExpression[Identifier[test].Identifier[bar]][BinaryNegatedExpression[- Literal[1]]]].Identifier[foo]].Identifier[indexOf]](Literal[@])] + Literal[1]]:EmptyExpression[]]]]]]
	19: For[Identifier[i] in CallExpression[Identifier[range](Literal[0], BinaryExpression[MemberExpression[Identifier[s].Identifier[len]] - Literal[4]])]
		20: IfStatement[
			20: IfShortcutClause[CallExpression[MemberExpression[Identifier[f].Identifier[hasIndex]](IndexExpression[Identifier[s][SliceExpression[Identifier[i]:BinaryExpression[Identifier[i] + Literal[3]]]]])]
				20: AssignmentStatement[IndexExpression[IndexExpression[Identifier[f][IndexExpression[Identifier[s][SliceExpression[Identifier[i]:BinaryExpression[Identifier[i] + Literal[3]]]]]]][MemberExpression[Identifier[s].Identifier[len]]]] = Literal[1]]
			]
			20: ElseShortcutClause[
				20: AssignmentStatement[IndexExpression[Identifier[f][IndexExpression[Identifier[s][SliceExpression[Identifier[i]:BinaryExpression[Identifier[i] + Literal[3]]]]]]] = MapConstructor[
					20: MapKeyString[MemberExpression[Identifier[s].Identifier[len]]: Literal[1]]
				]]
			}]
		]
	]
	23: CallStatment[IndexExpression[Identifier[foo][SliceExpression[Literal[1]:EmptyExpression[]]]]]
	24: CallStatment[IndexExpression[Identifier[foo][SliceExpression[EmptyExpression[]:Literal[1]]]]]
	25: CallStatment[IndexExpression[Identifier[foo][SliceExpression[IndexExpression[Identifier[foo][SliceExpression[Literal[1]:EmptyExpression[]]]]:EmptyExpression[]]]]]
	26: CallStatment[IndexExpression[Identifier[foo][SliceExpression[EmptyExpression[]:IndexExpression[Identifier[foo][SliceExpression[EmptyExpression[]:Literal[1]]]]]]]]
	27: CallStatment[IndexExpression[Identifier[foo][SliceExpression[IndexExpression[Identifier[foo][SliceExpression[Literal[1]:EmptyExpression[]]]]:IndexExpression[Identifier[foo][SliceExpression[EmptyExpression[]:Literal[1]]]]]]]]
]"
`;

exports[`parse default scripts unary.src 1`] = `
"Chunk[
	1: AssignmentStatement[Identifier[test] = Function[ =>
		2: ReturnStatement[Literal[null]]
	]]
	5: CallStatment[CallExpression[Identifier[print](LogicalExpression[UnaryExpression[@ MemberExpression[Literal[was].Identifier[split]]] and LogicalExpression[Literal[false] or NegationExpression[not Literal[false]]]])]]
	6: CallStatment[CallExpression[Identifier[print](UnaryExpression[@ LogicalExpression[MemberExpression[Literal[was].Identifier[split]] and LogicalExpression[Literal[false] or NegationExpression[not Literal[false]]]]])]]
	7: CallStatment[CallExpression[Identifier[print](LogicalExpression[NegationExpression[not MemberExpression[Literal[was].Identifier[split]]] and LogicalExpression[Literal[false] or NegationExpression[not Literal[false]]]])]]
	8: CallStatment[CallExpression[Identifier[print](NegationExpression[not LogicalExpression[MemberExpression[Literal[was].Identifier[split]] and LogicalExpression[Literal[false] or NegationExpression[not Literal[false]]]]])]]
	9: CallStatment[CallExpression[Identifier[print](BinaryExpression[BinaryNegatedExpression[- Literal[1]] + Literal[2]])]]
	10: CallStatment[CallExpression[Identifier[print](BinaryNegatedExpression[- BinaryExpression[Literal[1] + Literal[2]]])]]
]"
`;

exports[`parse default scripts unary.src unsafe 1`] = `
"Chunk[
	1: AssignmentStatement[Identifier[test] = Function[ =>
		2: ReturnStatement[Literal[null]]
	]]
	5: CallStatment[CallExpression[Identifier[print](LogicalExpression[UnaryExpression[@ MemberExpression[Literal[was].Identifier[split]]] and LogicalExpression[Literal[false] or NegationExpression[not Literal[false]]]])]]
	6: CallStatment[CallExpression[Identifier[print](UnaryExpression[@ LogicalExpression[MemberExpression[Literal[was].Identifier[split]] and LogicalExpression[Literal[false] or NegationExpression[not Literal[false]]]]])]]
	7: CallStatment[CallExpression[Identifier[print](LogicalExpression[NegationExpression[not MemberExpression[Literal[was].Identifier[split]]] and LogicalExpression[Literal[false] or NegationExpression[not Literal[false]]]])]]
	8: CallStatment[CallExpression[Identifier[print](NegationExpression[not LogicalExpression[MemberExpression[Literal[was].Identifier[split]] and LogicalExpression[Literal[false] or NegationExpression[not Literal[false]]]]])]]
	9: CallStatment[CallExpression[Identifier[print](BinaryExpression[BinaryNegatedExpression[- Literal[1]] + Literal[2]])]]
	10: CallStatment[CallExpression[Identifier[print](BinaryNegatedExpression[- BinaryExpression[Literal[1] + Literal[2]]])]]
]"
`;
