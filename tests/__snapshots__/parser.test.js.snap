// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`parse default scripts ascii.src 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 71, character: 29 },
  scope: null,
  body: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 14 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 9 },
        scope: [Circular *1],
        name: 'AsciiGen'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 12 },
        end: Position { line: 1, character: 14 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 9 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 3, character: 1 },
        end: Position { line: 3, character: 4 },
        scope: [Circular *1],
        name: 'map'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 3, character: 7 },
        end: Position { line: 3, character: 9 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 5, character: 1 },
      end: Position { line: 5, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 5, character: 4 },
        end: Position { line: 5, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 5, character: 9 },
        end: Position { line: 5, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 6, character: 1 },
      end: Position { line: 6, character: 36 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 6, character: 4 },
        end: Position { line: 6, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'b'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 6, character: 9 },
        end: Position { line: 6, character: 36 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 7, character: 1 },
      end: Position { line: 7, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 7, character: 4 },
        end: Position { line: 7, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'c'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 7, character: 9 },
        end: Position { line: 7, character: 33 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 8, character: 1 },
      end: Position { line: 8, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 8, character: 4 },
        end: Position { line: 8, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'd'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 8, character: 9 },
        end: Position { line: 8, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 9, character: 1 },
      end: Position { line: 9, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 9, character: 4 },
        end: Position { line: 9, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'e'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 9, character: 9 },
        end: Position { line: 9, character: 33 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 10, character: 1 },
      end: Position { line: 10, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 10, character: 4 },
        end: Position { line: 10, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'f'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 10, character: 9 },
        end: Position { line: 10, character: 33 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 11, character: 1 },
      end: Position { line: 11, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 11, character: 4 },
        end: Position { line: 11, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'g'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 11, character: 9 },
        end: Position { line: 11, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 12, character: 1 },
      end: Position { line: 12, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 12, character: 4 },
        end: Position { line: 12, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'h'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 12, character: 9 },
        end: Position { line: 12, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 13, character: 1 },
      end: Position { line: 13, character: 30 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 13, character: 4 },
        end: Position { line: 13, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'i'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 13, character: 9 },
        end: Position { line: 13, character: 30 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 14, character: 1 },
      end: Position { line: 14, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 14, character: 4 },
        end: Position { line: 14, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'j'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 14, character: 9 },
        end: Position { line: 14, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 15, character: 1 },
      end: Position { line: 15, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 15, character: 4 },
        end: Position { line: 15, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'k'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 15, character: 9 },
        end: Position { line: 15, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 16, character: 1 },
      end: Position { line: 16, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 16, character: 4 },
        end: Position { line: 16, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'l'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 16, character: 9 },
        end: Position { line: 16, character: 33 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 17, character: 1 },
      end: Position { line: 17, character: 45 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 17, character: 4 },
        end: Position { line: 17, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'm'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 17, character: 9 },
        end: Position { line: 17, character: 45 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 18, character: 1 },
      end: Position { line: 18, character: 45 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 18, character: 4 },
        end: Position { line: 18, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'n'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 18, character: 9 },
        end: Position { line: 18, character: 45 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 19, character: 1 },
      end: Position { line: 19, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 19, character: 4 },
        end: Position { line: 19, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'o'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 19, character: 9 },
        end: Position { line: 19, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 20, character: 1 },
      end: Position { line: 20, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 20, character: 4 },
        end: Position { line: 20, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'p'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 20, character: 9 },
        end: Position { line: 20, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 21, character: 1 },
      end: Position { line: 21, character: 42 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 21, character: 4 },
        end: Position { line: 21, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'q'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 21, character: 9 },
        end: Position { line: 21, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 22, character: 1 },
      end: Position { line: 22, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 22, character: 4 },
        end: Position { line: 22, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'r'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 22, character: 9 },
        end: Position { line: 22, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 23, character: 1 },
      end: Position { line: 23, character: 36 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 23, character: 4 },
        end: Position { line: 23, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 's'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 23, character: 9 },
        end: Position { line: 23, character: 36 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 24, character: 1 },
      end: Position { line: 24, character: 36 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 24, character: 4 },
        end: Position { line: 24, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 't'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 24, character: 9 },
        end: Position { line: 24, character: 36 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 25, character: 1 },
      end: Position { line: 25, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 25, character: 4 },
        end: Position { line: 25, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'u'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 25, character: 9 },
        end: Position { line: 25, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 26, character: 1 },
      end: Position { line: 26, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 26, character: 4 },
        end: Position { line: 26, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'v'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 26, character: 9 },
        end: Position { line: 26, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 27, character: 1 },
      end: Position { line: 27, character: 48 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 27, character: 4 },
        end: Position { line: 27, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'w'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 27, character: 9 },
        end: Position { line: 27, character: 48 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 28, character: 1 },
      end: Position { line: 28, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 28, character: 4 },
        end: Position { line: 28, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'x'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 28, character: 9 },
        end: Position { line: 28, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 29, character: 1 },
      end: Position { line: 29, character: 42 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 29, character: 4 },
        end: Position { line: 29, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'y'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 29, character: 9 },
        end: Position { line: 29, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 30, character: 1 },
      end: Position { line: 30, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 30, character: 4 },
        end: Position { line: 30, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'z'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 30, character: 9 },
        end: Position { line: 30, character: 33 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 31, character: 1 },
      end: Position { line: 31, character: 42 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 31, character: 5 },
        end: Position { line: 31, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '0',
          raw: '\\"0\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 31, character: 12 },
        end: Position { line: 31, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 32, character: 1 },
      end: Position { line: 32, character: 36 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 32, character: 5 },
        end: Position { line: 32, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '1',
          raw: '\\"1\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 32, character: 12 },
        end: Position { line: 32, character: 36 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 33, character: 1 },
      end: Position { line: 33, character: 39 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 33, character: 5 },
        end: Position { line: 33, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '2',
          raw: '\\"2\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 33, character: 12 },
        end: Position { line: 33, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 34, character: 1 },
      end: Position { line: 34, character: 36 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 34, character: 5 },
        end: Position { line: 34, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '3',
          raw: '\\"3\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 34, character: 12 },
        end: Position { line: 34, character: 36 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 35, character: 1 },
      end: Position { line: 35, character: 39 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 35, character: 5 },
        end: Position { line: 35, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '4',
          raw: '\\"4\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 35, character: 12 },
        end: Position { line: 35, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 36, character: 1 },
      end: Position { line: 36, character: 39 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 36, character: 5 },
        end: Position { line: 36, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '5',
          raw: '\\"5\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 36, character: 12 },
        end: Position { line: 36, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 37, character: 1 },
      end: Position { line: 37, character: 42 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 37, character: 5 },
        end: Position { line: 37, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '6',
          raw: '\\"6\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 37, character: 12 },
        end: Position { line: 37, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 38, character: 1 },
      end: Position { line: 38, character: 39 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 38, character: 5 },
        end: Position { line: 38, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '7',
          raw: '\\"7\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 38, character: 12 },
        end: Position { line: 38, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 39, character: 1 },
      end: Position { line: 39, character: 42 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 39, character: 5 },
        end: Position { line: 39, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '8',
          raw: '\\"8\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 39, character: 12 },
        end: Position { line: 39, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 40, character: 1 },
      end: Position { line: 40, character: 42 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 40, character: 5 },
        end: Position { line: 40, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '9',
          raw: '\\"9\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 40, character: 12 },
        end: Position { line: 40, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 41, character: 1 },
      end: Position { line: 41, character: 30 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 41, character: 5 },
        end: Position { line: 41, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: ' ',
          raw: '\\" \\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 41, character: 12 },
        end: Position { line: 41, character: 30 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 43, character: 1 },
      end: Position { line: 43, character: 19 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 43, character: 9 },
        end: Position { line: 43, character: 15 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'MAP'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'AsciiGen'
        }
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 43, character: 16 },
        end: Position { line: 43, character: 19 },
        scope: [Circular *1],
        name: 'map'
      }
    },
    <ref *2> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 45, character: 1 },
      end: Position { line: 69, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 16 },
        end: Position { line: 69, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'colors',
          'r',
          'signs',
          'MAP',
          'lower',
          'push',
          'join',
          'AsciiGen',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *2]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 45, character: 9 },
        end: Position { line: 45, character: 15 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'gen'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'AsciiGen'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 16 },
        end: Position { line: 69, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'colors',
          'r',
          'signs',
          'MAP',
          'lower',
          'push',
          'join',
          'AsciiGen',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *2]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 71, character: 1 },
      end: Position { line: 71, character: 29 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 16 },
        end: Position { line: 69, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'colors',
          'r',
          'signs',
          'MAP',
          'lower',
          'push',
          'join',
          'AsciiGen',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 71, character: 6 },
        end: Position { line: 71, character: 29 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'print'
        },
        arguments: [ [ASTCallExpression] ]
      }
    }
  ],
  namespaces: Set(30) {
    'AsciiGen',
    'map',
    'a',
    'b',
    'c',
    'd',
    'e',
    'f',
    'g',
    'h',
    'i',
    'j',
    'k',
    'l',
    'm',
    'n',
    'o',
    'p',
    'q',
    'r',
    's',
    't',
    'u',
    'v',
    'w',
    'x',
    'y',
    'z',
    'MAP',
    'gen'
  },
  assignments: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 14 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 9 },
        scope: [Circular *1],
        name: 'AsciiGen'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 12 },
        end: Position { line: 1, character: 14 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 9 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 3, character: 1 },
        end: Position { line: 3, character: 4 },
        scope: [Circular *1],
        name: 'map'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 3, character: 7 },
        end: Position { line: 3, character: 9 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 5, character: 1 },
      end: Position { line: 5, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 5, character: 4 },
        end: Position { line: 5, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 5, character: 9 },
        end: Position { line: 5, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 6, character: 1 },
      end: Position { line: 6, character: 36 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 6, character: 4 },
        end: Position { line: 6, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'b'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 6, character: 9 },
        end: Position { line: 6, character: 36 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 7, character: 1 },
      end: Position { line: 7, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 7, character: 4 },
        end: Position { line: 7, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'c'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 7, character: 9 },
        end: Position { line: 7, character: 33 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 8, character: 1 },
      end: Position { line: 8, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 8, character: 4 },
        end: Position { line: 8, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'd'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 8, character: 9 },
        end: Position { line: 8, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 9, character: 1 },
      end: Position { line: 9, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 9, character: 4 },
        end: Position { line: 9, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'e'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 9, character: 9 },
        end: Position { line: 9, character: 33 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 10, character: 1 },
      end: Position { line: 10, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 10, character: 4 },
        end: Position { line: 10, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'f'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 10, character: 9 },
        end: Position { line: 10, character: 33 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 11, character: 1 },
      end: Position { line: 11, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 11, character: 4 },
        end: Position { line: 11, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'g'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 11, character: 9 },
        end: Position { line: 11, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 12, character: 1 },
      end: Position { line: 12, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 12, character: 4 },
        end: Position { line: 12, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'h'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 12, character: 9 },
        end: Position { line: 12, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 13, character: 1 },
      end: Position { line: 13, character: 30 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 13, character: 4 },
        end: Position { line: 13, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'i'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 13, character: 9 },
        end: Position { line: 13, character: 30 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 14, character: 1 },
      end: Position { line: 14, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 14, character: 4 },
        end: Position { line: 14, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'j'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 14, character: 9 },
        end: Position { line: 14, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 15, character: 1 },
      end: Position { line: 15, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 15, character: 4 },
        end: Position { line: 15, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'k'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 15, character: 9 },
        end: Position { line: 15, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 16, character: 1 },
      end: Position { line: 16, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 16, character: 4 },
        end: Position { line: 16, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'l'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 16, character: 9 },
        end: Position { line: 16, character: 33 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 17, character: 1 },
      end: Position { line: 17, character: 45 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 17, character: 4 },
        end: Position { line: 17, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'm'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 17, character: 9 },
        end: Position { line: 17, character: 45 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 18, character: 1 },
      end: Position { line: 18, character: 45 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 18, character: 4 },
        end: Position { line: 18, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'n'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 18, character: 9 },
        end: Position { line: 18, character: 45 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 19, character: 1 },
      end: Position { line: 19, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 19, character: 4 },
        end: Position { line: 19, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'o'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 19, character: 9 },
        end: Position { line: 19, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 20, character: 1 },
      end: Position { line: 20, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 20, character: 4 },
        end: Position { line: 20, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'p'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 20, character: 9 },
        end: Position { line: 20, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 21, character: 1 },
      end: Position { line: 21, character: 42 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 21, character: 4 },
        end: Position { line: 21, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'q'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 21, character: 9 },
        end: Position { line: 21, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 22, character: 1 },
      end: Position { line: 22, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 22, character: 4 },
        end: Position { line: 22, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'r'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 22, character: 9 },
        end: Position { line: 22, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 23, character: 1 },
      end: Position { line: 23, character: 36 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 23, character: 4 },
        end: Position { line: 23, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 's'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 23, character: 9 },
        end: Position { line: 23, character: 36 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 24, character: 1 },
      end: Position { line: 24, character: 36 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 24, character: 4 },
        end: Position { line: 24, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 't'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 24, character: 9 },
        end: Position { line: 24, character: 36 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 25, character: 1 },
      end: Position { line: 25, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 25, character: 4 },
        end: Position { line: 25, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'u'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 25, character: 9 },
        end: Position { line: 25, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 26, character: 1 },
      end: Position { line: 26, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 26, character: 4 },
        end: Position { line: 26, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'v'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 26, character: 9 },
        end: Position { line: 26, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 27, character: 1 },
      end: Position { line: 27, character: 48 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 27, character: 4 },
        end: Position { line: 27, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'w'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 27, character: 9 },
        end: Position { line: 27, character: 48 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 28, character: 1 },
      end: Position { line: 28, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 28, character: 4 },
        end: Position { line: 28, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'x'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 28, character: 9 },
        end: Position { line: 28, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 29, character: 1 },
      end: Position { line: 29, character: 42 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 29, character: 4 },
        end: Position { line: 29, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'y'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 29, character: 9 },
        end: Position { line: 29, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 30, character: 1 },
      end: Position { line: 30, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 30, character: 4 },
        end: Position { line: 30, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'z'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 30, character: 9 },
        end: Position { line: 30, character: 33 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 31, character: 1 },
      end: Position { line: 31, character: 42 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 31, character: 5 },
        end: Position { line: 31, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '0',
          raw: '\\"0\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 31, character: 12 },
        end: Position { line: 31, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 32, character: 1 },
      end: Position { line: 32, character: 36 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 32, character: 5 },
        end: Position { line: 32, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '1',
          raw: '\\"1\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 32, character: 12 },
        end: Position { line: 32, character: 36 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 33, character: 1 },
      end: Position { line: 33, character: 39 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 33, character: 5 },
        end: Position { line: 33, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '2',
          raw: '\\"2\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 33, character: 12 },
        end: Position { line: 33, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 34, character: 1 },
      end: Position { line: 34, character: 36 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 34, character: 5 },
        end: Position { line: 34, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '3',
          raw: '\\"3\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 34, character: 12 },
        end: Position { line: 34, character: 36 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 35, character: 1 },
      end: Position { line: 35, character: 39 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 35, character: 5 },
        end: Position { line: 35, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '4',
          raw: '\\"4\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 35, character: 12 },
        end: Position { line: 35, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 36, character: 1 },
      end: Position { line: 36, character: 39 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 36, character: 5 },
        end: Position { line: 36, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '5',
          raw: '\\"5\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 36, character: 12 },
        end: Position { line: 36, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 37, character: 1 },
      end: Position { line: 37, character: 42 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 37, character: 5 },
        end: Position { line: 37, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '6',
          raw: '\\"6\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 37, character: 12 },
        end: Position { line: 37, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 38, character: 1 },
      end: Position { line: 38, character: 39 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 38, character: 5 },
        end: Position { line: 38, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '7',
          raw: '\\"7\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 38, character: 12 },
        end: Position { line: 38, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 39, character: 1 },
      end: Position { line: 39, character: 42 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 39, character: 5 },
        end: Position { line: 39, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '8',
          raw: '\\"8\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 39, character: 12 },
        end: Position { line: 39, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 40, character: 1 },
      end: Position { line: 40, character: 42 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 40, character: 5 },
        end: Position { line: 40, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '9',
          raw: '\\"9\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 40, character: 12 },
        end: Position { line: 40, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 41, character: 1 },
      end: Position { line: 41, character: 30 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 41, character: 5 },
        end: Position { line: 41, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: ' ',
          raw: '\\" \\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 41, character: 12 },
        end: Position { line: 41, character: 30 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 43, character: 1 },
      end: Position { line: 43, character: 19 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 43, character: 9 },
        end: Position { line: 43, character: 15 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'MAP'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'AsciiGen'
        }
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 43, character: 16 },
        end: Position { line: 43, character: 19 },
        scope: [Circular *1],
        name: 'map'
      }
    }
  ],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 5, character: 10 },
      end: Position { line: 5, character: 18 },
      scope: [Circular *1],
      value: '||¯|| ',
      raw: '\\"||¯|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 5, character: 20 },
      end: Position { line: 5, character: 28 },
      scope: [Circular *1],
      value: '||_|| ',
      raw: '\\"||_|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 5, character: 30 },
      end: Position { line: 5, character: 38 },
      scope: [Circular *1],
      value: '|| || ',
      raw: '\\"|| || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 6, character: 10 },
      end: Position { line: 6, character: 17 },
      scope: [Circular *1],
      value: '||¯/ ',
      raw: '\\"||¯/ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 6, character: 19 },
      end: Position { line: 6, character: 26 },
      scope: [Circular *1],
      value: '|| \\\\\\\\ ',
      raw: '\\"|| \\\\\\\\ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 6, character: 28 },
      end: Position { line: 6, character: 35 },
      scope: [Circular *1],
      value: '||_/ ',
      raw: '\\"||_/ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 7, character: 10 },
      end: Position { line: 7, character: 16 },
      scope: [Circular *1],
      value: '||¯ ',
      raw: '\\"||¯ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 7, character: 18 },
      end: Position { line: 7, character: 24 },
      scope: [Circular *1],
      value: '||  ',
      raw: '\\"||  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 7, character: 26 },
      end: Position { line: 7, character: 32 },
      scope: [Circular *1],
      value: '||_ ',
      raw: '\\"||_ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 8, character: 10 },
      end: Position { line: 8, character: 18 },
      scope: [Circular *1],
      value: '||¯\\\\\\\\\\\\\\\\ ',
      raw: '\\"||¯\\\\\\\\\\\\\\\\ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 8, character: 20 },
      end: Position { line: 8, character: 28 },
      scope: [Circular *1],
      value: '|| // ',
      raw: '\\"|| // \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 8, character: 30 },
      end: Position { line: 8, character: 38 },
      scope: [Circular *1],
      value: '||//  ',
      raw: '\\"||//  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 9, character: 10 },
      end: Position { line: 9, character: 16 },
      scope: [Circular *1],
      value: '||¯ ',
      raw: '\\"||¯ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 9, character: 18 },
      end: Position { line: 9, character: 24 },
      scope: [Circular *1],
      value: '||- ',
      raw: '\\"||- \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 9, character: 26 },
      end: Position { line: 9, character: 32 },
      scope: [Circular *1],
      value: '||_ ',
      raw: '\\"||_ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 10, character: 10 },
      end: Position { line: 10, character: 16 },
      scope: [Circular *1],
      value: '||¯ ',
      raw: '\\"||¯ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 10, character: 18 },
      end: Position { line: 10, character: 24 },
      scope: [Circular *1],
      value: '||_ ',
      raw: '\\"||_ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 10, character: 26 },
      end: Position { line: 10, character: 32 },
      scope: [Circular *1],
      value: '||  ',
      raw: '\\"||  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 11, character: 10 },
      end: Position { line: 11, character: 18 },
      scope: [Circular *1],
      value: '||¯¯  ',
      raw: '\\"||¯¯  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 11, character: 20 },
      end: Position { line: 11, character: 28 },
      scope: [Circular *1],
      value: '|| \\\\\\\\\\\\\\\\ ',
      raw: '\\"|| \\\\\\\\\\\\\\\\ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 11, character: 30 },
      end: Position { line: 11, character: 38 },
      scope: [Circular *1],
      value: '||_|| ',
      raw: '\\"||_|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 12, character: 10 },
      end: Position { line: 12, character: 18 },
      scope: [Circular *1],
      value: '|| || ',
      raw: '\\"|| || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 12, character: 20 },
      end: Position { line: 12, character: 28 },
      scope: [Circular *1],
      value: '||-|| ',
      raw: '\\"||-|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 12, character: 30 },
      end: Position { line: 12, character: 38 },
      scope: [Circular *1],
      value: '|| || ',
      raw: '\\"|| || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 13, character: 10 },
      end: Position { line: 13, character: 15 },
      scope: [Circular *1],
      value: '|| ',
      raw: '\\"|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 13, character: 17 },
      end: Position { line: 13, character: 22 },
      scope: [Circular *1],
      value: '|| ',
      raw: '\\"|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 13, character: 24 },
      end: Position { line: 13, character: 29 },
      scope: [Circular *1],
      value: '|| ',
      raw: '\\"|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 14, character: 10 },
      end: Position { line: 14, character: 18 },
      scope: [Circular *1],
      value: ' ¯||¯ ',
      raw: '\\" ¯||¯ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 14, character: 20 },
      end: Position { line: 14, character: 28 },
      scope: [Circular *1],
      value: '  ||  ',
      raw: '\\"  ||  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 14, character: 30 },
      end: Position { line: 14, character: 38 },
      scope: [Circular *1],
      value: '|_||  ',
      raw: '\\"|_||  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 15, character: 10 },
      end: Position { line: 15, character: 18 },
      scope: [Circular *1],
      value: '||  / ',
      raw: '\\"||  / \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 15, character: 20 },
      end: Position { line: 15, character: 28 },
      scope: [Circular *1],
      value: '|| /  ',
      raw: '\\"|| /  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 15, character: 30 },
      end: Position { line: 15, character: 38 },
      scope: [Circular *1],
      value: '||¯\\\\\\\\\\\\\\\\ ',
      raw: '\\"||¯\\\\\\\\\\\\\\\\ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 16, character: 10 },
      end: Position { line: 16, character: 16 },
      scope: [Circular *1],
      value: '||  ',
      raw: '\\"||  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 16, character: 18 },
      end: Position { line: 16, character: 24 },
      scope: [Circular *1],
      value: '||  ',
      raw: '\\"||  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 16, character: 26 },
      end: Position { line: 16, character: 32 },
      scope: [Circular *1],
      value: '||_ ',
      raw: '\\"||_ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 17, character: 10 },
      end: Position { line: 17, character: 20 },
      scope: [Circular *1],
      value: '||\\\\\\\\\\\\\\\\/|| ',
      raw: '\\"||\\\\\\\\\\\\\\\\/|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 17, character: 22 },
      end: Position { line: 17, character: 32 },
      scope: [Circular *1],
      value: '||   || ',
      raw: '\\"||   || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 17, character: 34 },
      end: Position { line: 17, character: 44 },
      scope: [Circular *1],
      value: '||   || ',
      raw: '\\"||   || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 18, character: 10 },
      end: Position { line: 18, character: 20 },
      scope: [Circular *1],
      value: '||\\\\\\\\\\\\\\\\ || ',
      raw: '\\"||\\\\\\\\\\\\\\\\ || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 18, character: 22 },
      end: Position { line: 18, character: 32 },
      scope: [Circular *1],
      value: '|| \\\\\\\\\\\\\\\\|| ',
      raw: '\\"|| \\\\\\\\\\\\\\\\|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 18, character: 34 },
      end: Position { line: 18, character: 44 },
      scope: [Circular *1],
      value: '||  \\\\\\\\|| ',
      raw: '\\"||  \\\\\\\\|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 19, character: 10 },
      end: Position { line: 19, character: 18 },
      scope: [Circular *1],
      value: '||¯|| ',
      raw: '\\"||¯|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 19, character: 20 },
      end: Position { line: 19, character: 28 },
      scope: [Circular *1],
      value: '|| || ',
      raw: '\\"|| || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 19, character: 30 },
      end: Position { line: 19, character: 38 },
      scope: [Circular *1],
      value: '||_|| ',
      raw: '\\"||_|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 20, character: 10 },
      end: Position { line: 20, character: 18 },
      scope: [Circular *1],
      value: '||¯|| ',
      raw: '\\"||¯|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 20, character: 20 },
      end: Position { line: 20, character: 28 },
      scope: [Circular *1],
      value: '||_|| ',
      raw: '\\"||_|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 20, character: 30 },
      end: Position { line: 20, character: 38 },
      scope: [Circular *1],
      value: '||    ',
      raw: '\\"||    \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 21, character: 10 },
      end: Position { line: 21, character: 19 },
      scope: [Circular *1],
      value: '||¯||  ',
      raw: '\\"||¯||  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 21, character: 21 },
      end: Position { line: 21, character: 30 },
      scope: [Circular *1],
      value: '|| ||  ',
      raw: '\\"|| ||  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 21, character: 32 },
      end: Position { line: 21, character: 41 },
      scope: [Circular *1],
      value: '||_||¬ ',
      raw: '\\"||_||¬ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 22, character: 10 },
      end: Position { line: 22, character: 18 },
      scope: [Circular *1],
      value: '||¯|| ',
      raw: '\\"||¯|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 22, character: 20 },
      end: Position { line: 22, character: 28 },
      scope: [Circular *1],
      value: '||¯\\\\\\\\\\\\\\\\ ',
      raw: '\\"||¯\\\\\\\\\\\\\\\\ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 22, character: 30 },
      end: Position { line: 22, character: 38 },
      scope: [Circular *1],
      value: '|| || ',
      raw: '\\"|| || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 23, character: 10 },
      end: Position { line: 23, character: 17 },
      scope: [Circular *1],
      value: '||¯¯ ',
      raw: '\\"||¯¯ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 23, character: 19 },
      end: Position { line: 23, character: 26 },
      scope: [Circular *1],
      value: ' \\\\\\\\\\\\\\\\  ',
      raw: '\\" \\\\\\\\\\\\\\\\  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 23, character: 28 },
      end: Position { line: 23, character: 35 },
      scope: [Circular *1],
      value: '__|| ',
      raw: '\\"__|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 24, character: 10 },
      end: Position { line: 24, character: 17 },
      scope: [Circular *1],
      value: '¯||¯ ',
      raw: '\\"¯||¯ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 24, character: 19 },
      end: Position { line: 24, character: 26 },
      scope: [Circular *1],
      value: ' ||  ',
      raw: '\\" ||  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 24, character: 28 },
      end: Position { line: 24, character: 35 },
      scope: [Circular *1],
      value: ' ||  ',
      raw: '\\" ||  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 25, character: 10 },
      end: Position { line: 25, character: 18 },
      scope: [Circular *1],
      value: '|| || ',
      raw: '\\"|| || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 25, character: 20 },
      end: Position { line: 25, character: 28 },
      scope: [Circular *1],
      value: '|| || ',
      raw: '\\"|| || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 25, character: 30 },
      end: Position { line: 25, character: 38 },
      scope: [Circular *1],
      value: '||_|| ',
      raw: '\\"||_|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 26, character: 10 },
      end: Position { line: 26, character: 18 },
      scope: [Circular *1],
      value: '\\\\\\\\\\\\\\\\ || ',
      raw: '\\"\\\\\\\\\\\\\\\\ || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 26, character: 20 },
      end: Position { line: 26, character: 28 },
      scope: [Circular *1],
      value: ' \\\\\\\\\\\\\\\\|| ',
      raw: '\\" \\\\\\\\\\\\\\\\|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 26, character: 30 },
      end: Position { line: 26, character: 38 },
      scope: [Circular *1],
      value: '  \\\\\\\\\\\\\\\\| ',
      raw: '\\"  \\\\\\\\\\\\\\\\| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 27, character: 10 },
      end: Position { line: 27, character: 21 },
      scope: [Circular *1],
      value: '\\\\\\\\\\\\\\\\ |\\\\\\\\\\\\\\\\ | ',
      raw: '\\"\\\\\\\\\\\\\\\\ |\\\\\\\\\\\\\\\\ | \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 27, character: 23 },
      end: Position { line: 27, character: 34 },
      scope: [Circular *1],
      value: ' \\\\\\\\\\\\\\\\| \\\\\\\\\\\\\\\\| ',
      raw: '\\" \\\\\\\\\\\\\\\\| \\\\\\\\\\\\\\\\| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 27, character: 36 },
      end: Position { line: 27, character: 47 },
      scope: [Circular *1],
      value: '  \\\\\\\\\\\\\\\\  \\\\\\\\\\\\\\\\ ',
      raw: '\\"  \\\\\\\\\\\\\\\\  \\\\\\\\\\\\\\\\ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 28, character: 10 },
      end: Position { line: 28, character: 18 },
      scope: [Circular *1],
      value: '\\\\\\\\\\\\\\\\  / ',
      raw: '\\"\\\\\\\\\\\\\\\\  / \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 28, character: 20 },
      end: Position { line: 28, character: 28 },
      scope: [Circular *1],
      value: ' \\\\\\\\\\\\\\\\/  ',
      raw: '\\" \\\\\\\\\\\\\\\\/  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 28, character: 30 },
      end: Position { line: 28, character: 38 },
      scope: [Circular *1],
      value: ' //\\\\\\\\  ',
      raw: '\\" //\\\\\\\\  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 29, character: 10 },
      end: Position { line: 29, character: 19 },
      scope: [Circular *1],
      value: '\\\\\\\\\\\\\\\\  // ',
      raw: '\\"\\\\\\\\\\\\\\\\  // \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 29, character: 21 },
      end: Position { line: 29, character: 30 },
      scope: [Circular *1],
      value: ' \\\\\\\\\\\\\\\\//  ',
      raw: '\\" \\\\\\\\\\\\\\\\//  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 29, character: 32 },
      end: Position { line: 29, character: 41 },
      scope: [Circular *1],
      value: '  ||   ',
      raw: '\\"  ||   \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 30, character: 10 },
      end: Position { line: 30, character: 16 },
      scope: [Circular *1],
      value: '¯// ',
      raw: '\\"¯// \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 30, character: 18 },
      end: Position { line: 30, character: 24 },
      scope: [Circular *1],
      value: '//  ',
      raw: '\\"//  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 30, character: 26 },
      end: Position { line: 30, character: 32 },
      scope: [Circular *1],
      value: '||_ ',
      raw: '\\"||_ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 31, character: 5 },
      end: Position { line: 31, character: 8 },
      scope: [Circular *1],
      value: '0',
      raw: '\\"0\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 31, character: 13 },
      end: Position { line: 31, character: 21 },
      scope: [Circular *1],
      value: '||¯|| ',
      raw: '\\"||¯|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 31, character: 23 },
      end: Position { line: 31, character: 31 },
      scope: [Circular *1],
      value: '||x|| ',
      raw: '\\"||x|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 31, character: 33 },
      end: Position { line: 31, character: 41 },
      scope: [Circular *1],
      value: '||_|| ',
      raw: '\\"||_|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 32, character: 5 },
      end: Position { line: 32, character: 8 },
      scope: [Circular *1],
      value: '1',
      raw: '\\"1\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 32, character: 13 },
      end: Position { line: 32, character: 19 },
      scope: [Circular *1],
      value: \\"'|| \\",
      raw: \`\\"'|| \\"\`
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 32, character: 21 },
      end: Position { line: 32, character: 27 },
      scope: [Circular *1],
      value: ' || ',
      raw: '\\" || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 32, character: 29 },
      end: Position { line: 32, character: 35 },
      scope: [Circular *1],
      value: ' || ',
      raw: '\\" || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 33, character: 5 },
      end: Position { line: 33, character: 8 },
      scope: [Circular *1],
      value: '2',
      raw: '\\"2\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 33, character: 13 },
      end: Position { line: 33, character: 20 },
      scope: [Circular *1],
      value: '¯¯|| ',
      raw: '\\"¯¯|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 33, character: 22 },
      end: Position { line: 33, character: 29 },
      scope: [Circular *1],
      value: '||¯  ',
      raw: '\\"||¯  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 33, character: 31 },
      end: Position { line: 33, character: 38 },
      scope: [Circular *1],
      value: '||_  ',
      raw: '\\"||_  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 34, character: 5 },
      end: Position { line: 34, character: 8 },
      scope: [Circular *1],
      value: '3',
      raw: '\\"3\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 34, character: 13 },
      end: Position { line: 34, character: 19 },
      scope: [Circular *1],
      value: '¯|| ',
      raw: '\\"¯|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 34, character: 21 },
      end: Position { line: 34, character: 27 },
      scope: [Circular *1],
      value: '-|| ',
      raw: '\\"-|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 34, character: 29 },
      end: Position { line: 34, character: 35 },
      scope: [Circular *1],
      value: '_|| ',
      raw: '\\"_|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 35, character: 5 },
      end: Position { line: 35, character: 8 },
      scope: [Circular *1],
      value: '4',
      raw: '\\"4\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 35, character: 13 },
      end: Position { line: 35, character: 20 },
      scope: [Circular *1],
      value: ' /|| ',
      raw: '\\" /|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 35, character: 22 },
      end: Position { line: 35, character: 29 },
      scope: [Circular *1],
      value: '/_|| ',
      raw: '\\"/_|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 35, character: 31 },
      end: Position { line: 35, character: 38 },
      scope: [Circular *1],
      value: '  || ',
      raw: '\\"  || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 36, character: 5 },
      end: Position { line: 36, character: 8 },
      scope: [Circular *1],
      value: '5',
      raw: '\\"5\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 36, character: 13 },
      end: Position { line: 36, character: 20 },
      scope: [Circular *1],
      value: '||¯¯ ',
      raw: '\\"||¯¯ \\"'
    },
    ... 71 more items
  ],
  scopes: [
    <ref *3> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 45, character: 16 },
      end: Position { line: 69, character: 13 },
      scope: [Circular *1],
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTListConstructorExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTForGenericStatement {
          type: 'ForGenericStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          body: [Array],
          variable: [ASTIdentifier],
          iterator: [ASTIdentifier]
        },
        ASTIfStatement {
          type: 'IfStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          clauses: [Array]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(9) {
        'colors',
        'r',
        'signs',
        'MAP',
        'lower',
        'push',
        'join',
        'AsciiGen',
        'gen'
      },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTListConstructorExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIndexExpression],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIndexExpression],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIndexExpression],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIndexExpression],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIndexExpression],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIndexExpression],
          init: [ASTEvaluationExpression]
        },
        <ref *2> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTMemberExpression],
          init: [Circular *3]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          name: 'str'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          name: 'colors'
        }
      ]
    }
  ]
}"
`;

exports[`parse default scripts ascii.src unsafe 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 71, character: 29 },
  scope: null,
  body: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 14 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 9 },
        scope: [Circular *1],
        name: 'AsciiGen'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 12 },
        end: Position { line: 1, character: 14 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 9 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 3, character: 1 },
        end: Position { line: 3, character: 4 },
        scope: [Circular *1],
        name: 'map'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 3, character: 7 },
        end: Position { line: 3, character: 9 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 5, character: 1 },
      end: Position { line: 5, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 5, character: 4 },
        end: Position { line: 5, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 5, character: 9 },
        end: Position { line: 5, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 6, character: 1 },
      end: Position { line: 6, character: 36 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 6, character: 4 },
        end: Position { line: 6, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'b'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 6, character: 9 },
        end: Position { line: 6, character: 36 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 7, character: 1 },
      end: Position { line: 7, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 7, character: 4 },
        end: Position { line: 7, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'c'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 7, character: 9 },
        end: Position { line: 7, character: 33 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 8, character: 1 },
      end: Position { line: 8, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 8, character: 4 },
        end: Position { line: 8, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'd'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 8, character: 9 },
        end: Position { line: 8, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 9, character: 1 },
      end: Position { line: 9, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 9, character: 4 },
        end: Position { line: 9, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'e'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 9, character: 9 },
        end: Position { line: 9, character: 33 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 10, character: 1 },
      end: Position { line: 10, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 10, character: 4 },
        end: Position { line: 10, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'f'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 10, character: 9 },
        end: Position { line: 10, character: 33 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 11, character: 1 },
      end: Position { line: 11, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 11, character: 4 },
        end: Position { line: 11, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'g'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 11, character: 9 },
        end: Position { line: 11, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 12, character: 1 },
      end: Position { line: 12, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 12, character: 4 },
        end: Position { line: 12, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'h'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 12, character: 9 },
        end: Position { line: 12, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 13, character: 1 },
      end: Position { line: 13, character: 30 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 13, character: 4 },
        end: Position { line: 13, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'i'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 13, character: 9 },
        end: Position { line: 13, character: 30 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 14, character: 1 },
      end: Position { line: 14, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 14, character: 4 },
        end: Position { line: 14, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'j'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 14, character: 9 },
        end: Position { line: 14, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 15, character: 1 },
      end: Position { line: 15, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 15, character: 4 },
        end: Position { line: 15, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'k'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 15, character: 9 },
        end: Position { line: 15, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 16, character: 1 },
      end: Position { line: 16, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 16, character: 4 },
        end: Position { line: 16, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'l'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 16, character: 9 },
        end: Position { line: 16, character: 33 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 17, character: 1 },
      end: Position { line: 17, character: 45 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 17, character: 4 },
        end: Position { line: 17, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'm'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 17, character: 9 },
        end: Position { line: 17, character: 45 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 18, character: 1 },
      end: Position { line: 18, character: 45 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 18, character: 4 },
        end: Position { line: 18, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'n'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 18, character: 9 },
        end: Position { line: 18, character: 45 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 19, character: 1 },
      end: Position { line: 19, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 19, character: 4 },
        end: Position { line: 19, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'o'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 19, character: 9 },
        end: Position { line: 19, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 20, character: 1 },
      end: Position { line: 20, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 20, character: 4 },
        end: Position { line: 20, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'p'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 20, character: 9 },
        end: Position { line: 20, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 21, character: 1 },
      end: Position { line: 21, character: 42 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 21, character: 4 },
        end: Position { line: 21, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'q'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 21, character: 9 },
        end: Position { line: 21, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 22, character: 1 },
      end: Position { line: 22, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 22, character: 4 },
        end: Position { line: 22, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'r'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 22, character: 9 },
        end: Position { line: 22, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 23, character: 1 },
      end: Position { line: 23, character: 36 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 23, character: 4 },
        end: Position { line: 23, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 's'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 23, character: 9 },
        end: Position { line: 23, character: 36 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 24, character: 1 },
      end: Position { line: 24, character: 36 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 24, character: 4 },
        end: Position { line: 24, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 't'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 24, character: 9 },
        end: Position { line: 24, character: 36 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 25, character: 1 },
      end: Position { line: 25, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 25, character: 4 },
        end: Position { line: 25, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'u'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 25, character: 9 },
        end: Position { line: 25, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 26, character: 1 },
      end: Position { line: 26, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 26, character: 4 },
        end: Position { line: 26, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'v'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 26, character: 9 },
        end: Position { line: 26, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 27, character: 1 },
      end: Position { line: 27, character: 48 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 27, character: 4 },
        end: Position { line: 27, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'w'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 27, character: 9 },
        end: Position { line: 27, character: 48 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 28, character: 1 },
      end: Position { line: 28, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 28, character: 4 },
        end: Position { line: 28, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'x'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 28, character: 9 },
        end: Position { line: 28, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 29, character: 1 },
      end: Position { line: 29, character: 42 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 29, character: 4 },
        end: Position { line: 29, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'y'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 29, character: 9 },
        end: Position { line: 29, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 30, character: 1 },
      end: Position { line: 30, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 30, character: 4 },
        end: Position { line: 30, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'z'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 30, character: 9 },
        end: Position { line: 30, character: 33 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 31, character: 1 },
      end: Position { line: 31, character: 42 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 31, character: 5 },
        end: Position { line: 31, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '0',
          raw: '\\"0\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 31, character: 12 },
        end: Position { line: 31, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 32, character: 1 },
      end: Position { line: 32, character: 36 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 32, character: 5 },
        end: Position { line: 32, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '1',
          raw: '\\"1\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 32, character: 12 },
        end: Position { line: 32, character: 36 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 33, character: 1 },
      end: Position { line: 33, character: 39 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 33, character: 5 },
        end: Position { line: 33, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '2',
          raw: '\\"2\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 33, character: 12 },
        end: Position { line: 33, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 34, character: 1 },
      end: Position { line: 34, character: 36 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 34, character: 5 },
        end: Position { line: 34, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '3',
          raw: '\\"3\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 34, character: 12 },
        end: Position { line: 34, character: 36 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 35, character: 1 },
      end: Position { line: 35, character: 39 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 35, character: 5 },
        end: Position { line: 35, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '4',
          raw: '\\"4\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 35, character: 12 },
        end: Position { line: 35, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 36, character: 1 },
      end: Position { line: 36, character: 39 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 36, character: 5 },
        end: Position { line: 36, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '5',
          raw: '\\"5\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 36, character: 12 },
        end: Position { line: 36, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 37, character: 1 },
      end: Position { line: 37, character: 42 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 37, character: 5 },
        end: Position { line: 37, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '6',
          raw: '\\"6\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 37, character: 12 },
        end: Position { line: 37, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 38, character: 1 },
      end: Position { line: 38, character: 39 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 38, character: 5 },
        end: Position { line: 38, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '7',
          raw: '\\"7\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 38, character: 12 },
        end: Position { line: 38, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 39, character: 1 },
      end: Position { line: 39, character: 42 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 39, character: 5 },
        end: Position { line: 39, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '8',
          raw: '\\"8\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 39, character: 12 },
        end: Position { line: 39, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 40, character: 1 },
      end: Position { line: 40, character: 42 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 40, character: 5 },
        end: Position { line: 40, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '9',
          raw: '\\"9\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 40, character: 12 },
        end: Position { line: 40, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 41, character: 1 },
      end: Position { line: 41, character: 30 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 41, character: 5 },
        end: Position { line: 41, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: ' ',
          raw: '\\" \\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 41, character: 12 },
        end: Position { line: 41, character: 30 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 43, character: 1 },
      end: Position { line: 43, character: 19 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 43, character: 9 },
        end: Position { line: 43, character: 15 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'MAP'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'AsciiGen'
        }
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 43, character: 16 },
        end: Position { line: 43, character: 19 },
        scope: [Circular *1],
        name: 'map'
      }
    },
    <ref *2> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 45, character: 1 },
      end: Position { line: 69, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 16 },
        end: Position { line: 69, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'colors',
          'r',
          'signs',
          'MAP',
          'lower',
          'push',
          'join',
          'AsciiGen',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *2]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 45, character: 9 },
        end: Position { line: 45, character: 15 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'gen'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'AsciiGen'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 16 },
        end: Position { line: 69, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'colors',
          'r',
          'signs',
          'MAP',
          'lower',
          'push',
          'join',
          'AsciiGen',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *2]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 71, character: 1 },
      end: Position { line: 71, character: 29 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 16 },
        end: Position { line: 69, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'colors',
          'r',
          'signs',
          'MAP',
          'lower',
          'push',
          'join',
          'AsciiGen',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 71, character: 6 },
        end: Position { line: 71, character: 29 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'print'
        },
        arguments: [ [ASTCallExpression] ]
      }
    }
  ],
  namespaces: Set(30) {
    'AsciiGen',
    'map',
    'a',
    'b',
    'c',
    'd',
    'e',
    'f',
    'g',
    'h',
    'i',
    'j',
    'k',
    'l',
    'm',
    'n',
    'o',
    'p',
    'q',
    'r',
    's',
    't',
    'u',
    'v',
    'w',
    'x',
    'y',
    'z',
    'MAP',
    'gen'
  },
  assignments: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 14 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 9 },
        scope: [Circular *1],
        name: 'AsciiGen'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 12 },
        end: Position { line: 1, character: 14 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 9 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 3, character: 1 },
        end: Position { line: 3, character: 4 },
        scope: [Circular *1],
        name: 'map'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 3, character: 7 },
        end: Position { line: 3, character: 9 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 5, character: 1 },
      end: Position { line: 5, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 5, character: 4 },
        end: Position { line: 5, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 5, character: 9 },
        end: Position { line: 5, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 6, character: 1 },
      end: Position { line: 6, character: 36 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 6, character: 4 },
        end: Position { line: 6, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'b'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 6, character: 9 },
        end: Position { line: 6, character: 36 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 7, character: 1 },
      end: Position { line: 7, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 7, character: 4 },
        end: Position { line: 7, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'c'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 7, character: 9 },
        end: Position { line: 7, character: 33 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 8, character: 1 },
      end: Position { line: 8, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 8, character: 4 },
        end: Position { line: 8, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'd'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 8, character: 9 },
        end: Position { line: 8, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 9, character: 1 },
      end: Position { line: 9, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 9, character: 4 },
        end: Position { line: 9, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'e'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 9, character: 9 },
        end: Position { line: 9, character: 33 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 10, character: 1 },
      end: Position { line: 10, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 10, character: 4 },
        end: Position { line: 10, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'f'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 10, character: 9 },
        end: Position { line: 10, character: 33 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 11, character: 1 },
      end: Position { line: 11, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 11, character: 4 },
        end: Position { line: 11, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'g'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 11, character: 9 },
        end: Position { line: 11, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 12, character: 1 },
      end: Position { line: 12, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 12, character: 4 },
        end: Position { line: 12, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'h'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 12, character: 9 },
        end: Position { line: 12, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 13, character: 1 },
      end: Position { line: 13, character: 30 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 13, character: 4 },
        end: Position { line: 13, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'i'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 13, character: 9 },
        end: Position { line: 13, character: 30 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 14, character: 1 },
      end: Position { line: 14, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 14, character: 4 },
        end: Position { line: 14, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'j'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 14, character: 9 },
        end: Position { line: 14, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 15, character: 1 },
      end: Position { line: 15, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 15, character: 4 },
        end: Position { line: 15, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'k'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 15, character: 9 },
        end: Position { line: 15, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 16, character: 1 },
      end: Position { line: 16, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 16, character: 4 },
        end: Position { line: 16, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'l'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 16, character: 9 },
        end: Position { line: 16, character: 33 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 17, character: 1 },
      end: Position { line: 17, character: 45 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 17, character: 4 },
        end: Position { line: 17, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'm'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 17, character: 9 },
        end: Position { line: 17, character: 45 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 18, character: 1 },
      end: Position { line: 18, character: 45 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 18, character: 4 },
        end: Position { line: 18, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'n'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 18, character: 9 },
        end: Position { line: 18, character: 45 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 19, character: 1 },
      end: Position { line: 19, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 19, character: 4 },
        end: Position { line: 19, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'o'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 19, character: 9 },
        end: Position { line: 19, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 20, character: 1 },
      end: Position { line: 20, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 20, character: 4 },
        end: Position { line: 20, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'p'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 20, character: 9 },
        end: Position { line: 20, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 21, character: 1 },
      end: Position { line: 21, character: 42 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 21, character: 4 },
        end: Position { line: 21, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'q'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 21, character: 9 },
        end: Position { line: 21, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 22, character: 1 },
      end: Position { line: 22, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 22, character: 4 },
        end: Position { line: 22, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'r'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 22, character: 9 },
        end: Position { line: 22, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 23, character: 1 },
      end: Position { line: 23, character: 36 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 23, character: 4 },
        end: Position { line: 23, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 's'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 23, character: 9 },
        end: Position { line: 23, character: 36 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 24, character: 1 },
      end: Position { line: 24, character: 36 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 24, character: 4 },
        end: Position { line: 24, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 't'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 24, character: 9 },
        end: Position { line: 24, character: 36 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 25, character: 1 },
      end: Position { line: 25, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 25, character: 4 },
        end: Position { line: 25, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'u'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 25, character: 9 },
        end: Position { line: 25, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 26, character: 1 },
      end: Position { line: 26, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 26, character: 4 },
        end: Position { line: 26, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'v'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 26, character: 9 },
        end: Position { line: 26, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 27, character: 1 },
      end: Position { line: 27, character: 48 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 27, character: 4 },
        end: Position { line: 27, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'w'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 27, character: 9 },
        end: Position { line: 27, character: 48 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 28, character: 1 },
      end: Position { line: 28, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 28, character: 4 },
        end: Position { line: 28, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'x'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 28, character: 9 },
        end: Position { line: 28, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 29, character: 1 },
      end: Position { line: 29, character: 42 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 29, character: 4 },
        end: Position { line: 29, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'y'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 29, character: 9 },
        end: Position { line: 29, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 30, character: 1 },
      end: Position { line: 30, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 30, character: 4 },
        end: Position { line: 30, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'z'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 30, character: 9 },
        end: Position { line: 30, character: 33 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 31, character: 1 },
      end: Position { line: 31, character: 42 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 31, character: 5 },
        end: Position { line: 31, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '0',
          raw: '\\"0\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 31, character: 12 },
        end: Position { line: 31, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 32, character: 1 },
      end: Position { line: 32, character: 36 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 32, character: 5 },
        end: Position { line: 32, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '1',
          raw: '\\"1\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 32, character: 12 },
        end: Position { line: 32, character: 36 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 33, character: 1 },
      end: Position { line: 33, character: 39 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 33, character: 5 },
        end: Position { line: 33, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '2',
          raw: '\\"2\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 33, character: 12 },
        end: Position { line: 33, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 34, character: 1 },
      end: Position { line: 34, character: 36 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 34, character: 5 },
        end: Position { line: 34, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '3',
          raw: '\\"3\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 34, character: 12 },
        end: Position { line: 34, character: 36 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 35, character: 1 },
      end: Position { line: 35, character: 39 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 35, character: 5 },
        end: Position { line: 35, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '4',
          raw: '\\"4\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 35, character: 12 },
        end: Position { line: 35, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 36, character: 1 },
      end: Position { line: 36, character: 39 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 36, character: 5 },
        end: Position { line: 36, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '5',
          raw: '\\"5\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 36, character: 12 },
        end: Position { line: 36, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 37, character: 1 },
      end: Position { line: 37, character: 42 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 37, character: 5 },
        end: Position { line: 37, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '6',
          raw: '\\"6\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 37, character: 12 },
        end: Position { line: 37, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 38, character: 1 },
      end: Position { line: 38, character: 39 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 38, character: 5 },
        end: Position { line: 38, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '7',
          raw: '\\"7\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 38, character: 12 },
        end: Position { line: 38, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 39, character: 1 },
      end: Position { line: 39, character: 42 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 39, character: 5 },
        end: Position { line: 39, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '8',
          raw: '\\"8\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 39, character: 12 },
        end: Position { line: 39, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 40, character: 1 },
      end: Position { line: 40, character: 42 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 40, character: 5 },
        end: Position { line: 40, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '9',
          raw: '\\"9\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 40, character: 12 },
        end: Position { line: 40, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 41, character: 1 },
      end: Position { line: 41, character: 30 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 41, character: 5 },
        end: Position { line: 41, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: ' ',
          raw: '\\" \\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 41, character: 12 },
        end: Position { line: 41, character: 30 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 43, character: 1 },
      end: Position { line: 43, character: 19 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 43, character: 9 },
        end: Position { line: 43, character: 15 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'MAP'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'AsciiGen'
        }
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 43, character: 16 },
        end: Position { line: 43, character: 19 },
        scope: [Circular *1],
        name: 'map'
      }
    }
  ],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 5, character: 10 },
      end: Position { line: 5, character: 18 },
      scope: [Circular *1],
      value: '||¯|| ',
      raw: '\\"||¯|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 5, character: 20 },
      end: Position { line: 5, character: 28 },
      scope: [Circular *1],
      value: '||_|| ',
      raw: '\\"||_|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 5, character: 30 },
      end: Position { line: 5, character: 38 },
      scope: [Circular *1],
      value: '|| || ',
      raw: '\\"|| || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 6, character: 10 },
      end: Position { line: 6, character: 17 },
      scope: [Circular *1],
      value: '||¯/ ',
      raw: '\\"||¯/ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 6, character: 19 },
      end: Position { line: 6, character: 26 },
      scope: [Circular *1],
      value: '|| \\\\\\\\ ',
      raw: '\\"|| \\\\\\\\ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 6, character: 28 },
      end: Position { line: 6, character: 35 },
      scope: [Circular *1],
      value: '||_/ ',
      raw: '\\"||_/ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 7, character: 10 },
      end: Position { line: 7, character: 16 },
      scope: [Circular *1],
      value: '||¯ ',
      raw: '\\"||¯ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 7, character: 18 },
      end: Position { line: 7, character: 24 },
      scope: [Circular *1],
      value: '||  ',
      raw: '\\"||  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 7, character: 26 },
      end: Position { line: 7, character: 32 },
      scope: [Circular *1],
      value: '||_ ',
      raw: '\\"||_ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 8, character: 10 },
      end: Position { line: 8, character: 18 },
      scope: [Circular *1],
      value: '||¯\\\\\\\\\\\\\\\\ ',
      raw: '\\"||¯\\\\\\\\\\\\\\\\ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 8, character: 20 },
      end: Position { line: 8, character: 28 },
      scope: [Circular *1],
      value: '|| // ',
      raw: '\\"|| // \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 8, character: 30 },
      end: Position { line: 8, character: 38 },
      scope: [Circular *1],
      value: '||//  ',
      raw: '\\"||//  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 9, character: 10 },
      end: Position { line: 9, character: 16 },
      scope: [Circular *1],
      value: '||¯ ',
      raw: '\\"||¯ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 9, character: 18 },
      end: Position { line: 9, character: 24 },
      scope: [Circular *1],
      value: '||- ',
      raw: '\\"||- \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 9, character: 26 },
      end: Position { line: 9, character: 32 },
      scope: [Circular *1],
      value: '||_ ',
      raw: '\\"||_ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 10, character: 10 },
      end: Position { line: 10, character: 16 },
      scope: [Circular *1],
      value: '||¯ ',
      raw: '\\"||¯ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 10, character: 18 },
      end: Position { line: 10, character: 24 },
      scope: [Circular *1],
      value: '||_ ',
      raw: '\\"||_ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 10, character: 26 },
      end: Position { line: 10, character: 32 },
      scope: [Circular *1],
      value: '||  ',
      raw: '\\"||  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 11, character: 10 },
      end: Position { line: 11, character: 18 },
      scope: [Circular *1],
      value: '||¯¯  ',
      raw: '\\"||¯¯  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 11, character: 20 },
      end: Position { line: 11, character: 28 },
      scope: [Circular *1],
      value: '|| \\\\\\\\\\\\\\\\ ',
      raw: '\\"|| \\\\\\\\\\\\\\\\ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 11, character: 30 },
      end: Position { line: 11, character: 38 },
      scope: [Circular *1],
      value: '||_|| ',
      raw: '\\"||_|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 12, character: 10 },
      end: Position { line: 12, character: 18 },
      scope: [Circular *1],
      value: '|| || ',
      raw: '\\"|| || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 12, character: 20 },
      end: Position { line: 12, character: 28 },
      scope: [Circular *1],
      value: '||-|| ',
      raw: '\\"||-|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 12, character: 30 },
      end: Position { line: 12, character: 38 },
      scope: [Circular *1],
      value: '|| || ',
      raw: '\\"|| || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 13, character: 10 },
      end: Position { line: 13, character: 15 },
      scope: [Circular *1],
      value: '|| ',
      raw: '\\"|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 13, character: 17 },
      end: Position { line: 13, character: 22 },
      scope: [Circular *1],
      value: '|| ',
      raw: '\\"|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 13, character: 24 },
      end: Position { line: 13, character: 29 },
      scope: [Circular *1],
      value: '|| ',
      raw: '\\"|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 14, character: 10 },
      end: Position { line: 14, character: 18 },
      scope: [Circular *1],
      value: ' ¯||¯ ',
      raw: '\\" ¯||¯ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 14, character: 20 },
      end: Position { line: 14, character: 28 },
      scope: [Circular *1],
      value: '  ||  ',
      raw: '\\"  ||  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 14, character: 30 },
      end: Position { line: 14, character: 38 },
      scope: [Circular *1],
      value: '|_||  ',
      raw: '\\"|_||  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 15, character: 10 },
      end: Position { line: 15, character: 18 },
      scope: [Circular *1],
      value: '||  / ',
      raw: '\\"||  / \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 15, character: 20 },
      end: Position { line: 15, character: 28 },
      scope: [Circular *1],
      value: '|| /  ',
      raw: '\\"|| /  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 15, character: 30 },
      end: Position { line: 15, character: 38 },
      scope: [Circular *1],
      value: '||¯\\\\\\\\\\\\\\\\ ',
      raw: '\\"||¯\\\\\\\\\\\\\\\\ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 16, character: 10 },
      end: Position { line: 16, character: 16 },
      scope: [Circular *1],
      value: '||  ',
      raw: '\\"||  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 16, character: 18 },
      end: Position { line: 16, character: 24 },
      scope: [Circular *1],
      value: '||  ',
      raw: '\\"||  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 16, character: 26 },
      end: Position { line: 16, character: 32 },
      scope: [Circular *1],
      value: '||_ ',
      raw: '\\"||_ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 17, character: 10 },
      end: Position { line: 17, character: 20 },
      scope: [Circular *1],
      value: '||\\\\\\\\\\\\\\\\/|| ',
      raw: '\\"||\\\\\\\\\\\\\\\\/|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 17, character: 22 },
      end: Position { line: 17, character: 32 },
      scope: [Circular *1],
      value: '||   || ',
      raw: '\\"||   || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 17, character: 34 },
      end: Position { line: 17, character: 44 },
      scope: [Circular *1],
      value: '||   || ',
      raw: '\\"||   || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 18, character: 10 },
      end: Position { line: 18, character: 20 },
      scope: [Circular *1],
      value: '||\\\\\\\\\\\\\\\\ || ',
      raw: '\\"||\\\\\\\\\\\\\\\\ || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 18, character: 22 },
      end: Position { line: 18, character: 32 },
      scope: [Circular *1],
      value: '|| \\\\\\\\\\\\\\\\|| ',
      raw: '\\"|| \\\\\\\\\\\\\\\\|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 18, character: 34 },
      end: Position { line: 18, character: 44 },
      scope: [Circular *1],
      value: '||  \\\\\\\\|| ',
      raw: '\\"||  \\\\\\\\|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 19, character: 10 },
      end: Position { line: 19, character: 18 },
      scope: [Circular *1],
      value: '||¯|| ',
      raw: '\\"||¯|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 19, character: 20 },
      end: Position { line: 19, character: 28 },
      scope: [Circular *1],
      value: '|| || ',
      raw: '\\"|| || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 19, character: 30 },
      end: Position { line: 19, character: 38 },
      scope: [Circular *1],
      value: '||_|| ',
      raw: '\\"||_|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 20, character: 10 },
      end: Position { line: 20, character: 18 },
      scope: [Circular *1],
      value: '||¯|| ',
      raw: '\\"||¯|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 20, character: 20 },
      end: Position { line: 20, character: 28 },
      scope: [Circular *1],
      value: '||_|| ',
      raw: '\\"||_|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 20, character: 30 },
      end: Position { line: 20, character: 38 },
      scope: [Circular *1],
      value: '||    ',
      raw: '\\"||    \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 21, character: 10 },
      end: Position { line: 21, character: 19 },
      scope: [Circular *1],
      value: '||¯||  ',
      raw: '\\"||¯||  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 21, character: 21 },
      end: Position { line: 21, character: 30 },
      scope: [Circular *1],
      value: '|| ||  ',
      raw: '\\"|| ||  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 21, character: 32 },
      end: Position { line: 21, character: 41 },
      scope: [Circular *1],
      value: '||_||¬ ',
      raw: '\\"||_||¬ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 22, character: 10 },
      end: Position { line: 22, character: 18 },
      scope: [Circular *1],
      value: '||¯|| ',
      raw: '\\"||¯|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 22, character: 20 },
      end: Position { line: 22, character: 28 },
      scope: [Circular *1],
      value: '||¯\\\\\\\\\\\\\\\\ ',
      raw: '\\"||¯\\\\\\\\\\\\\\\\ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 22, character: 30 },
      end: Position { line: 22, character: 38 },
      scope: [Circular *1],
      value: '|| || ',
      raw: '\\"|| || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 23, character: 10 },
      end: Position { line: 23, character: 17 },
      scope: [Circular *1],
      value: '||¯¯ ',
      raw: '\\"||¯¯ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 23, character: 19 },
      end: Position { line: 23, character: 26 },
      scope: [Circular *1],
      value: ' \\\\\\\\\\\\\\\\  ',
      raw: '\\" \\\\\\\\\\\\\\\\  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 23, character: 28 },
      end: Position { line: 23, character: 35 },
      scope: [Circular *1],
      value: '__|| ',
      raw: '\\"__|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 24, character: 10 },
      end: Position { line: 24, character: 17 },
      scope: [Circular *1],
      value: '¯||¯ ',
      raw: '\\"¯||¯ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 24, character: 19 },
      end: Position { line: 24, character: 26 },
      scope: [Circular *1],
      value: ' ||  ',
      raw: '\\" ||  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 24, character: 28 },
      end: Position { line: 24, character: 35 },
      scope: [Circular *1],
      value: ' ||  ',
      raw: '\\" ||  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 25, character: 10 },
      end: Position { line: 25, character: 18 },
      scope: [Circular *1],
      value: '|| || ',
      raw: '\\"|| || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 25, character: 20 },
      end: Position { line: 25, character: 28 },
      scope: [Circular *1],
      value: '|| || ',
      raw: '\\"|| || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 25, character: 30 },
      end: Position { line: 25, character: 38 },
      scope: [Circular *1],
      value: '||_|| ',
      raw: '\\"||_|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 26, character: 10 },
      end: Position { line: 26, character: 18 },
      scope: [Circular *1],
      value: '\\\\\\\\\\\\\\\\ || ',
      raw: '\\"\\\\\\\\\\\\\\\\ || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 26, character: 20 },
      end: Position { line: 26, character: 28 },
      scope: [Circular *1],
      value: ' \\\\\\\\\\\\\\\\|| ',
      raw: '\\" \\\\\\\\\\\\\\\\|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 26, character: 30 },
      end: Position { line: 26, character: 38 },
      scope: [Circular *1],
      value: '  \\\\\\\\\\\\\\\\| ',
      raw: '\\"  \\\\\\\\\\\\\\\\| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 27, character: 10 },
      end: Position { line: 27, character: 21 },
      scope: [Circular *1],
      value: '\\\\\\\\\\\\\\\\ |\\\\\\\\\\\\\\\\ | ',
      raw: '\\"\\\\\\\\\\\\\\\\ |\\\\\\\\\\\\\\\\ | \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 27, character: 23 },
      end: Position { line: 27, character: 34 },
      scope: [Circular *1],
      value: ' \\\\\\\\\\\\\\\\| \\\\\\\\\\\\\\\\| ',
      raw: '\\" \\\\\\\\\\\\\\\\| \\\\\\\\\\\\\\\\| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 27, character: 36 },
      end: Position { line: 27, character: 47 },
      scope: [Circular *1],
      value: '  \\\\\\\\\\\\\\\\  \\\\\\\\\\\\\\\\ ',
      raw: '\\"  \\\\\\\\\\\\\\\\  \\\\\\\\\\\\\\\\ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 28, character: 10 },
      end: Position { line: 28, character: 18 },
      scope: [Circular *1],
      value: '\\\\\\\\\\\\\\\\  / ',
      raw: '\\"\\\\\\\\\\\\\\\\  / \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 28, character: 20 },
      end: Position { line: 28, character: 28 },
      scope: [Circular *1],
      value: ' \\\\\\\\\\\\\\\\/  ',
      raw: '\\" \\\\\\\\\\\\\\\\/  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 28, character: 30 },
      end: Position { line: 28, character: 38 },
      scope: [Circular *1],
      value: ' //\\\\\\\\  ',
      raw: '\\" //\\\\\\\\  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 29, character: 10 },
      end: Position { line: 29, character: 19 },
      scope: [Circular *1],
      value: '\\\\\\\\\\\\\\\\  // ',
      raw: '\\"\\\\\\\\\\\\\\\\  // \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 29, character: 21 },
      end: Position { line: 29, character: 30 },
      scope: [Circular *1],
      value: ' \\\\\\\\\\\\\\\\//  ',
      raw: '\\" \\\\\\\\\\\\\\\\//  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 29, character: 32 },
      end: Position { line: 29, character: 41 },
      scope: [Circular *1],
      value: '  ||   ',
      raw: '\\"  ||   \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 30, character: 10 },
      end: Position { line: 30, character: 16 },
      scope: [Circular *1],
      value: '¯// ',
      raw: '\\"¯// \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 30, character: 18 },
      end: Position { line: 30, character: 24 },
      scope: [Circular *1],
      value: '//  ',
      raw: '\\"//  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 30, character: 26 },
      end: Position { line: 30, character: 32 },
      scope: [Circular *1],
      value: '||_ ',
      raw: '\\"||_ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 31, character: 5 },
      end: Position { line: 31, character: 8 },
      scope: [Circular *1],
      value: '0',
      raw: '\\"0\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 31, character: 13 },
      end: Position { line: 31, character: 21 },
      scope: [Circular *1],
      value: '||¯|| ',
      raw: '\\"||¯|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 31, character: 23 },
      end: Position { line: 31, character: 31 },
      scope: [Circular *1],
      value: '||x|| ',
      raw: '\\"||x|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 31, character: 33 },
      end: Position { line: 31, character: 41 },
      scope: [Circular *1],
      value: '||_|| ',
      raw: '\\"||_|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 32, character: 5 },
      end: Position { line: 32, character: 8 },
      scope: [Circular *1],
      value: '1',
      raw: '\\"1\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 32, character: 13 },
      end: Position { line: 32, character: 19 },
      scope: [Circular *1],
      value: \\"'|| \\",
      raw: \`\\"'|| \\"\`
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 32, character: 21 },
      end: Position { line: 32, character: 27 },
      scope: [Circular *1],
      value: ' || ',
      raw: '\\" || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 32, character: 29 },
      end: Position { line: 32, character: 35 },
      scope: [Circular *1],
      value: ' || ',
      raw: '\\" || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 33, character: 5 },
      end: Position { line: 33, character: 8 },
      scope: [Circular *1],
      value: '2',
      raw: '\\"2\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 33, character: 13 },
      end: Position { line: 33, character: 20 },
      scope: [Circular *1],
      value: '¯¯|| ',
      raw: '\\"¯¯|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 33, character: 22 },
      end: Position { line: 33, character: 29 },
      scope: [Circular *1],
      value: '||¯  ',
      raw: '\\"||¯  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 33, character: 31 },
      end: Position { line: 33, character: 38 },
      scope: [Circular *1],
      value: '||_  ',
      raw: '\\"||_  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 34, character: 5 },
      end: Position { line: 34, character: 8 },
      scope: [Circular *1],
      value: '3',
      raw: '\\"3\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 34, character: 13 },
      end: Position { line: 34, character: 19 },
      scope: [Circular *1],
      value: '¯|| ',
      raw: '\\"¯|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 34, character: 21 },
      end: Position { line: 34, character: 27 },
      scope: [Circular *1],
      value: '-|| ',
      raw: '\\"-|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 34, character: 29 },
      end: Position { line: 34, character: 35 },
      scope: [Circular *1],
      value: '_|| ',
      raw: '\\"_|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 35, character: 5 },
      end: Position { line: 35, character: 8 },
      scope: [Circular *1],
      value: '4',
      raw: '\\"4\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 35, character: 13 },
      end: Position { line: 35, character: 20 },
      scope: [Circular *1],
      value: ' /|| ',
      raw: '\\" /|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 35, character: 22 },
      end: Position { line: 35, character: 29 },
      scope: [Circular *1],
      value: '/_|| ',
      raw: '\\"/_|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 35, character: 31 },
      end: Position { line: 35, character: 38 },
      scope: [Circular *1],
      value: '  || ',
      raw: '\\"  || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 36, character: 5 },
      end: Position { line: 36, character: 8 },
      scope: [Circular *1],
      value: '5',
      raw: '\\"5\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 36, character: 13 },
      end: Position { line: 36, character: 20 },
      scope: [Circular *1],
      value: '||¯¯ ',
      raw: '\\"||¯¯ \\"'
    },
    ... 71 more items
  ],
  scopes: [
    <ref *3> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 45, character: 16 },
      end: Position { line: 69, character: 13 },
      scope: [Circular *1],
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTListConstructorExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTForGenericStatement {
          type: 'ForGenericStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          body: [Array],
          variable: [ASTIdentifier],
          iterator: [ASTIdentifier]
        },
        ASTIfStatement {
          type: 'IfStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          clauses: [Array]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(9) {
        'colors',
        'r',
        'signs',
        'MAP',
        'lower',
        'push',
        'join',
        'AsciiGen',
        'gen'
      },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTListConstructorExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIndexExpression],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIndexExpression],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIndexExpression],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIndexExpression],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIndexExpression],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIndexExpression],
          init: [ASTEvaluationExpression]
        },
        <ref *2> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTMemberExpression],
          init: [Circular *3]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          name: 'str'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          name: 'colors'
        }
      ]
    }
  ]
}"
`;

exports[`parse default scripts binary-expressions.src 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 12, character: 7 },
  scope: null,
  body: [
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 7 },
      scope: [Circular *1],
      expression: ASTAssignmentStatement {
        type: 'AssignmentStatement',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 7 },
        scope: [Circular *1],
        variable: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        },
        init: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '/',
          left: [ASTIdentifier],
          right: [ASTIdentifier]
        }
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 2, character: 1 },
      end: Position { line: 2, character: 7 },
      scope: [Circular *1],
      expression: ASTAssignmentStatement {
        type: 'AssignmentStatement',
        start: Position { line: 2, character: 1 },
        end: Position { line: 2, character: 7 },
        scope: [Circular *1],
        variable: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        },
        init: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '*',
          left: [ASTIdentifier],
          right: [ASTIdentifier]
        }
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 7 },
      scope: [Circular *1],
      expression: ASTAssignmentStatement {
        type: 'AssignmentStatement',
        start: Position { line: 3, character: 1 },
        end: Position { line: 3, character: 7 },
        scope: [Circular *1],
        variable: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        },
        init: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '-',
          left: [ASTIdentifier],
          right: [ASTIdentifier]
        }
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 4, character: 7 },
      scope: [Circular *1],
      expression: ASTAssignmentStatement {
        type: 'AssignmentStatement',
        start: Position { line: 4, character: 1 },
        end: Position { line: 4, character: 7 },
        scope: [Circular *1],
        variable: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        },
        init: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '+',
          left: [ASTIdentifier],
          right: [ASTIdentifier]
        }
      }
    },
    ASTEvaluationExpression {
      type: 'BinaryExpression',
      start: Position { line: 5, character: 3 },
      end: Position { line: 5, character: 7 },
      scope: [Circular *1],
      operator: '<<',
      left: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 5, character: 1 },
        end: Position { line: 5, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      right: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 5, character: 6 },
        end: Position { line: 5, character: 7 },
        scope: [Circular *1],
        name: 'b'
      }
    },
    ASTEvaluationExpression {
      type: 'BinaryExpression',
      start: Position { line: 6, character: 3 },
      end: Position { line: 6, character: 7 },
      scope: [Circular *1],
      operator: '>>',
      left: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 6, character: 1 },
        end: Position { line: 6, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      right: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 6, character: 6 },
        end: Position { line: 6, character: 7 },
        scope: [Circular *1],
        name: 'b'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 7, character: 1 },
      end: Position { line: 7, character: 24 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 7, character: 1 },
        end: Position { line: 7, character: 2 },
        scope: [Circular *1],
        name: 'w'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 7, character: 7 },
        end: Position { line: 7, character: 24 },
        scope: [Circular *1],
        operator: '>>',
        left: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '>>>',
          left: [ASTIdentifier],
          right: [ASTEvaluationExpression]
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        }
      }
    },
    ASTEvaluationExpression {
      type: 'BinaryExpression',
      start: Position { line: 8, character: 3 },
      end: Position { line: 8, character: 6 },
      scope: [Circular *1],
      operator: '|',
      left: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 8, character: 1 },
        end: Position { line: 8, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      right: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 8, character: 5 },
        end: Position { line: 8, character: 6 },
        scope: [Circular *1],
        name: 'b'
      }
    },
    ASTEvaluationExpression {
      type: 'BinaryExpression',
      start: Position { line: 9, character: 3 },
      end: Position { line: 9, character: 6 },
      scope: [Circular *1],
      operator: '&',
      left: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 9, character: 1 },
        end: Position { line: 9, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      right: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 9, character: 5 },
        end: Position { line: 9, character: 6 },
        scope: [Circular *1],
        name: 'b'
      }
    },
    ASTEvaluationExpression {
      type: 'BinaryExpression',
      start: Position { line: 10, character: 3 },
      end: Position { line: 10, character: 6 },
      scope: [Circular *1],
      operator: '^',
      left: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 10, character: 1 },
        end: Position { line: 10, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      right: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 10, character: 5 },
        end: Position { line: 10, character: 6 },
        scope: [Circular *1],
        name: 'b'
      }
    },
    ASTEvaluationExpression {
      type: 'LogicalExpression',
      start: Position { line: 11, character: 3 },
      end: Position { line: 11, character: 8 },
      scope: [Circular *1],
      operator: 'and',
      left: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 11, character: 1 },
        end: Position { line: 11, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      right: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 11, character: 7 },
        end: Position { line: 11, character: 8 },
        scope: [Circular *1],
        name: 'b'
      }
    },
    ASTEvaluationExpression {
      type: 'LogicalExpression',
      start: Position { line: 12, character: 3 },
      end: Position { line: 12, character: 7 },
      scope: [Circular *1],
      operator: 'or',
      left: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 12, character: 1 },
        end: Position { line: 12, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      right: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 12, character: 6 },
        end: Position { line: 12, character: 7 },
        scope: [Circular *1],
        name: 'b'
      }
    }
  ],
  namespaces: Set(4) { 'a', 'b', 'w', 'c' },
  assignments: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 7 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 1, character: 6 },
        end: Position { line: 1, character: 7 },
        scope: [Circular *1],
        operator: '/',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'b'
        }
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 2, character: 1 },
      end: Position { line: 2, character: 7 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 2, character: 1 },
        end: Position { line: 2, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 2, character: 6 },
        end: Position { line: 2, character: 7 },
        scope: [Circular *1],
        operator: '*',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'b'
        }
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 7 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 3, character: 1 },
        end: Position { line: 3, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 3, character: 6 },
        end: Position { line: 3, character: 7 },
        scope: [Circular *1],
        operator: '-',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'b'
        }
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 4, character: 7 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 4, character: 1 },
        end: Position { line: 4, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 4, character: 6 },
        end: Position { line: 4, character: 7 },
        scope: [Circular *1],
        operator: '+',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'b'
        }
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 7, character: 1 },
      end: Position { line: 7, character: 24 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 7, character: 1 },
        end: Position { line: 7, character: 2 },
        scope: [Circular *1],
        name: 'w'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 7, character: 7 },
        end: Position { line: 7, character: 24 },
        scope: [Circular *1],
        operator: '>>',
        left: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '>>>',
          left: [ASTIdentifier],
          right: [ASTEvaluationExpression]
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        }
      }
    }
  ],
  nativeImports: [],
  literals: [],
  scopes: []
}"
`;

exports[`parse default scripts binary-expressions.src unsafe 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 12, character: 7 },
  scope: null,
  body: [
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 7 },
      scope: [Circular *1],
      expression: ASTAssignmentStatement {
        type: 'AssignmentStatement',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 7 },
        scope: [Circular *1],
        variable: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        },
        init: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '/',
          left: [ASTIdentifier],
          right: [ASTIdentifier]
        }
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 2, character: 1 },
      end: Position { line: 2, character: 7 },
      scope: [Circular *1],
      expression: ASTAssignmentStatement {
        type: 'AssignmentStatement',
        start: Position { line: 2, character: 1 },
        end: Position { line: 2, character: 7 },
        scope: [Circular *1],
        variable: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        },
        init: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '*',
          left: [ASTIdentifier],
          right: [ASTIdentifier]
        }
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 7 },
      scope: [Circular *1],
      expression: ASTAssignmentStatement {
        type: 'AssignmentStatement',
        start: Position { line: 3, character: 1 },
        end: Position { line: 3, character: 7 },
        scope: [Circular *1],
        variable: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        },
        init: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '-',
          left: [ASTIdentifier],
          right: [ASTIdentifier]
        }
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 4, character: 7 },
      scope: [Circular *1],
      expression: ASTAssignmentStatement {
        type: 'AssignmentStatement',
        start: Position { line: 4, character: 1 },
        end: Position { line: 4, character: 7 },
        scope: [Circular *1],
        variable: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        },
        init: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '+',
          left: [ASTIdentifier],
          right: [ASTIdentifier]
        }
      }
    },
    ASTEvaluationExpression {
      type: 'BinaryExpression',
      start: Position { line: 5, character: 3 },
      end: Position { line: 5, character: 7 },
      scope: [Circular *1],
      operator: '<<',
      left: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 5, character: 1 },
        end: Position { line: 5, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      right: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 5, character: 6 },
        end: Position { line: 5, character: 7 },
        scope: [Circular *1],
        name: 'b'
      }
    },
    ASTEvaluationExpression {
      type: 'BinaryExpression',
      start: Position { line: 6, character: 3 },
      end: Position { line: 6, character: 7 },
      scope: [Circular *1],
      operator: '>>',
      left: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 6, character: 1 },
        end: Position { line: 6, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      right: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 6, character: 6 },
        end: Position { line: 6, character: 7 },
        scope: [Circular *1],
        name: 'b'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 7, character: 1 },
      end: Position { line: 7, character: 24 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 7, character: 1 },
        end: Position { line: 7, character: 2 },
        scope: [Circular *1],
        name: 'w'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 7, character: 7 },
        end: Position { line: 7, character: 24 },
        scope: [Circular *1],
        operator: '>>',
        left: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '>>>',
          left: [ASTIdentifier],
          right: [ASTEvaluationExpression]
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        }
      }
    },
    ASTEvaluationExpression {
      type: 'BinaryExpression',
      start: Position { line: 8, character: 3 },
      end: Position { line: 8, character: 6 },
      scope: [Circular *1],
      operator: '|',
      left: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 8, character: 1 },
        end: Position { line: 8, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      right: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 8, character: 5 },
        end: Position { line: 8, character: 6 },
        scope: [Circular *1],
        name: 'b'
      }
    },
    ASTEvaluationExpression {
      type: 'BinaryExpression',
      start: Position { line: 9, character: 3 },
      end: Position { line: 9, character: 6 },
      scope: [Circular *1],
      operator: '&',
      left: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 9, character: 1 },
        end: Position { line: 9, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      right: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 9, character: 5 },
        end: Position { line: 9, character: 6 },
        scope: [Circular *1],
        name: 'b'
      }
    },
    ASTEvaluationExpression {
      type: 'BinaryExpression',
      start: Position { line: 10, character: 3 },
      end: Position { line: 10, character: 6 },
      scope: [Circular *1],
      operator: '^',
      left: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 10, character: 1 },
        end: Position { line: 10, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      right: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 10, character: 5 },
        end: Position { line: 10, character: 6 },
        scope: [Circular *1],
        name: 'b'
      }
    },
    ASTEvaluationExpression {
      type: 'LogicalExpression',
      start: Position { line: 11, character: 3 },
      end: Position { line: 11, character: 8 },
      scope: [Circular *1],
      operator: 'and',
      left: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 11, character: 1 },
        end: Position { line: 11, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      right: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 11, character: 7 },
        end: Position { line: 11, character: 8 },
        scope: [Circular *1],
        name: 'b'
      }
    },
    ASTEvaluationExpression {
      type: 'LogicalExpression',
      start: Position { line: 12, character: 3 },
      end: Position { line: 12, character: 7 },
      scope: [Circular *1],
      operator: 'or',
      left: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 12, character: 1 },
        end: Position { line: 12, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      right: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 12, character: 6 },
        end: Position { line: 12, character: 7 },
        scope: [Circular *1],
        name: 'b'
      }
    }
  ],
  namespaces: Set(4) { 'a', 'b', 'w', 'c' },
  assignments: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 7 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 1, character: 6 },
        end: Position { line: 1, character: 7 },
        scope: [Circular *1],
        operator: '/',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'b'
        }
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 2, character: 1 },
      end: Position { line: 2, character: 7 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 2, character: 1 },
        end: Position { line: 2, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 2, character: 6 },
        end: Position { line: 2, character: 7 },
        scope: [Circular *1],
        operator: '*',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'b'
        }
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 7 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 3, character: 1 },
        end: Position { line: 3, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 3, character: 6 },
        end: Position { line: 3, character: 7 },
        scope: [Circular *1],
        operator: '-',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'b'
        }
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 4, character: 7 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 4, character: 1 },
        end: Position { line: 4, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 4, character: 6 },
        end: Position { line: 4, character: 7 },
        scope: [Circular *1],
        operator: '+',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'b'
        }
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 7, character: 1 },
      end: Position { line: 7, character: 24 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 7, character: 1 },
        end: Position { line: 7, character: 2 },
        scope: [Circular *1],
        name: 'w'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 7, character: 7 },
        end: Position { line: 7, character: 24 },
        scope: [Circular *1],
        operator: '>>',
        left: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '>>>',
          left: [ASTIdentifier],
          right: [ASTEvaluationExpression]
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        }
      }
    }
  ],
  nativeImports: [],
  literals: [],
  scopes: []
}"
`;

exports[`parse default scripts eol.src 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 13, character: 9 },
  scope: null,
  body: [
    ASTIfStatement {
      type: 'IfStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 5, character: 7 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTElseClause {
          type: 'ElseClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array]
        }
      ]
    },
    ASTWhileStatement {
      type: 'WhileStatement',
      start: Position { line: 7, character: 1 },
      end: Position { line: 9, character: 10 },
      scope: [Circular *1],
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          expression: [ASTCallExpression]
        }
      ],
      condition: ASTLiteral {
        type: 'BooleanLiteral',
        start: Position { line: 7, character: 8 },
        end: Position { line: 7, character: 13 },
        scope: [Circular *1],
        value: false,
        raw: 'false'
      }
    },
    ASTForGenericStatement {
      type: 'ForGenericStatement',
      start: Position { line: 11, character: 1 },
      end: Position { line: 13, character: 8 },
      scope: [Circular *1],
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          expression: [ASTCallExpression]
        }
      ],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 11, character: 6 },
        end: Position { line: 11, character: 9 },
        scope: [Circular *1],
        name: 'foo'
      },
      iterator: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 11, character: 13 },
        end: Position { line: 11, character: 15 },
        scope: [Circular *1],
        fields: []
      }
    }
  ],
  namespaces: Set(1) { 'foo' },
  assignments: [],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 1, character: 5 },
      end: Position { line: 1, character: 9 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 2, character: 11 },
      end: Position { line: 2, character: 17 },
      scope: [Circular *1],
      value: 'true',
      raw: '\\"true\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 4, character: 11 },
      end: Position { line: 4, character: 18 },
      scope: [Circular *1],
      value: 'false',
      raw: '\\"false\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 7, character: 8 },
      end: Position { line: 7, character: 13 },
      scope: [Circular *1],
      value: false,
      raw: 'false'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 8, character: 11 },
      end: Position { line: 8, character: 16 },
      scope: [Circular *1],
      value: 'foo',
      raw: '\\"foo\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 12, character: 11 },
      end: Position { line: 12, character: 16 },
      scope: [Circular *1],
      value: 'foo',
      raw: '\\"foo\\"'
    }
  ],
  scopes: []
}"
`;

exports[`parse default scripts eol.src unsafe 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 13, character: 9 },
  scope: null,
  body: [
    ASTIfStatement {
      type: 'IfStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 5, character: 7 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTElseClause {
          type: 'ElseClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array]
        }
      ]
    },
    ASTWhileStatement {
      type: 'WhileStatement',
      start: Position { line: 7, character: 1 },
      end: Position { line: 9, character: 10 },
      scope: [Circular *1],
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          expression: [ASTCallExpression]
        }
      ],
      condition: ASTLiteral {
        type: 'BooleanLiteral',
        start: Position { line: 7, character: 8 },
        end: Position { line: 7, character: 13 },
        scope: [Circular *1],
        value: false,
        raw: 'false'
      }
    },
    ASTForGenericStatement {
      type: 'ForGenericStatement',
      start: Position { line: 11, character: 1 },
      end: Position { line: 13, character: 8 },
      scope: [Circular *1],
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          expression: [ASTCallExpression]
        }
      ],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 11, character: 6 },
        end: Position { line: 11, character: 9 },
        scope: [Circular *1],
        name: 'foo'
      },
      iterator: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 11, character: 13 },
        end: Position { line: 11, character: 15 },
        scope: [Circular *1],
        fields: []
      }
    }
  ],
  namespaces: Set(1) { 'foo' },
  assignments: [],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 1, character: 5 },
      end: Position { line: 1, character: 9 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 2, character: 11 },
      end: Position { line: 2, character: 17 },
      scope: [Circular *1],
      value: 'true',
      raw: '\\"true\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 4, character: 11 },
      end: Position { line: 4, character: 18 },
      scope: [Circular *1],
      value: 'false',
      raw: '\\"false\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 7, character: 8 },
      end: Position { line: 7, character: 13 },
      scope: [Circular *1],
      value: false,
      raw: 'false'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 8, character: 11 },
      end: Position { line: 8, character: 16 },
      scope: [Circular *1],
      value: 'foo',
      raw: '\\"foo\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 12, character: 11 },
      end: Position { line: 12, character: 16 },
      scope: [Circular *1],
      value: 'foo',
      raw: '\\"foo\\"'
    }
  ],
  scopes: []
}"
`;

exports[`parse default scripts if-clause.src 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 4, character: 75 },
  scope: null,
  body: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 40 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 7 },
        scope: [Circular *1],
        name: 'params'
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 1, character: 10 },
        end: Position { line: 1, character: 40 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 69 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 3, character: 6 },
        end: Position { line: 3, character: 69 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTEvaluationExpression] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 4, character: 75 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 4, character: 6 },
        end: Position { line: 4, character: 75 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTEvaluationExpression] ]
      }
    }
  ],
  namespaces: Set(1) { 'len' },
  assignments: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 40 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 7 },
        scope: [Circular *1],
        name: 'params'
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 1, character: 10 },
        end: Position { line: 1, character: 40 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue] ]
      }
    }
  ],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 1, character: 11 },
      end: Position { line: 1, character: 23 },
      scope: [Circular *1],
      value: '/home/test',
      raw: '\\"/home/test\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 1, character: 25 },
      end: Position { line: 1, character: 39 },
      scope: [Circular *1],
      value: 'myTestFolder',
      raw: '\\"myTestFolder\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 3, character: 21 },
      end: Position { line: 3, character: 22 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 3, character: 33 },
      end: Position { line: 3, character: 34 },
      scope: [Circular *1],
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 3, character: 39 },
      end: Position { line: 3, character: 43 },
      scope: [Circular *1],
      value: '-h',
      raw: '\\"-h\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 3, character: 54 },
      end: Position { line: 3, character: 55 },
      scope: [Circular *1],
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 3, character: 60 },
      end: Position { line: 3, character: 68 },
      scope: [Circular *1],
      value: '--help',
      raw: '\\"--help\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 4, character: 22 },
      end: Position { line: 4, character: 23 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 4, character: 36 },
      end: Position { line: 4, character: 37 },
      scope: [Circular *1],
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 4, character: 42 },
      end: Position { line: 4, character: 46 },
      scope: [Circular *1],
      value: '-h',
      raw: '\\"-h\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 4, character: 59 },
      end: Position { line: 4, character: 60 },
      scope: [Circular *1],
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 4, character: 65 },
      end: Position { line: 4, character: 73 },
      scope: [Circular *1],
      value: '--help',
      raw: '\\"--help\\"'
    }
  ],
  scopes: []
}"
`;

exports[`parse default scripts if-clause.src unsafe 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 4, character: 75 },
  scope: null,
  body: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 40 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 7 },
        scope: [Circular *1],
        name: 'params'
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 1, character: 10 },
        end: Position { line: 1, character: 40 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 69 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 3, character: 6 },
        end: Position { line: 3, character: 69 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTEvaluationExpression] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 4, character: 75 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 4, character: 6 },
        end: Position { line: 4, character: 75 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTEvaluationExpression] ]
      }
    }
  ],
  namespaces: Set(1) { 'len' },
  assignments: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 40 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 7 },
        scope: [Circular *1],
        name: 'params'
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 1, character: 10 },
        end: Position { line: 1, character: 40 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue] ]
      }
    }
  ],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 1, character: 11 },
      end: Position { line: 1, character: 23 },
      scope: [Circular *1],
      value: '/home/test',
      raw: '\\"/home/test\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 1, character: 25 },
      end: Position { line: 1, character: 39 },
      scope: [Circular *1],
      value: 'myTestFolder',
      raw: '\\"myTestFolder\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 3, character: 21 },
      end: Position { line: 3, character: 22 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 3, character: 33 },
      end: Position { line: 3, character: 34 },
      scope: [Circular *1],
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 3, character: 39 },
      end: Position { line: 3, character: 43 },
      scope: [Circular *1],
      value: '-h',
      raw: '\\"-h\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 3, character: 54 },
      end: Position { line: 3, character: 55 },
      scope: [Circular *1],
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 3, character: 60 },
      end: Position { line: 3, character: 68 },
      scope: [Circular *1],
      value: '--help',
      raw: '\\"--help\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 4, character: 22 },
      end: Position { line: 4, character: 23 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 4, character: 36 },
      end: Position { line: 4, character: 37 },
      scope: [Circular *1],
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 4, character: 42 },
      end: Position { line: 4, character: 46 },
      scope: [Circular *1],
      value: '-h',
      raw: '\\"-h\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 4, character: 59 },
      end: Position { line: 4, character: 60 },
      scope: [Circular *1],
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 4, character: 65 },
      end: Position { line: 4, character: 73 },
      scope: [Circular *1],
      value: '--help',
      raw: '\\"--help\\"'
    }
  ],
  scopes: []
}"
`;

exports[`parse default scripts if-shorthand.src 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 28, character: 13 },
  scope: null,
  body: [
    ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 29 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        }
      ]
    },
    ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 2, character: 1 },
      end: Position { line: 2, character: 49 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTElseClause {
          type: 'ElseShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array]
        }
      ]
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 13 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 3, character: 6 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    ASTIfStatement {
      type: 'IfStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 8, character: 7 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTElseClause {
          type: 'ElseClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array]
        }
      ]
    },
    ASTForGenericStatement {
      type: 'ForGenericStatement',
      start: Position { line: 10, character: 1 },
      end: Position { line: 10, character: 23 },
      scope: [Circular *1],
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          expression: [ASTCallExpression]
        }
      ],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 10, character: 6 },
        end: Position { line: 10, character: 7 },
        scope: [Circular *1],
        name: 'i'
      },
      iterator: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 10, character: 11 },
        end: Position { line: 10, character: 13 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTForGenericStatement {
      type: 'ForGenericStatement',
      start: Position { line: 11, character: 1 },
      end: Position { line: 13, character: 8 },
      scope: [Circular *1],
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          expression: [ASTCallExpression]
        }
      ],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 11, character: 6 },
        end: Position { line: 11, character: 7 },
        scope: [Circular *1],
        name: 'b'
      },
      iterator: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 11, character: 11 },
        end: Position { line: 11, character: 13 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTWhileStatement {
      type: 'WhileStatement',
      start: Position { line: 14, character: 1 },
      end: Position { line: 14, character: 21 },
      scope: [Circular *1],
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          expression: [ASTAssignmentStatement]
        }
      ],
      condition: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 14, character: 10 },
        end: Position { line: 14, character: 14 },
        scope: [Circular *1],
        operator: '<',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'i'
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'b'
        }
      }
    },
    ASTWhileStatement {
      type: 'WhileStatement',
      start: Position { line: 15, character: 1 },
      end: Position { line: 17, character: 10 },
      scope: [Circular *1],
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          expression: [ASTAssignmentStatement]
        }
      ],
      condition: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 15, character: 10 },
        end: Position { line: 15, character: 14 },
        scope: [Circular *1],
        operator: '<',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'b'
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'i'
        }
      }
    },
    <ref *2> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 18, character: 1 },
      end: Position { line: 19, character: 14 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 18, character: 14 },
        end: Position { line: 18, character: 34 },
        scope: [Circular *1],
        body: [ [ASTCallStatement] ],
        namespaces: Set(2) { 'v', 'otherFunction' },
        assignments: [ [Circular *2] ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 18, character: 1 },
        end: Position { line: 18, character: 11 },
        scope: [Circular *1],
        name: 'myFunction'
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 18, character: 14 },
        end: Position { line: 18, character: 34 },
        scope: [Circular *1],
        body: [ [ASTCallStatement] ],
        namespaces: Set(2) { 'v', 'otherFunction' },
        assignments: [ [Circular *2] ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    <ref *3> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 19, character: 1 },
      end: Position { line: 21, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 19, character: 17 },
        end: Position { line: 21, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTCallStatement] ],
        namespaces: Set(1) { 'n' },
        assignments: [ [Circular *3] ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 19, character: 1 },
        end: Position { line: 19, character: 14 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'otherFunction'
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 19, character: 17 },
        end: Position { line: 21, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTCallStatement] ],
        namespaces: Set(1) { 'n' },
        assignments: [ [Circular *3] ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    <ref *4> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 23, character: 1 },
      end: Position { line: 23, character: 25 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 19, character: 17 },
        end: Position { line: 21, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTCallStatement] ],
        namespaces: Set(1) { 'n' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier] ]
      },
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          argument: [ASTLiteral]
        }
      ],
      namespaces: Set(1) { 'm' },
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          name: 'm'
        }
      ]
    },
    <ref *5> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 26, character: 1 },
      end: Position { line: 28, character: 13 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 23, character: 1 },
        end: Position { line: 23, character: 25 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'm' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      },
      body: [
        ASTIfStatement {
          type: 'IfShortcutStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *5],
          clauses: [Array]
        }
      ],
      namespaces: Set(2) { 'b', 'a' },
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *5],
          name: 'b'
        }
      ]
    }
  ],
  namespaces: Set(3) { 'i', 'b', 'myFunction' },
  assignments: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 14, character: 15 },
      end: Position { line: 14, character: 21 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 14, character: 15 },
        end: Position { line: 14, character: 16 },
        scope: [Circular *1],
        name: 'i'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 14, character: 20 },
        end: Position { line: 14, character: 21 },
        scope: [Circular *1],
        operator: '+',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'i'
        },
        right: ASTLiteral {
          type: 'NumericLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: 1,
          raw: '1'
        }
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 16, character: 5 },
      end: Position { line: 16, character: 11 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 16, character: 5 },
        end: Position { line: 16, character: 6 },
        scope: [Circular *1],
        name: 'b'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 16, character: 10 },
        end: Position { line: 16, character: 11 },
        scope: [Circular *1],
        operator: '+',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'b'
        },
        right: ASTLiteral {
          type: 'NumericLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: 1,
          raw: '1'
        }
      }
    }
  ],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 1, character: 5 },
      end: Position { line: 1, character: 9 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 1, character: 22 },
      end: Position { line: 1, character: 28 },
      scope: [Circular *1],
      value: 'true',
      raw: '\\"true\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 2, character: 5 },
      end: Position { line: 2, character: 10 },
      scope: [Circular *1],
      value: false,
      raw: 'false'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 2, character: 23 },
      end: Position { line: 2, character: 29 },
      scope: [Circular *1],
      value: 'true',
      raw: '\\"true\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 2, character: 42 },
      end: Position { line: 2, character: 48 },
      scope: [Circular *1],
      value: 'true',
      raw: '\\"true\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 3, character: 7 },
      end: Position { line: 3, character: 12 },
      scope: [Circular *1],
      value: 'was',
      raw: '\\"was\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 4, character: 5 },
      end: Position { line: 4, character: 10 },
      scope: [Circular *1],
      value: false,
      raw: 'false'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 5, character: 11 },
      end: Position { line: 5, character: 16 },
      scope: [Circular *1],
      value: false,
      raw: 'false'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 7, character: 11 },
      end: Position { line: 7, character: 15 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 14, character: 20 },
      end: Position { line: 14, character: 21 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 16, character: 10 },
      end: Position { line: 16, character: 11 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 23, character: 20 },
      end: Position { line: 23, character: 25 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 23, character: 1 },
        end: Position { line: 23, character: 25 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'm' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      },
      value: 'was',
      raw: '\\"was\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 27, character: 24 },
      end: Position { line: 27, character: 29 },
      scope: <ref *5> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 26, character: 1 },
        end: Position { line: 28, character: 13 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [],
          parameters: [Array]
        },
        body: [ [ASTIfStatement] ],
        namespaces: Set(2) { 'b', 'a' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      },
      value: 'foo',
      raw: '\\"foo\\"'
    }
  ],
  scopes: [
    <ref *6> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 18, character: 14 },
      end: Position { line: 18, character: 34 },
      scope: [Circular *1],
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *6],
          expression: [ASTCallExpression]
        }
      ],
      namespaces: Set(2) { 'v', 'otherFunction' },
      assignments: [
        <ref *2> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *6],
          variable: [ASTIdentifier],
          init: [Circular *6]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *6],
          name: 'v'
        }
      ]
    },
    <ref *7> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 19, character: 17 },
      end: Position { line: 21, character: 13 },
      scope: <ref *6> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 18, character: 14 },
        end: Position { line: 18, character: 34 },
        scope: [Circular *1],
        body: [ [ASTCallStatement] ],
        namespaces: Set(2) { 'v', 'otherFunction' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier] ]
      },
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *7],
          expression: [ASTCallExpression]
        }
      ],
      namespaces: Set(1) { 'n' },
      assignments: [
        <ref *3> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *7],
          variable: [ASTIdentifier],
          init: [Circular *7]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *7],
          name: 'n'
        }
      ]
    },
    <ref *4> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 23, character: 1 },
      end: Position { line: 23, character: 25 },
      scope: <ref *7> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 19, character: 17 },
        end: Position { line: 21, character: 13 },
        scope: <ref *6> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTCallStatement] ],
        namespaces: Set(1) { 'n' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier] ]
      },
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          argument: [ASTLiteral]
        }
      ],
      namespaces: Set(1) { 'm' },
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          name: 'm'
        }
      ]
    },
    <ref *5> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 26, character: 1 },
      end: Position { line: 28, character: 13 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 23, character: 1 },
        end: Position { line: 23, character: 25 },
        scope: <ref *7> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'm' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      },
      body: [
        ASTIfStatement {
          type: 'IfShortcutStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *5],
          clauses: [Array]
        }
      ],
      namespaces: Set(2) { 'b', 'a' },
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *5],
          name: 'b'
        }
      ]
    }
  ]
}"
`;

exports[`parse default scripts if-shorthand.src unsafe 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 28, character: 13 },
  scope: null,
  body: [
    ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 29 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        }
      ]
    },
    ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 2, character: 1 },
      end: Position { line: 2, character: 49 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTElseClause {
          type: 'ElseShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array]
        }
      ]
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 13 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 3, character: 6 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    ASTIfStatement {
      type: 'IfStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 8, character: 7 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTElseClause {
          type: 'ElseClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array]
        }
      ]
    },
    ASTForGenericStatement {
      type: 'ForGenericStatement',
      start: Position { line: 10, character: 1 },
      end: Position { line: 10, character: 23 },
      scope: [Circular *1],
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          expression: [ASTCallExpression]
        }
      ],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 10, character: 6 },
        end: Position { line: 10, character: 7 },
        scope: [Circular *1],
        name: 'i'
      },
      iterator: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 10, character: 11 },
        end: Position { line: 10, character: 13 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTForGenericStatement {
      type: 'ForGenericStatement',
      start: Position { line: 11, character: 1 },
      end: Position { line: 13, character: 8 },
      scope: [Circular *1],
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          expression: [ASTCallExpression]
        }
      ],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 11, character: 6 },
        end: Position { line: 11, character: 7 },
        scope: [Circular *1],
        name: 'b'
      },
      iterator: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 11, character: 11 },
        end: Position { line: 11, character: 13 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTWhileStatement {
      type: 'WhileStatement',
      start: Position { line: 14, character: 1 },
      end: Position { line: 14, character: 21 },
      scope: [Circular *1],
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          expression: [ASTAssignmentStatement]
        }
      ],
      condition: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 14, character: 10 },
        end: Position { line: 14, character: 14 },
        scope: [Circular *1],
        operator: '<',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'i'
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'b'
        }
      }
    },
    ASTWhileStatement {
      type: 'WhileStatement',
      start: Position { line: 15, character: 1 },
      end: Position { line: 17, character: 10 },
      scope: [Circular *1],
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          expression: [ASTAssignmentStatement]
        }
      ],
      condition: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 15, character: 10 },
        end: Position { line: 15, character: 14 },
        scope: [Circular *1],
        operator: '<',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'b'
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'i'
        }
      }
    },
    <ref *2> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 18, character: 1 },
      end: Position { line: 19, character: 14 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 18, character: 14 },
        end: Position { line: 18, character: 34 },
        scope: [Circular *1],
        body: [ [ASTCallStatement] ],
        namespaces: Set(2) { 'v', 'otherFunction' },
        assignments: [ [Circular *2] ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 18, character: 1 },
        end: Position { line: 18, character: 11 },
        scope: [Circular *1],
        name: 'myFunction'
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 18, character: 14 },
        end: Position { line: 18, character: 34 },
        scope: [Circular *1],
        body: [ [ASTCallStatement] ],
        namespaces: Set(2) { 'v', 'otherFunction' },
        assignments: [ [Circular *2] ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    <ref *3> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 19, character: 1 },
      end: Position { line: 21, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 19, character: 17 },
        end: Position { line: 21, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTCallStatement] ],
        namespaces: Set(1) { 'n' },
        assignments: [ [Circular *3] ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 19, character: 1 },
        end: Position { line: 19, character: 14 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'otherFunction'
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 19, character: 17 },
        end: Position { line: 21, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTCallStatement] ],
        namespaces: Set(1) { 'n' },
        assignments: [ [Circular *3] ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    <ref *4> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 23, character: 1 },
      end: Position { line: 23, character: 25 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 19, character: 17 },
        end: Position { line: 21, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTCallStatement] ],
        namespaces: Set(1) { 'n' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier] ]
      },
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          argument: [ASTLiteral]
        }
      ],
      namespaces: Set(1) { 'm' },
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          name: 'm'
        }
      ]
    },
    <ref *5> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 26, character: 1 },
      end: Position { line: 28, character: 13 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 23, character: 1 },
        end: Position { line: 23, character: 25 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'm' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      },
      body: [
        ASTIfStatement {
          type: 'IfShortcutStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *5],
          clauses: [Array]
        }
      ],
      namespaces: Set(2) { 'b', 'a' },
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *5],
          name: 'b'
        }
      ]
    }
  ],
  namespaces: Set(3) { 'i', 'b', 'myFunction' },
  assignments: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 14, character: 15 },
      end: Position { line: 14, character: 21 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 14, character: 15 },
        end: Position { line: 14, character: 16 },
        scope: [Circular *1],
        name: 'i'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 14, character: 20 },
        end: Position { line: 14, character: 21 },
        scope: [Circular *1],
        operator: '+',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'i'
        },
        right: ASTLiteral {
          type: 'NumericLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: 1,
          raw: '1'
        }
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 16, character: 5 },
      end: Position { line: 16, character: 11 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 16, character: 5 },
        end: Position { line: 16, character: 6 },
        scope: [Circular *1],
        name: 'b'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 16, character: 10 },
        end: Position { line: 16, character: 11 },
        scope: [Circular *1],
        operator: '+',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'b'
        },
        right: ASTLiteral {
          type: 'NumericLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: 1,
          raw: '1'
        }
      }
    }
  ],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 1, character: 5 },
      end: Position { line: 1, character: 9 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 1, character: 22 },
      end: Position { line: 1, character: 28 },
      scope: [Circular *1],
      value: 'true',
      raw: '\\"true\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 2, character: 5 },
      end: Position { line: 2, character: 10 },
      scope: [Circular *1],
      value: false,
      raw: 'false'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 2, character: 23 },
      end: Position { line: 2, character: 29 },
      scope: [Circular *1],
      value: 'true',
      raw: '\\"true\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 2, character: 42 },
      end: Position { line: 2, character: 48 },
      scope: [Circular *1],
      value: 'true',
      raw: '\\"true\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 3, character: 7 },
      end: Position { line: 3, character: 12 },
      scope: [Circular *1],
      value: 'was',
      raw: '\\"was\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 4, character: 5 },
      end: Position { line: 4, character: 10 },
      scope: [Circular *1],
      value: false,
      raw: 'false'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 5, character: 11 },
      end: Position { line: 5, character: 16 },
      scope: [Circular *1],
      value: false,
      raw: 'false'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 7, character: 11 },
      end: Position { line: 7, character: 15 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 14, character: 20 },
      end: Position { line: 14, character: 21 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 16, character: 10 },
      end: Position { line: 16, character: 11 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 23, character: 20 },
      end: Position { line: 23, character: 25 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 23, character: 1 },
        end: Position { line: 23, character: 25 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'm' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      },
      value: 'was',
      raw: '\\"was\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 27, character: 24 },
      end: Position { line: 27, character: 29 },
      scope: <ref *5> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 26, character: 1 },
        end: Position { line: 28, character: 13 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [],
          parameters: [Array]
        },
        body: [ [ASTIfStatement] ],
        namespaces: Set(2) { 'b', 'a' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      },
      value: 'foo',
      raw: '\\"foo\\"'
    }
  ],
  scopes: [
    <ref *6> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 18, character: 14 },
      end: Position { line: 18, character: 34 },
      scope: [Circular *1],
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *6],
          expression: [ASTCallExpression]
        }
      ],
      namespaces: Set(2) { 'v', 'otherFunction' },
      assignments: [
        <ref *2> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *6],
          variable: [ASTIdentifier],
          init: [Circular *6]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *6],
          name: 'v'
        }
      ]
    },
    <ref *7> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 19, character: 17 },
      end: Position { line: 21, character: 13 },
      scope: <ref *6> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 18, character: 14 },
        end: Position { line: 18, character: 34 },
        scope: [Circular *1],
        body: [ [ASTCallStatement] ],
        namespaces: Set(2) { 'v', 'otherFunction' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier] ]
      },
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *7],
          expression: [ASTCallExpression]
        }
      ],
      namespaces: Set(1) { 'n' },
      assignments: [
        <ref *3> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *7],
          variable: [ASTIdentifier],
          init: [Circular *7]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *7],
          name: 'n'
        }
      ]
    },
    <ref *4> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 23, character: 1 },
      end: Position { line: 23, character: 25 },
      scope: <ref *7> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 19, character: 17 },
        end: Position { line: 21, character: 13 },
        scope: <ref *6> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTCallStatement] ],
        namespaces: Set(1) { 'n' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier] ]
      },
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          argument: [ASTLiteral]
        }
      ],
      namespaces: Set(1) { 'm' },
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          name: 'm'
        }
      ]
    },
    <ref *5> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 26, character: 1 },
      end: Position { line: 28, character: 13 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 23, character: 1 },
        end: Position { line: 23, character: 25 },
        scope: <ref *7> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'm' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      },
      body: [
        ASTIfStatement {
          type: 'IfShortcutStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *5],
          clauses: [Array]
        }
      ],
      namespaces: Set(2) { 'b', 'a' },
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *5],
          name: 'b'
        }
      ]
    }
  ]
}"
`;

exports[`parse default scripts invalid code 1`] = `Array []`;

exports[`parse default scripts invalid code 2`] = `
Array [
  [Error: Unexpected value ; at line 2. Expected: )],
  [Error: Unexpected value ) at line 4. Expected: =],
  [Error: Unexpected expression at line 4.],
  [Error: Unexpected assignment or call at line 8.],
  [Error: Unexpected end of file at line 9.],
]
`;

exports[`parse default scripts negation.src 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 5, character: 11 },
  scope: null,
  body: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 24 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 5 },
        scope: [Circular *1],
        name: 'test'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 1, character: 11 },
        end: Position { line: 1, character: 24 },
        scope: [Circular *1],
        operator: '+',
        left: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '+',
          left: [ASTEvaluationExpression],
          right: [ASTUnaryExpression]
        },
        right: ASTUnaryExpression {
          type: 'BinaryNegatedExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          argument: [ASTLiteral],
          operator: '+'
        }
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 2, character: 1 },
      end: Position { line: 2, character: 35 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 2, character: 1 },
        end: Position { line: 2, character: 4 },
        scope: [Circular *1],
        name: 'foo'
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 2, character: 7 },
        end: Position { line: 2, character: 35 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 4, character: 12 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 4, character: 6 },
        end: Position { line: 4, character: 12 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTIdentifier] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 5, character: 1 },
      end: Position { line: 5, character: 11 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 5, character: 6 },
        end: Position { line: 5, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTIdentifier] ]
      }
    }
  ],
  namespaces: Set(2) { 'test', 'foo' },
  assignments: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 24 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 5 },
        scope: [Circular *1],
        name: 'test'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 1, character: 11 },
        end: Position { line: 1, character: 24 },
        scope: [Circular *1],
        operator: '+',
        left: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '+',
          left: [ASTEvaluationExpression],
          right: [ASTUnaryExpression]
        },
        right: ASTUnaryExpression {
          type: 'BinaryNegatedExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          argument: [ASTLiteral],
          operator: '+'
        }
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 2, character: 1 },
      end: Position { line: 2, character: 35 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 2, character: 1 },
        end: Position { line: 2, character: 4 },
        scope: [Circular *1],
        name: 'foo'
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 2, character: 7 },
        end: Position { line: 2, character: 35 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    }
  ],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 1, character: 9 },
      end: Position { line: 1, character: 10 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 1, character: 13 },
      end: Position { line: 1, character: 14 },
      scope: [Circular *1],
      value: 2,
      raw: '2'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 1, character: 18 },
      end: Position { line: 1, character: 19 },
      scope: [Circular *1],
      value: 2,
      raw: '2'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 1, character: 23 },
      end: Position { line: 1, character: 24 },
      scope: [Circular *1],
      value: 3,
      raw: '3'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 2, character: 9 },
      end: Position { line: 2, character: 10 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 2, character: 13 },
      end: Position { line: 2, character: 14 },
      scope: [Circular *1],
      value: 2,
      raw: '2'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 2, character: 17 },
      end: Position { line: 2, character: 18 },
      scope: [Circular *1],
      value: 4,
      raw: '4'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 2, character: 22 },
      end: Position { line: 2, character: 23 },
      scope: [Circular *1],
      value: 2,
      raw: '2'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 2, character: 28 },
      end: Position { line: 2, character: 29 },
      scope: [Circular *1],
      value: 4,
      raw: '4'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 2, character: 33 },
      end: Position { line: 2, character: 34 },
      scope: [Circular *1],
      value: 6,
      raw: '6'
    }
  ],
  scopes: []
}"
`;

exports[`parse default scripts negation.src unsafe 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 5, character: 11 },
  scope: null,
  body: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 24 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 5 },
        scope: [Circular *1],
        name: 'test'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 1, character: 11 },
        end: Position { line: 1, character: 24 },
        scope: [Circular *1],
        operator: '+',
        left: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '+',
          left: [ASTEvaluationExpression],
          right: [ASTUnaryExpression]
        },
        right: ASTUnaryExpression {
          type: 'BinaryNegatedExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          argument: [ASTLiteral],
          operator: '+'
        }
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 2, character: 1 },
      end: Position { line: 2, character: 35 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 2, character: 1 },
        end: Position { line: 2, character: 4 },
        scope: [Circular *1],
        name: 'foo'
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 2, character: 7 },
        end: Position { line: 2, character: 35 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 4, character: 12 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 4, character: 6 },
        end: Position { line: 4, character: 12 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTIdentifier] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 5, character: 1 },
      end: Position { line: 5, character: 11 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 5, character: 6 },
        end: Position { line: 5, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTIdentifier] ]
      }
    }
  ],
  namespaces: Set(2) { 'test', 'foo' },
  assignments: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 24 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 5 },
        scope: [Circular *1],
        name: 'test'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 1, character: 11 },
        end: Position { line: 1, character: 24 },
        scope: [Circular *1],
        operator: '+',
        left: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '+',
          left: [ASTEvaluationExpression],
          right: [ASTUnaryExpression]
        },
        right: ASTUnaryExpression {
          type: 'BinaryNegatedExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          argument: [ASTLiteral],
          operator: '+'
        }
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 2, character: 1 },
      end: Position { line: 2, character: 35 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 2, character: 1 },
        end: Position { line: 2, character: 4 },
        scope: [Circular *1],
        name: 'foo'
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 2, character: 7 },
        end: Position { line: 2, character: 35 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    }
  ],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 1, character: 9 },
      end: Position { line: 1, character: 10 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 1, character: 13 },
      end: Position { line: 1, character: 14 },
      scope: [Circular *1],
      value: 2,
      raw: '2'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 1, character: 18 },
      end: Position { line: 1, character: 19 },
      scope: [Circular *1],
      value: 2,
      raw: '2'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 1, character: 23 },
      end: Position { line: 1, character: 24 },
      scope: [Circular *1],
      value: 3,
      raw: '3'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 2, character: 9 },
      end: Position { line: 2, character: 10 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 2, character: 13 },
      end: Position { line: 2, character: 14 },
      scope: [Circular *1],
      value: 2,
      raw: '2'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 2, character: 17 },
      end: Position { line: 2, character: 18 },
      scope: [Circular *1],
      value: 4,
      raw: '4'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 2, character: 22 },
      end: Position { line: 2, character: 23 },
      scope: [Circular *1],
      value: 2,
      raw: '2'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 2, character: 28 },
      end: Position { line: 2, character: 29 },
      scope: [Circular *1],
      value: 4,
      raw: '4'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 2, character: 33 },
      end: Position { line: 2, character: 34 },
      scope: [Circular *1],
      value: 6,
      raw: '6'
    }
  ],
  scopes: []
}"
`;

exports[`parse default scripts obj-init.src 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 21, character: 14 },
  scope: null,
  body: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 26 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 18 },
        scope: [Circular *1],
        name: 'valueOfIdentifier'
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 1, character: 21 },
        end: Position { line: 1, character: 26 },
        scope: [Circular *1],
        value: 'foo',
        raw: '\\"foo\\"'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 9, character: 2 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 3, character: 1 },
        end: Position { line: 3, character: 9 },
        scope: [Circular *1],
        name: 'myObject'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 3, character: 12 },
        end: Position { line: 9, character: 2 },
        scope: [Circular *1],
        fields: [ [ASTMapKeyString], [ASTMapKeyString], [ASTMapKeyString] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 11, character: 1 },
      end: Position { line: 11, character: 62 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 11, character: 6 },
        end: Position { line: 11, character: 62 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTListConstructorExpression] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 13, character: 1 },
      end: Position { line: 19, character: 2 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 13, character: 1 },
        end: Position { line: 13, character: 7 },
        scope: [Circular *1],
        name: 'myList'
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 13, character: 10 },
        end: Position { line: 19, character: 2 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 21, character: 1 },
      end: Position { line: 21, character: 14 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 21, character: 6 },
        end: Position { line: 21, character: 14 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTIdentifier] ]
      }
    }
  ],
  namespaces: Set(7) {
    'valueOfIdentifier',
    'myObject',
    'test',
    'another',
    'value',
    'idtf',
    'myList'
  },
  assignments: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 26 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 18 },
        scope: [Circular *1],
        name: 'valueOfIdentifier'
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 1, character: 21 },
        end: Position { line: 1, character: 26 },
        scope: [Circular *1],
        value: 'foo',
        raw: '\\"foo\\"'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 9, character: 2 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 3, character: 1 },
        end: Position { line: 3, character: 9 },
        scope: [Circular *1],
        name: 'myObject'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 3, character: 12 },
        end: Position { line: 9, character: 2 },
        scope: [Circular *1],
        fields: [ [ASTMapKeyString], [ASTMapKeyString], [ASTMapKeyString] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 13, character: 1 },
      end: Position { line: 19, character: 2 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 13, character: 1 },
        end: Position { line: 13, character: 7 },
        scope: [Circular *1],
        name: 'myList'
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 13, character: 10 },
        end: Position { line: 19, character: 2 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    }
  ],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 1, character: 21 },
      end: Position { line: 1, character: 26 },
      scope: [Circular *1],
      value: 'foo',
      raw: '\\"foo\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 4, character: 5 },
      end: Position { line: 4, character: 11 },
      scope: [Circular *1],
      value: 'test',
      raw: '\\"test\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 5, character: 9 },
      end: Position { line: 5, character: 18 },
      scope: [Circular *1],
      value: 'another',
      raw: '\\"another\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 5, character: 20 },
      end: Position { line: 5, character: 25 },
      scope: [Circular *1],
      value: '123',
      raw: '\\"123\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 7, character: 5 },
      end: Position { line: 7, character: 12 },
      scope: [Circular *1],
      value: 'value',
      raw: '\\"value\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 7, character: 14 },
      end: Position { line: 7, character: 19 },
      scope: [Circular *1],
      value: '123',
      raw: '\\"123\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 8, character: 5 },
      end: Position { line: 8, character: 11 },
      scope: [Circular *1],
      value: 'idtf',
      raw: '\\"idtf\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 15, character: 9 },
      end: Position { line: 15, character: 18 },
      scope: [Circular *1],
      value: 'another',
      raw: '\\"another\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 15, character: 20 },
      end: Position { line: 15, character: 25 },
      scope: [Circular *1],
      value: '123',
      raw: '\\"123\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 17, character: 5 },
      end: Position { line: 17, character: 10 },
      scope: [Circular *1],
      value: '123',
      raw: '\\"123\\"'
    }
  ],
  scopes: []
}"
`;

exports[`parse default scripts obj-init.src unsafe 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 21, character: 14 },
  scope: null,
  body: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 26 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 18 },
        scope: [Circular *1],
        name: 'valueOfIdentifier'
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 1, character: 21 },
        end: Position { line: 1, character: 26 },
        scope: [Circular *1],
        value: 'foo',
        raw: '\\"foo\\"'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 9, character: 2 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 3, character: 1 },
        end: Position { line: 3, character: 9 },
        scope: [Circular *1],
        name: 'myObject'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 3, character: 12 },
        end: Position { line: 9, character: 2 },
        scope: [Circular *1],
        fields: [ [ASTMapKeyString], [ASTMapKeyString], [ASTMapKeyString] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 11, character: 1 },
      end: Position { line: 11, character: 62 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 11, character: 6 },
        end: Position { line: 11, character: 62 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTListConstructorExpression] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 13, character: 1 },
      end: Position { line: 19, character: 2 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 13, character: 1 },
        end: Position { line: 13, character: 7 },
        scope: [Circular *1],
        name: 'myList'
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 13, character: 10 },
        end: Position { line: 19, character: 2 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 21, character: 1 },
      end: Position { line: 21, character: 14 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 21, character: 6 },
        end: Position { line: 21, character: 14 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTIdentifier] ]
      }
    }
  ],
  namespaces: Set(7) {
    'valueOfIdentifier',
    'myObject',
    'test',
    'another',
    'value',
    'idtf',
    'myList'
  },
  assignments: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 26 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 18 },
        scope: [Circular *1],
        name: 'valueOfIdentifier'
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 1, character: 21 },
        end: Position { line: 1, character: 26 },
        scope: [Circular *1],
        value: 'foo',
        raw: '\\"foo\\"'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 9, character: 2 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 3, character: 1 },
        end: Position { line: 3, character: 9 },
        scope: [Circular *1],
        name: 'myObject'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 3, character: 12 },
        end: Position { line: 9, character: 2 },
        scope: [Circular *1],
        fields: [ [ASTMapKeyString], [ASTMapKeyString], [ASTMapKeyString] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 13, character: 1 },
      end: Position { line: 19, character: 2 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 13, character: 1 },
        end: Position { line: 13, character: 7 },
        scope: [Circular *1],
        name: 'myList'
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 13, character: 10 },
        end: Position { line: 19, character: 2 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    }
  ],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 1, character: 21 },
      end: Position { line: 1, character: 26 },
      scope: [Circular *1],
      value: 'foo',
      raw: '\\"foo\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 4, character: 5 },
      end: Position { line: 4, character: 11 },
      scope: [Circular *1],
      value: 'test',
      raw: '\\"test\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 5, character: 9 },
      end: Position { line: 5, character: 18 },
      scope: [Circular *1],
      value: 'another',
      raw: '\\"another\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 5, character: 20 },
      end: Position { line: 5, character: 25 },
      scope: [Circular *1],
      value: '123',
      raw: '\\"123\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 7, character: 5 },
      end: Position { line: 7, character: 12 },
      scope: [Circular *1],
      value: 'value',
      raw: '\\"value\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 7, character: 14 },
      end: Position { line: 7, character: 19 },
      scope: [Circular *1],
      value: '123',
      raw: '\\"123\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 8, character: 5 },
      end: Position { line: 8, character: 11 },
      scope: [Circular *1],
      value: 'idtf',
      raw: '\\"idtf\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 15, character: 9 },
      end: Position { line: 15, character: 18 },
      scope: [Circular *1],
      value: 'another',
      raw: '\\"another\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 15, character: 20 },
      end: Position { line: 15, character: 25 },
      scope: [Circular *1],
      value: '123',
      raw: '\\"123\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 17, character: 5 },
      end: Position { line: 17, character: 10 },
      scope: [Circular *1],
      value: '123',
      raw: '\\"123\\"'
    }
  ],
  scopes: []
}"
`;

exports[`parse default scripts password-generator.src 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 65, character: 14 },
  scope: null,
  body: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 23 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 18 },
        scope: [Circular *1],
        name: 'PasswordGenerator'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 21 },
        end: Position { line: 1, character: 23 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 43 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 3, character: 18 },
        end: Position { line: 3, character: 40 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'MAX_PASSWORD_LENGTH'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 3, character: 41 },
        end: Position { line: 3, character: 43 },
        scope: [Circular *1],
        value: 15,
        raw: '15'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 4, character: 71 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 4, character: 18 },
        end: Position { line: 4, character: 42 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'ALPHABETIC_CHARACTERS'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 4, character: 43 },
        end: Position { line: 4, character: 71 },
        scope: [Circular *1],
        value: 'qwertzuiopasdfghjklyxcvbnm',
        raw: '\\"qwertzuiopasdfghjklyxcvbnm\\"'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 5, character: 1 },
      end: Position { line: 5, character: 51 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 5, character: 18 },
        end: Position { line: 5, character: 38 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'NUMBER_CHARACTERS'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 5, character: 39 },
        end: Position { line: 5, character: 51 },
        scope: [Circular *1],
        value: '0123456789',
        raw: '\\"0123456789\\"'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 6, character: 1 },
      end: Position { line: 6, character: 160 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 6, character: 18 },
        end: Position { line: 6, character: 34 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'ALPHA_NUMERIC'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 6, character: 75 },
        end: Position { line: 6, character: 160 },
        scope: [Circular *1],
        operator: '+',
        left: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '+',
          left: [ASTMemberExpression],
          right: [ASTMemberExpression]
        },
        right: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        }
      }
    },
    <ref *2> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 8, character: 1 },
      end: Position { line: 13, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 33 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(6) {
          'me',
          'buffer',
          'characters',
          'ALPHA_NUMERIC',
          'PasswordGenerator',
          'increaseBuffer'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *2]
        ],
        parameters: []
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 8, character: 18 },
        end: Position { line: 8, character: 32 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'constructor'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 33 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(6) {
          'me',
          'buffer',
          'characters',
          'ALPHA_NUMERIC',
          'PasswordGenerator',
          'increaseBuffer'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *2]
        ],
        parameters: []
      }
    },
    <ref *3> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 15, character: 1 },
      end: Position { line: 31, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(12) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'len',
          'p',
          'push',
          'increaseBuffer',
          'PasswordGenerator',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *3]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 15, character: 18 },
        end: Position { line: 15, character: 35 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'increaseBuffer'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'PasswordGenerator'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(12) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'len',
          'p',
          'push',
          'increaseBuffer',
          'PasswordGenerator',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *3]
        ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    <ref *4> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 33, character: 1 },
      end: Position { line: 52, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(18) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'len',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH',
          'pgen',
          'PasswordGenerator',
          'constructor',
          'max',
          'result',
          'push',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *4],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 33, character: 18 },
        end: Position { line: 33, character: 24 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'gen'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'PasswordGenerator'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(18) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'len',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH',
          'pgen',
          'PasswordGenerator',
          'constructor',
          'max',
          'result',
          'push',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *4],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      }
    },
    <ref *5> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 54, character: 1 },
      end: Position { line: 54, character: 45 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(18) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'len',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH',
          'pgen',
          'PasswordGenerator',
          'constructor',
          'max',
          'result',
          'push',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *5],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 54, character: 1 },
        end: Position { line: 54, character: 5 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        name: 'pgen'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 54, character: 43 },
        end: Position { line: 54, character: 45 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTUnaryExpression]
        },
        arguments: []
      }
    },
    <ref *6> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 56, character: 1 },
      end: Position { line: 56, character: 10 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(18) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'len',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH',
          'pgen',
          'PasswordGenerator',
          'constructor',
          'max',
          'result',
          'push',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *6],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 56, character: 1 },
        end: Position { line: 56, character: 6 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        name: 'index'
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 56, character: 9 },
        end: Position { line: 56, character: 10 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        value: 0,
        raw: '0'
      }
    },
    <ref *7> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 57, character: 1 },
      end: Position { line: 57, character: 9 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(18) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'len',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH',
          'pgen',
          'PasswordGenerator',
          'constructor',
          'max',
          'result',
          'push',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *7],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 57, character: 1 },
        end: Position { line: 57, character: 4 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        name: 'max'
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 57, character: 7 },
        end: Position { line: 57, character: 9 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        value: 10,
        raw: '10'
      }
    },
    <ref *8> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 58, character: 1 },
      end: Position { line: 58, character: 12 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(18) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'len',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH',
          'pgen',
          'PasswordGenerator',
          'constructor',
          'max',
          'result',
          'push',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *8],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 58, character: 1 },
        end: Position { line: 58, character: 7 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        name: 'result'
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 58, character: 10 },
        end: Position { line: 58, character: 12 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        fields: []
      }
    },
    ASTWhileStatement {
      type: 'WhileStatement',
      start: Position { line: 60, character: 1 },
      end: Position { line: 63, character: 10 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(18) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'len',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH',
          'pgen',
          'PasswordGenerator',
          'constructor',
          'max',
          'result',
          'push',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          expression: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        }
      ],
      condition: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 60, character: 14 },
        end: Position { line: 60, character: 20 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        operator: '<',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'index'
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'max'
        }
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 65, character: 1 },
      end: Position { line: 65, character: 14 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(18) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'len',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH',
          'pgen',
          'PasswordGenerator',
          'constructor',
          'max',
          'result',
          'push',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 65, character: 6 },
        end: Position { line: 65, character: 14 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'print'
        },
        arguments: [ [ASTIdentifier] ]
      }
    }
  ],
  namespaces: Set(7) {
    'PasswordGenerator',
    'MAX_PASSWORD_LENGTH',
    'ALPHABETIC_CHARACTERS',
    'NUMBER_CHARACTERS',
    'ALPHA_NUMERIC',
    'upper',
    'constructor'
  },
  assignments: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 23 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 18 },
        scope: [Circular *1],
        name: 'PasswordGenerator'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 21 },
        end: Position { line: 1, character: 23 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 43 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 3, character: 18 },
        end: Position { line: 3, character: 40 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'MAX_PASSWORD_LENGTH'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 3, character: 41 },
        end: Position { line: 3, character: 43 },
        scope: [Circular *1],
        value: 15,
        raw: '15'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 4, character: 71 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 4, character: 18 },
        end: Position { line: 4, character: 42 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'ALPHABETIC_CHARACTERS'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 4, character: 43 },
        end: Position { line: 4, character: 71 },
        scope: [Circular *1],
        value: 'qwertzuiopasdfghjklyxcvbnm',
        raw: '\\"qwertzuiopasdfghjklyxcvbnm\\"'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 5, character: 1 },
      end: Position { line: 5, character: 51 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 5, character: 18 },
        end: Position { line: 5, character: 38 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'NUMBER_CHARACTERS'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 5, character: 39 },
        end: Position { line: 5, character: 51 },
        scope: [Circular *1],
        value: '0123456789',
        raw: '\\"0123456789\\"'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 6, character: 1 },
      end: Position { line: 6, character: 160 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 6, character: 18 },
        end: Position { line: 6, character: 34 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'ALPHA_NUMERIC'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 6, character: 75 },
        end: Position { line: 6, character: 160 },
        scope: [Circular *1],
        operator: '+',
        left: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '+',
          left: [ASTMemberExpression],
          right: [ASTMemberExpression]
        },
        right: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        }
      }
    }
  ],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 3, character: 41 },
      end: Position { line: 3, character: 43 },
      scope: [Circular *1],
      value: 15,
      raw: '15'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 4, character: 43 },
      end: Position { line: 4, character: 71 },
      scope: [Circular *1],
      value: 'qwertzuiopasdfghjklyxcvbnm',
      raw: '\\"qwertzuiopasdfghjklyxcvbnm\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 5, character: 39 },
      end: Position { line: 5, character: 51 },
      scope: [Circular *1],
      value: '0123456789',
      raw: '\\"0123456789\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 10, character: 18 },
      end: Position { line: 10, character: 19 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 33 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(6) {
          'me',
          'buffer',
          'characters',
          'ALPHA_NUMERIC',
          'PasswordGenerator',
          'increaseBuffer'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NilLiteral',
      start: Position { line: 19, character: 14 },
      end: Position { line: 19, character: 18 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(12) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'len',
          'p',
          'push',
          'increaseBuffer',
          'PasswordGenerator',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      value: null,
      raw: 'null'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 19, character: 53 },
      end: Position { line: 19, character: 54 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(12) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'len',
          'p',
          'push',
          'increaseBuffer',
          'PasswordGenerator',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 21, character: 13 },
      end: Position { line: 21, character: 14 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(12) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'len',
          'p',
          'push',
          'increaseBuffer',
          'PasswordGenerator',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 24, character: 32 },
      end: Position { line: 24, character: 33 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(12) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'len',
          'p',
          'push',
          'increaseBuffer',
          'PasswordGenerator',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 25, character: 18 },
      end: Position { line: 25, character: 19 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(12) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'len',
          'p',
          'push',
          'increaseBuffer',
          'PasswordGenerator',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 26, character: 36 },
      end: Position { line: 26, character: 37 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(12) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'len',
          'p',
          'push',
          'increaseBuffer',
          'PasswordGenerator',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 28, character: 35 },
      end: Position { line: 28, character: 36 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(12) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'len',
          'p',
          'push',
          'increaseBuffer',
          'PasswordGenerator',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 37, character: 16 },
      end: Position { line: 37, character: 18 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(18) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'len',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH',
          'pgen',
          'PasswordGenerator',
          'constructor',
          'max',
          'result',
          'push',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      value: '',
      raw: '\\"\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 38, character: 13 },
      end: Position { line: 38, character: 14 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(18) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'len',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH',
          'pgen',
          'PasswordGenerator',
          'constructor',
          'max',
          'result',
          'push',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 43, character: 46 },
      end: Position { line: 43, character: 47 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(18) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'len',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH',
          'pgen',
          'PasswordGenerator',
          'constructor',
          'max',
          'result',
          'push',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 44, character: 25 },
      end: Position { line: 44, character: 26 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(18) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'len',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH',
          'pgen',
          'PasswordGenerator',
          'constructor',
          'max',
          'result',
          'push',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NilLiteral',
      start: Position { line: 48, character: 16 },
      end: Position { line: 48, character: 20 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(18) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'len',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH',
          'pgen',
          'PasswordGenerator',
          'constructor',
          'max',
          'result',
          'push',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      value: null,
      raw: 'null'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 56, character: 9 },
      end: Position { line: 56, character: 10 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(18) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'len',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH',
          'pgen',
          'PasswordGenerator',
          'constructor',
          'max',
          'result',
          'push',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 57, character: 7 },
      end: Position { line: 57, character: 9 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(18) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'len',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH',
          'pgen',
          'PasswordGenerator',
          'constructor',
          'max',
          'result',
          'push',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      value: 10,
      raw: '10'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 62, character: 21 },
      end: Position { line: 62, character: 22 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(18) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'len',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH',
          'pgen',
          'PasswordGenerator',
          'constructor',
          'max',
          'result',
          'push',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      value: 1,
      raw: '1'
    }
  ],
  scopes: [
    <ref *9> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 8, character: 33 },
      end: Position { line: 13, character: 13 },
      scope: [Circular *1],
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          variable: [ASTMemberExpression],
          init: [ASTListConstructorExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          variable: [ASTMemberExpression],
          init: [ASTMemberExpression]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          argument: [ASTIdentifier]
        }
      ],
      namespaces: Set(6) {
        'me',
        'buffer',
        'characters',
        'ALPHA_NUMERIC',
        'PasswordGenerator',
        'increaseBuffer'
      },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          variable: [ASTMemberExpression],
          init: [ASTListConstructorExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          variable: [ASTMemberExpression],
          init: [ASTMemberExpression]
        },
        <ref *2> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          variable: [ASTMemberExpression],
          init: [Circular *9]
        }
      ],
      parameters: []
    },
    <ref *10> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 15, character: 36 },
      end: Position { line: 31, character: 13 },
      scope: <ref *9> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 33 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(6) {
          'me',
          'buffer',
          'characters',
          'ALPHA_NUMERIC',
          'PasswordGenerator',
          'increaseBuffer'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTIfStatement {
          type: 'IfShortcutStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          clauses: [Array]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          variable: [ASTIdentifier],
          init: [ASTIndexExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          variable: [ASTIndexExpression],
          init: [ASTIdentifier]
        },
        ASTIfStatement {
          type: 'IfStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          clauses: [Array]
        }
      ],
      namespaces: Set(12) {
        'i',
        'me',
        'currentCharBuffer',
        'buffer',
        'maxBufferSize',
        'characters',
        'len',
        'p',
        'push',
        'increaseBuffer',
        'PasswordGenerator',
        'gen'
      },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          variable: [ASTIdentifier],
          init: [ASTIndexExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          variable: [ASTIndexExpression],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          variable: [ASTIndexExpression],
          init: [ASTLiteral]
        },
        <ref *3> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          variable: [ASTMemberExpression],
          init: [Circular *10]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          name: 'i'
        }
      ]
    },
    <ref *11> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 33, character: 25 },
      end: Position { line: 52, character: 13 },
      scope: <ref *10> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: <ref *9> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(12) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'len',
          'p',
          'push',
          'increaseBuffer',
          'PasswordGenerator',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTWhileStatement {
          type: 'WhileStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          body: [Array],
          condition: [ASTEvaluationExpression]
        },
        ASTIfStatement {
          type: 'IfStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          clauses: [Array]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          argument: [ASTIdentifier]
        }
      ],
      namespaces: Set(18) {
        'me',
        'currentCharBuffer',
        'buffer',
        'generatorCharacters',
        'characters',
        'password',
        'index',
        'len',
        'pointer',
        'increaseBuffer',
        'MAX_PASSWORD_LENGTH',
        'pgen',
        'PasswordGenerator',
        'constructor',
        'max',
        'result',
        'push',
        'gen'
      },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          variable: [ASTIdentifier],
          init: [ASTIndexExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        <ref *4> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          variable: [ASTMemberExpression],
          init: [Circular *11]
        },
        <ref *5> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        <ref *6> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        <ref *7> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        <ref *8> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          variable: [ASTIdentifier],
          init: [ASTListConstructorExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        }
      ],
      parameters: []
    }
  ]
}"
`;

exports[`parse default scripts password-generator.src unsafe 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 65, character: 14 },
  scope: null,
  body: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 23 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 18 },
        scope: [Circular *1],
        name: 'PasswordGenerator'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 21 },
        end: Position { line: 1, character: 23 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 43 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 3, character: 18 },
        end: Position { line: 3, character: 40 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'MAX_PASSWORD_LENGTH'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 3, character: 41 },
        end: Position { line: 3, character: 43 },
        scope: [Circular *1],
        value: 15,
        raw: '15'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 4, character: 71 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 4, character: 18 },
        end: Position { line: 4, character: 42 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'ALPHABETIC_CHARACTERS'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 4, character: 43 },
        end: Position { line: 4, character: 71 },
        scope: [Circular *1],
        value: 'qwertzuiopasdfghjklyxcvbnm',
        raw: '\\"qwertzuiopasdfghjklyxcvbnm\\"'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 5, character: 1 },
      end: Position { line: 5, character: 51 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 5, character: 18 },
        end: Position { line: 5, character: 38 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'NUMBER_CHARACTERS'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 5, character: 39 },
        end: Position { line: 5, character: 51 },
        scope: [Circular *1],
        value: '0123456789',
        raw: '\\"0123456789\\"'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 6, character: 1 },
      end: Position { line: 6, character: 160 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 6, character: 18 },
        end: Position { line: 6, character: 34 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'ALPHA_NUMERIC'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 6, character: 75 },
        end: Position { line: 6, character: 160 },
        scope: [Circular *1],
        operator: '+',
        left: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '+',
          left: [ASTMemberExpression],
          right: [ASTMemberExpression]
        },
        right: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        }
      }
    },
    <ref *2> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 8, character: 1 },
      end: Position { line: 13, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 33 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(6) {
          'me',
          'buffer',
          'characters',
          'ALPHA_NUMERIC',
          'PasswordGenerator',
          'increaseBuffer'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *2]
        ],
        parameters: []
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 8, character: 18 },
        end: Position { line: 8, character: 32 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'constructor'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 33 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(6) {
          'me',
          'buffer',
          'characters',
          'ALPHA_NUMERIC',
          'PasswordGenerator',
          'increaseBuffer'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *2]
        ],
        parameters: []
      }
    },
    <ref *3> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 15, character: 1 },
      end: Position { line: 31, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(12) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'len',
          'p',
          'push',
          'increaseBuffer',
          'PasswordGenerator',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *3]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 15, character: 18 },
        end: Position { line: 15, character: 35 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'increaseBuffer'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'PasswordGenerator'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(12) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'len',
          'p',
          'push',
          'increaseBuffer',
          'PasswordGenerator',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *3]
        ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    <ref *4> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 33, character: 1 },
      end: Position { line: 52, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(18) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'len',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH',
          'pgen',
          'PasswordGenerator',
          'constructor',
          'max',
          'result',
          'push',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *4],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 33, character: 18 },
        end: Position { line: 33, character: 24 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'gen'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'PasswordGenerator'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(18) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'len',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH',
          'pgen',
          'PasswordGenerator',
          'constructor',
          'max',
          'result',
          'push',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *4],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      }
    },
    <ref *5> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 54, character: 1 },
      end: Position { line: 54, character: 45 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(18) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'len',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH',
          'pgen',
          'PasswordGenerator',
          'constructor',
          'max',
          'result',
          'push',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *5],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 54, character: 1 },
        end: Position { line: 54, character: 5 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        name: 'pgen'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 54, character: 43 },
        end: Position { line: 54, character: 45 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTUnaryExpression]
        },
        arguments: []
      }
    },
    <ref *6> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 56, character: 1 },
      end: Position { line: 56, character: 10 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(18) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'len',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH',
          'pgen',
          'PasswordGenerator',
          'constructor',
          'max',
          'result',
          'push',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *6],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 56, character: 1 },
        end: Position { line: 56, character: 6 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        name: 'index'
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 56, character: 9 },
        end: Position { line: 56, character: 10 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        value: 0,
        raw: '0'
      }
    },
    <ref *7> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 57, character: 1 },
      end: Position { line: 57, character: 9 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(18) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'len',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH',
          'pgen',
          'PasswordGenerator',
          'constructor',
          'max',
          'result',
          'push',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *7],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 57, character: 1 },
        end: Position { line: 57, character: 4 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        name: 'max'
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 57, character: 7 },
        end: Position { line: 57, character: 9 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        value: 10,
        raw: '10'
      }
    },
    <ref *8> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 58, character: 1 },
      end: Position { line: 58, character: 12 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(18) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'len',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH',
          'pgen',
          'PasswordGenerator',
          'constructor',
          'max',
          'result',
          'push',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *8],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 58, character: 1 },
        end: Position { line: 58, character: 7 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        name: 'result'
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 58, character: 10 },
        end: Position { line: 58, character: 12 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        fields: []
      }
    },
    ASTWhileStatement {
      type: 'WhileStatement',
      start: Position { line: 60, character: 1 },
      end: Position { line: 63, character: 10 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(18) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'len',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH',
          'pgen',
          'PasswordGenerator',
          'constructor',
          'max',
          'result',
          'push',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          expression: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        }
      ],
      condition: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 60, character: 14 },
        end: Position { line: 60, character: 20 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        operator: '<',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'index'
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'max'
        }
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 65, character: 1 },
      end: Position { line: 65, character: 14 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(18) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'len',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH',
          'pgen',
          'PasswordGenerator',
          'constructor',
          'max',
          'result',
          'push',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 65, character: 6 },
        end: Position { line: 65, character: 14 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'print'
        },
        arguments: [ [ASTIdentifier] ]
      }
    }
  ],
  namespaces: Set(7) {
    'PasswordGenerator',
    'MAX_PASSWORD_LENGTH',
    'ALPHABETIC_CHARACTERS',
    'NUMBER_CHARACTERS',
    'ALPHA_NUMERIC',
    'upper',
    'constructor'
  },
  assignments: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 23 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 18 },
        scope: [Circular *1],
        name: 'PasswordGenerator'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 21 },
        end: Position { line: 1, character: 23 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 43 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 3, character: 18 },
        end: Position { line: 3, character: 40 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'MAX_PASSWORD_LENGTH'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 3, character: 41 },
        end: Position { line: 3, character: 43 },
        scope: [Circular *1],
        value: 15,
        raw: '15'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 4, character: 71 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 4, character: 18 },
        end: Position { line: 4, character: 42 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'ALPHABETIC_CHARACTERS'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 4, character: 43 },
        end: Position { line: 4, character: 71 },
        scope: [Circular *1],
        value: 'qwertzuiopasdfghjklyxcvbnm',
        raw: '\\"qwertzuiopasdfghjklyxcvbnm\\"'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 5, character: 1 },
      end: Position { line: 5, character: 51 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 5, character: 18 },
        end: Position { line: 5, character: 38 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'NUMBER_CHARACTERS'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 5, character: 39 },
        end: Position { line: 5, character: 51 },
        scope: [Circular *1],
        value: '0123456789',
        raw: '\\"0123456789\\"'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 6, character: 1 },
      end: Position { line: 6, character: 160 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 6, character: 18 },
        end: Position { line: 6, character: 34 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'ALPHA_NUMERIC'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 6, character: 75 },
        end: Position { line: 6, character: 160 },
        scope: [Circular *1],
        operator: '+',
        left: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '+',
          left: [ASTMemberExpression],
          right: [ASTMemberExpression]
        },
        right: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        }
      }
    }
  ],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 3, character: 41 },
      end: Position { line: 3, character: 43 },
      scope: [Circular *1],
      value: 15,
      raw: '15'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 4, character: 43 },
      end: Position { line: 4, character: 71 },
      scope: [Circular *1],
      value: 'qwertzuiopasdfghjklyxcvbnm',
      raw: '\\"qwertzuiopasdfghjklyxcvbnm\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 5, character: 39 },
      end: Position { line: 5, character: 51 },
      scope: [Circular *1],
      value: '0123456789',
      raw: '\\"0123456789\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 10, character: 18 },
      end: Position { line: 10, character: 19 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 33 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(6) {
          'me',
          'buffer',
          'characters',
          'ALPHA_NUMERIC',
          'PasswordGenerator',
          'increaseBuffer'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NilLiteral',
      start: Position { line: 19, character: 14 },
      end: Position { line: 19, character: 18 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(12) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'len',
          'p',
          'push',
          'increaseBuffer',
          'PasswordGenerator',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      value: null,
      raw: 'null'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 19, character: 53 },
      end: Position { line: 19, character: 54 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(12) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'len',
          'p',
          'push',
          'increaseBuffer',
          'PasswordGenerator',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 21, character: 13 },
      end: Position { line: 21, character: 14 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(12) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'len',
          'p',
          'push',
          'increaseBuffer',
          'PasswordGenerator',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 24, character: 32 },
      end: Position { line: 24, character: 33 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(12) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'len',
          'p',
          'push',
          'increaseBuffer',
          'PasswordGenerator',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 25, character: 18 },
      end: Position { line: 25, character: 19 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(12) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'len',
          'p',
          'push',
          'increaseBuffer',
          'PasswordGenerator',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 26, character: 36 },
      end: Position { line: 26, character: 37 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(12) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'len',
          'p',
          'push',
          'increaseBuffer',
          'PasswordGenerator',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 28, character: 35 },
      end: Position { line: 28, character: 36 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(12) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'len',
          'p',
          'push',
          'increaseBuffer',
          'PasswordGenerator',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 37, character: 16 },
      end: Position { line: 37, character: 18 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(18) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'len',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH',
          'pgen',
          'PasswordGenerator',
          'constructor',
          'max',
          'result',
          'push',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      value: '',
      raw: '\\"\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 38, character: 13 },
      end: Position { line: 38, character: 14 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(18) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'len',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH',
          'pgen',
          'PasswordGenerator',
          'constructor',
          'max',
          'result',
          'push',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 43, character: 46 },
      end: Position { line: 43, character: 47 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(18) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'len',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH',
          'pgen',
          'PasswordGenerator',
          'constructor',
          'max',
          'result',
          'push',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 44, character: 25 },
      end: Position { line: 44, character: 26 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(18) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'len',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH',
          'pgen',
          'PasswordGenerator',
          'constructor',
          'max',
          'result',
          'push',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NilLiteral',
      start: Position { line: 48, character: 16 },
      end: Position { line: 48, character: 20 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(18) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'len',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH',
          'pgen',
          'PasswordGenerator',
          'constructor',
          'max',
          'result',
          'push',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      value: null,
      raw: 'null'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 56, character: 9 },
      end: Position { line: 56, character: 10 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(18) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'len',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH',
          'pgen',
          'PasswordGenerator',
          'constructor',
          'max',
          'result',
          'push',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 57, character: 7 },
      end: Position { line: 57, character: 9 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(18) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'len',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH',
          'pgen',
          'PasswordGenerator',
          'constructor',
          'max',
          'result',
          'push',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      value: 10,
      raw: '10'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 62, character: 21 },
      end: Position { line: 62, character: 22 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(18) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'len',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH',
          'pgen',
          'PasswordGenerator',
          'constructor',
          'max',
          'result',
          'push',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      value: 1,
      raw: '1'
    }
  ],
  scopes: [
    <ref *9> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 8, character: 33 },
      end: Position { line: 13, character: 13 },
      scope: [Circular *1],
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          variable: [ASTMemberExpression],
          init: [ASTListConstructorExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          variable: [ASTMemberExpression],
          init: [ASTMemberExpression]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          argument: [ASTIdentifier]
        }
      ],
      namespaces: Set(6) {
        'me',
        'buffer',
        'characters',
        'ALPHA_NUMERIC',
        'PasswordGenerator',
        'increaseBuffer'
      },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          variable: [ASTMemberExpression],
          init: [ASTListConstructorExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          variable: [ASTMemberExpression],
          init: [ASTMemberExpression]
        },
        <ref *2> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          variable: [ASTMemberExpression],
          init: [Circular *9]
        }
      ],
      parameters: []
    },
    <ref *10> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 15, character: 36 },
      end: Position { line: 31, character: 13 },
      scope: <ref *9> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 33 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(6) {
          'me',
          'buffer',
          'characters',
          'ALPHA_NUMERIC',
          'PasswordGenerator',
          'increaseBuffer'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTIfStatement {
          type: 'IfShortcutStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          clauses: [Array]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          variable: [ASTIdentifier],
          init: [ASTIndexExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          variable: [ASTIndexExpression],
          init: [ASTIdentifier]
        },
        ASTIfStatement {
          type: 'IfStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          clauses: [Array]
        }
      ],
      namespaces: Set(12) {
        'i',
        'me',
        'currentCharBuffer',
        'buffer',
        'maxBufferSize',
        'characters',
        'len',
        'p',
        'push',
        'increaseBuffer',
        'PasswordGenerator',
        'gen'
      },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          variable: [ASTIdentifier],
          init: [ASTIndexExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          variable: [ASTIndexExpression],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          variable: [ASTIndexExpression],
          init: [ASTLiteral]
        },
        <ref *3> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          variable: [ASTMemberExpression],
          init: [Circular *10]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          name: 'i'
        }
      ]
    },
    <ref *11> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 33, character: 25 },
      end: Position { line: 52, character: 13 },
      scope: <ref *10> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: <ref *9> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(12) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'len',
          'p',
          'push',
          'increaseBuffer',
          'PasswordGenerator',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTWhileStatement {
          type: 'WhileStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          body: [Array],
          condition: [ASTEvaluationExpression]
        },
        ASTIfStatement {
          type: 'IfStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          clauses: [Array]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          argument: [ASTIdentifier]
        }
      ],
      namespaces: Set(18) {
        'me',
        'currentCharBuffer',
        'buffer',
        'generatorCharacters',
        'characters',
        'password',
        'index',
        'len',
        'pointer',
        'increaseBuffer',
        'MAX_PASSWORD_LENGTH',
        'pgen',
        'PasswordGenerator',
        'constructor',
        'max',
        'result',
        'push',
        'gen'
      },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          variable: [ASTIdentifier],
          init: [ASTIndexExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        <ref *4> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          variable: [ASTMemberExpression],
          init: [Circular *11]
        },
        <ref *5> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        <ref *6> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        <ref *7> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        <ref *8> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          variable: [ASTIdentifier],
          init: [ASTListConstructorExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        }
      ],
      parameters: []
    }
  ]
}"
`;

exports[`parse default scripts pseudo-crypto.src 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 213, character: 1 },
  scope: null,
  body: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 12 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 7 },
        scope: [Circular *1],
        name: 'String'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 10 },
        end: Position { line: 1, character: 12 },
        scope: [Circular *1],
        fields: []
      }
    },
    <ref *2> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 6, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 3, character: 22 },
        end: Position { line: 6, character: 13 },
        scope: [Circular *1],
        body: [ [ASTAssignmentStatement], [ASTReturnStatement] ],
        namespaces: Set(2) { 'String', 'parse' },
        assignments: [ [ASTAssignmentStatement], [Circular *2] ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 3, character: 7 },
        end: Position { line: 3, character: 21 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'constructor'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 3, character: 22 },
        end: Position { line: 6, character: 13 },
        scope: [Circular *1],
        body: [ [ASTAssignmentStatement], [ASTReturnStatement] ],
        namespaces: Set(2) { 'String', 'parse' },
        assignments: [ [ASTAssignmentStatement], [Circular *2] ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    <ref *3> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 8, character: 1 },
      end: Position { line: 19, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 16 },
        end: Position { line: 19, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'values',
          'result',
          'index',
          'maxIndex',
          'len',
          'replace',
          'constructor',
          'String',
          'startsWith'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *3]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 8, character: 7 },
        end: Position { line: 8, character: 15 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'parse'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 16 },
        end: Position { line: 19, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'values',
          'result',
          'index',
          'maxIndex',
          'len',
          'replace',
          'constructor',
          'String',
          'startsWith'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *3]
        ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    <ref *4> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 21, character: 1 },
      end: Position { line: 23, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 21, character: 21 },
        end: Position { line: 23, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'indexOf', 'String', 'substr' },
        assignments: [ [Circular *4] ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 21, character: 7 },
        end: Position { line: 21, character: 20 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'startsWith'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 21, character: 21 },
        end: Position { line: 23, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'indexOf', 'String', 'substr' },
        assignments: [ [Circular *4] ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    <ref *5> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 25, character: 1 },
      end: Position { line: 27, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 25, character: 17 },
        end: Position { line: 27, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(5) {
          'startIndex',
          'endIndex',
          'constructor',
          'String',
          'indexOf'
        },
        assignments: [ [Circular *5] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 25, character: 7 },
        end: Position { line: 25, character: 16 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'substr'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 25, character: 17 },
        end: Position { line: 27, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(5) {
          'startIndex',
          'endIndex',
          'constructor',
          'String',
          'indexOf'
        },
        assignments: [ [Circular *5] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    <ref *6> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 29, character: 1 },
      end: Position { line: 31, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 29, character: 18 },
        end: Position { line: 31, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'indexOf', 'String', 'replace' },
        assignments: [ [Circular *6] ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 29, character: 7 },
        end: Position { line: 29, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'indexOf'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 29, character: 18 },
        end: Position { line: 31, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'indexOf', 'String', 'replace' },
        assignments: [ [Circular *6] ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    <ref *7> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 33, character: 1 },
      end: Position { line: 35, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 18 },
        end: Position { line: 35, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(5) {
          'newStr',
          'constructor',
          'replace',
          'String',
          'remove'
        },
        assignments: [ [Circular *7] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 33, character: 7 },
        end: Position { line: 33, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'replace'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 18 },
        end: Position { line: 35, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(5) {
          'newStr',
          'constructor',
          'replace',
          'String',
          'remove'
        },
        assignments: [ [Circular *7] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    <ref *8> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 37, character: 1 },
      end: Position { line: 39, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 37, character: 17 },
        end: Position { line: 39, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(4) { 'constructor', 'remove', 'String', 'toString' },
        assignments: [ [Circular *8] ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 37, character: 7 },
        end: Position { line: 37, character: 16 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'remove'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 37, character: 17 },
        end: Position { line: 39, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(4) { 'constructor', 'remove', 'String', 'toString' },
        assignments: [ [Circular *8] ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    <ref *9> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 41, character: 1 },
      end: Position { line: 43, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 41, character: 19 },
        end: Position { line: 43, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(2) { 'String', 'length' },
        assignments: [ [Circular *9] ],
        parameters: []
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 41, character: 7 },
        end: Position { line: 41, character: 18 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'toString'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 41, character: 19 },
        end: Position { line: 43, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(2) { 'String', 'length' },
        assignments: [ [Circular *9] ],
        parameters: []
      }
    },
    <ref *10> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 45, character: 1 },
      end: Position { line: 47, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 17 },
        end: Position { line: 47, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'len', 'String', 'split' },
        assignments: [ [Circular *10] ],
        parameters: []
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 45, character: 7 },
        end: Position { line: 45, character: 16 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'length'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 17 },
        end: Position { line: 47, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'len', 'String', 'split' },
        assignments: [ [Circular *10] ],
        parameters: []
      }
    },
    <ref *11> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 49, character: 1 },
      end: Position { line: 51, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 49, character: 16 },
        end: Position { line: 51, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(4) { 'seperator', 'split', 'String', 'trim' },
        assignments: [ [Circular *11] ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 49, character: 7 },
        end: Position { line: 49, character: 15 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'split'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 49, character: 16 },
        end: Position { line: 51, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(4) { 'seperator', 'split', 'String', 'trim' },
        assignments: [ [Circular *11] ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    <ref *12> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 53, character: 1 },
      end: Position { line: 55, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 53, character: 15 },
        end: Position { line: 55, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(5) {
          'seperator',
          'constructor',
          'trim',
          'Error',
          'String'
        },
        assignments: [
          [Circular *12],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 53, character: 7 },
        end: Position { line: 53, character: 14 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'trim'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 53, character: 15 },
        end: Position { line: 55, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(5) {
          'seperator',
          'constructor',
          'trim',
          'Error',
          'String'
        },
        assignments: [
          [Circular *12],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    <ref *13> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 57, character: 1 },
      end: Position { line: 57, character: 11 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 53, character: 15 },
        end: Position { line: 55, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(5) {
          'seperator',
          'constructor',
          'trim',
          'Error',
          'String'
        },
        assignments: [
          [ASTAssignmentStatement],
          [Circular *13],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 57, character: 1 },
        end: Position { line: 57, character: 6 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'Error'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 57, character: 9 },
        end: Position { line: 57, character: 11 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        fields: []
      }
    },
    <ref *14> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 59, character: 1 },
      end: Position { line: 59, character: 22 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 53, character: 15 },
        end: Position { line: 55, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(5) {
          'seperator',
          'constructor',
          'trim',
          'Error',
          'String'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *14]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 59, character: 6 },
        end: Position { line: 59, character: 15 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'String'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'Error'
        }
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 59, character: 16 },
        end: Position { line: 59, character: 22 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'String'
      }
    },
    <ref *15> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 61, character: 1 },
      end: Position { line: 68, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 61, character: 21 },
        end: Position { line: 68, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'message',
          'values',
          'm',
          'String',
          'constructor',
          'parse',
          'toString',
          'Error',
          'throw'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *15]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 61, character: 6 },
        end: Position { line: 61, character: 20 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'constructor'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'Error'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 61, character: 21 },
        end: Position { line: 68, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'message',
          'values',
          'm',
          'String',
          'constructor',
          'parse',
          'toString',
          'Error',
          'throw'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *15]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    <ref *16> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 70, character: 1 },
      end: Position { line: 72, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 70, character: 15 },
        end: Position { line: 72, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTCallStatement] ],
        namespaces: Set(7) {
          'message',
          'Crypto',
          'defaultCharset',
          'defaultSecret',
          'maxCharCode',
          'Error',
          'constructor'
        },
        assignments: [
          [Circular *16],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 70, character: 6 },
        end: Position { line: 70, character: 14 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'throw'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'Error'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 70, character: 15 },
        end: Position { line: 72, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTCallStatement] ],
        namespaces: Set(7) {
          'message',
          'Crypto',
          'defaultCharset',
          'defaultSecret',
          'maxCharCode',
          'Error',
          'constructor'
        },
        assignments: [
          [Circular *16],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      }
    },
    <ref *17> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 74, character: 1 },
      end: Position { line: 74, character: 12 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 70, character: 15 },
        end: Position { line: 72, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTCallStatement] ],
        namespaces: Set(7) {
          'message',
          'Crypto',
          'defaultCharset',
          'defaultSecret',
          'maxCharCode',
          'Error',
          'constructor'
        },
        assignments: [
          [ASTAssignmentStatement],
          [Circular *17],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 74, character: 1 },
        end: Position { line: 74, character: 7 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        name: 'Crypto'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 74, character: 10 },
        end: Position { line: 74, character: 12 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        fields: []
      }
    },
    <ref *18> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 76, character: 1 },
      end: Position { line: 76, character: 91 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 70, character: 15 },
        end: Position { line: 72, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTCallStatement] ],
        namespaces: Set(7) {
          'message',
          'Crypto',
          'defaultCharset',
          'defaultSecret',
          'maxCharCode',
          'Error',
          'constructor'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *18],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 76, character: 7 },
        end: Position { line: 76, character: 24 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'defaultCharset'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'Crypto'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 76, character: 25 },
        end: Position { line: 76, character: 91 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        value: 'QWERTZUIOPASDFGHJKLYXCVBNMqwertzuiopasdfghjklyxcvbnm1234567890+-',
        raw: '\\"QWERTZUIOPASDFGHJKLYXCVBNMqwertzuiopasdfghjklyxcvbnm1234567890+-\\"'
      }
    },
    <ref *19> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 77, character: 1 },
      end: Position { line: 77, character: 33 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 70, character: 15 },
        end: Position { line: 72, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTCallStatement] ],
        namespaces: Set(7) {
          'message',
          'Crypto',
          'defaultCharset',
          'defaultSecret',
          'maxCharCode',
          'Error',
          'constructor'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *19],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 77, character: 7 },
        end: Position { line: 77, character: 23 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'defaultSecret'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'Crypto'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 77, character: 24 },
        end: Position { line: 77, character: 33 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        value: 'test123',
        raw: '\\"test123\\"'
      }
    },
    <ref *20> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 78, character: 1 },
      end: Position { line: 78, character: 27 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 70, character: 15 },
        end: Position { line: 72, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTCallStatement] ],
        namespaces: Set(7) {
          'message',
          'Crypto',
          'defaultCharset',
          'defaultSecret',
          'maxCharCode',
          'Error',
          'constructor'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *20],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 78, character: 7 },
        end: Position { line: 78, character: 21 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'maxCharCode'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'Crypto'
        }
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 78, character: 22 },
        end: Position { line: 78, character: 27 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        value: 55295,
        raw: '55295'
      }
    },
    <ref *21> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 79, character: 1 },
      end: Position { line: 79, character: 21 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 70, character: 15 },
        end: Position { line: 72, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTCallStatement] ],
        namespaces: Set(7) {
          'message',
          'Crypto',
          'defaultCharset',
          'defaultSecret',
          'maxCharCode',
          'Error',
          'constructor'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *21]
        ],
        parameters: []
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 79, character: 7 },
        end: Position { line: 79, character: 15 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'Error'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'Crypto'
        }
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 79, character: 16 },
        end: Position { line: 79, character: 21 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        name: 'Error'
      }
    },
    <ref *22> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 81, character: 1 },
      end: Position { line: 90, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 81, character: 22 },
        end: Position { line: 90, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(12) {
          'defaultSecret',
          'hashFn',
          'charset',
          'me',
          'table',
          'defaultCharset',
          'len',
          'Error',
          'constructor',
          'throw',
          'Crypto',
          'getHash'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *22]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 81, character: 7 },
        end: Position { line: 81, character: 21 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'constructor'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'Crypto'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 81, character: 22 },
        end: Position { line: 90, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(12) {
          'defaultSecret',
          'hashFn',
          'charset',
          'me',
          'table',
          'defaultCharset',
          'len',
          'Error',
          'constructor',
          'throw',
          'Crypto',
          'getHash'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *22]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    <ref *23> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 92, character: 1 },
      end: Position { line: 101, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 92, character: 18 },
        end: Position { line: 101, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTCallStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'pw',
          'me',
          'x',
          'hashFn',
          'push',
          'code',
          'reverse',
          'Crypto',
          'encrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *23]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 92, character: 7 },
        end: Position { line: 92, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'getHash'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'Crypto'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 92, character: 18 },
        end: Position { line: 101, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTCallStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'pw',
          'me',
          'x',
          'hashFn',
          'push',
          'code',
          'reverse',
          'Crypto',
          'encrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *23]
        ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    <ref *24> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 103, character: 1 },
      end: Position { line: 156, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'len',
          'max',
          'get',
          'Crypto',
          'decrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *24]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 103, character: 7 },
        end: Position { line: 103, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'encrypt'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'Crypto'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'len',
          'max',
          'get',
          'Crypto',
          'decrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *24]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    <ref *25> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 158, character: 1 },
      end: Position { line: 202, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(21) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'len',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'test',
          'Crypto',
          'constructor',
          'pwd',
          'foo',
          'encrypt',
          'decrypted',
          'decrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *25],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 158, character: 7 },
        end: Position { line: 158, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'decrypt'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'Crypto'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(21) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'len',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'test',
          'Crypto',
          'constructor',
          'pwd',
          'foo',
          'encrypt',
          'decrypted',
          'decrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *25],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    <ref *26> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 204, character: 1 },
      end: Position { line: 204, character: 40 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(21) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'len',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'test',
          'Crypto',
          'constructor',
          'pwd',
          'foo',
          'encrypt',
          'decrypted',
          'decrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *26],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 204, character: 1 },
        end: Position { line: 204, character: 5 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'test'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 204, character: 32 },
        end: Position { line: 204, character: 40 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTUnaryExpression]
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    <ref *27> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 206, character: 1 },
      end: Position { line: 206, character: 14 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(21) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'len',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'test',
          'Crypto',
          'constructor',
          'pwd',
          'foo',
          'encrypt',
          'decrypted',
          'decrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *27],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 206, character: 1 },
        end: Position { line: 206, character: 4 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'pwd'
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 206, character: 7 },
        end: Position { line: 206, character: 14 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        value: 'abcde',
        raw: '\\"abcde\\"'
      }
    },
    <ref *28> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 208, character: 1 },
      end: Position { line: 208, character: 24 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(21) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'len',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'test',
          'Crypto',
          'constructor',
          'pwd',
          'foo',
          'encrypt',
          'decrypted',
          'decrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *28],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 208, character: 1 },
        end: Position { line: 208, character: 4 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'foo'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 208, character: 19 },
        end: Position { line: 208, character: 24 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTIdentifier] ]
      }
    },
    <ref *29> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 209, character: 1 },
      end: Position { line: 209, character: 30 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(21) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'len',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'test',
          'Crypto',
          'constructor',
          'pwd',
          'foo',
          'encrypt',
          'decrypted',
          'decrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *29]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 209, character: 1 },
        end: Position { line: 209, character: 10 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'decrypted'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 209, character: 25 },
        end: Position { line: 209, character: 30 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTIdentifier] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 211, character: 1 },
      end: Position { line: 211, character: 11 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(21) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'len',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'test',
          'Crypto',
          'constructor',
          'pwd',
          'foo',
          'encrypt',
          'decrypted',
          'decrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 211, character: 6 },
        end: Position { line: 211, character: 11 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'print'
        },
        arguments: [ [ASTIdentifier] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 212, character: 1 },
      end: Position { line: 212, character: 17 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(21) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'len',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'test',
          'Crypto',
          'constructor',
          'pwd',
          'foo',
          'encrypt',
          'decrypted',
          'decrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 212, character: 6 },
        end: Position { line: 212, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'print'
        },
        arguments: [ [ASTIdentifier] ]
      }
    }
  ],
  namespaces: Set(2) { 'String', 'constructor' },
  assignments: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 12 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 7 },
        scope: [Circular *1],
        name: 'String'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 10 },
        end: Position { line: 1, character: 12 },
        scope: [Circular *1],
        fields: []
      }
    }
  ],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 10, character: 13 },
      end: Position { line: 10, character: 14 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 16 },
        end: Position { line: 19, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'values',
          'result',
          'index',
          'maxIndex',
          'len',
          'replace',
          'constructor',
          'String',
          'startsWith'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 14, character: 33 },
      end: Position { line: 14, character: 36 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 16 },
        end: Position { line: 19, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'values',
          'result',
          'index',
          'maxIndex',
          'len',
          'replace',
          'constructor',
          'String',
          'startsWith'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      value: '$',
      raw: '\\"$\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 15, character: 25 },
      end: Position { line: 15, character: 26 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 16 },
        end: Position { line: 19, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'values',
          'result',
          'index',
          'maxIndex',
          'len',
          'replace',
          'constructor',
          'String',
          'startsWith'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 22, character: 37 },
      end: Position { line: 22, character: 38 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 21, character: 21 },
        end: Position { line: 23, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'indexOf', 'String', 'substr' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NilLiteral',
      start: Position { line: 64, character: 19 },
      end: Position { line: 64, character: 23 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 61, character: 21 },
        end: Position { line: 68, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'message',
          'values',
          'm',
          'String',
          'constructor',
          'parse',
          'toString',
          'Error',
          'throw'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: null,
      raw: 'null'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 71, character: 10 },
      end: Position { line: 71, character: 27 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 70, character: 15 },
        end: Position { line: 72, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTCallStatement] ],
        namespaces: Set(7) {
          'message',
          'Crypto',
          'defaultCharset',
          'defaultSecret',
          'maxCharCode',
          'Error',
          'constructor'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      value: '<color=#ff0000>',
      raw: '\\"<color=#ff0000>\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 71, character: 45 },
      end: Position { line: 71, character: 55 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 70, character: 15 },
        end: Position { line: 72, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTCallStatement] ],
        namespaces: Set(7) {
          'message',
          'Crypto',
          'defaultCharset',
          'defaultSecret',
          'maxCharCode',
          'Error',
          'constructor'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      value: '</color>',
      raw: '\\"</color>\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 76, character: 25 },
      end: Position { line: 76, character: 91 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 70, character: 15 },
        end: Position { line: 72, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTCallStatement] ],
        namespaces: Set(7) {
          'message',
          'Crypto',
          'defaultCharset',
          'defaultSecret',
          'maxCharCode',
          'Error',
          'constructor'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      value: 'QWERTZUIOPASDFGHJKLYXCVBNMqwertzuiopasdfghjklyxcvbnm1234567890+-',
      raw: '\\"QWERTZUIOPASDFGHJKLYXCVBNMqwertzuiopasdfghjklyxcvbnm1234567890+-\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 77, character: 24 },
      end: Position { line: 77, character: 33 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 70, character: 15 },
        end: Position { line: 72, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTCallStatement] ],
        namespaces: Set(7) {
          'message',
          'Crypto',
          'defaultCharset',
          'defaultSecret',
          'maxCharCode',
          'Error',
          'constructor'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      value: 'test123',
      raw: '\\"test123\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 78, character: 22 },
      end: Position { line: 78, character: 27 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 70, character: 15 },
        end: Position { line: 72, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTCallStatement] ],
        namespaces: Set(7) {
          'message',
          'Crypto',
          'defaultCharset',
          'defaultSecret',
          'maxCharCode',
          'Error',
          'constructor'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      value: 55295,
      raw: '55295'
    },
    ASTLiteral {
      type: 'NilLiteral',
      start: Position { line: 86, character: 20 },
      end: Position { line: 86, character: 24 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 81, character: 22 },
        end: Position { line: 90, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(12) {
          'defaultSecret',
          'hashFn',
          'charset',
          'me',
          'table',
          'defaultCharset',
          'len',
          'Error',
          'constructor',
          'throw',
          'Crypto',
          'getHash'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier], [ASTIdentifier] ]
      },
      value: null,
      raw: 'null'
    },
    ASTLiteral {
      type: 'NilLiteral',
      start: Position { line: 87, character: 19 },
      end: Position { line: 87, character: 23 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 81, character: 22 },
        end: Position { line: 90, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(12) {
          'defaultSecret',
          'hashFn',
          'charset',
          'me',
          'table',
          'defaultCharset',
          'len',
          'Error',
          'constructor',
          'throw',
          'Crypto',
          'getHash'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier], [ASTIdentifier] ]
      },
      value: null,
      raw: 'null'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 88, character: 24 },
      end: Position { line: 88, character: 26 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 81, character: 22 },
        end: Position { line: 90, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(12) {
          'defaultSecret',
          'hashFn',
          'charset',
          'me',
          'table',
          'defaultCharset',
          'len',
          'Error',
          'constructor',
          'throw',
          'Crypto',
          'getHash'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 64,
      raw: '64'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 88, character: 59 },
      end: Position { line: 88, character: 82 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 81, character: 22 },
        end: Position { line: 90, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(12) {
          'defaultSecret',
          'hashFn',
          'charset',
          'me',
          'table',
          'defaultCharset',
          'len',
          'Error',
          'constructor',
          'throw',
          'Crypto',
          'getHash'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 'Invalid charset $0...',
      raw: '\\"Invalid charset $0...\\"'
    },
    ASTLiteral {
      type: 'NilLiteral',
      start: Position { line: 105, character: 15 },
      end: Position { line: 105, character: 19 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'len',
          'max',
          'get',
          'Crypto',
          'decrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: null,
      raw: 'null'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 107, character: 19 },
      end: Position { line: 107, character: 20 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'len',
          'max',
          'get',
          'Crypto',
          'decrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 109, character: 16 },
      end: Position { line: 109, character: 17 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'len',
          'max',
          'get',
          'Crypto',
          'decrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 110, character: 25 },
      end: Position { line: 110, character: 26 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'len',
          'max',
          'get',
          'Crypto',
          'decrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 3,
      raw: '3'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 114, character: 40 },
      end: Position { line: 114, character: 61 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 112, character: 11 },
        end: Position { line: 117, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTIfStatement], [ASTReturnStatement] ],
        namespaces: Set(7) {
          'v',
          'me',
          'table',
          'Error',
          'constructor',
          'throw',
          'AND'
        },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier] ]
      },
      value: 'Invalid index $0...',
      raw: '\\"Invalid index $0...\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 119, character: 24 },
      end: Position { line: 119, character: 27 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 118, character: 11 },
        end: Position { line: 120, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'a', 'b', 'LSHIFT' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: '&',
      raw: '\\"&\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 122, character: 24 },
      end: Position { line: 122, character: 28 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 121, character: 14 },
        end: Position { line: 123, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'a', 'b', 'RSHIFT' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: '<<',
      raw: '\\"<<\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 125, character: 24 },
      end: Position { line: 125, character: 28 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: '>>',
      raw: '\\">>\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 128, character: 40 },
      end: Position { line: 128, character: 41 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 129, character: 44 },
      end: Position { line: 129, character: 46 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 16,
      raw: '16'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 130, character: 35 },
      end: Position { line: 130, character: 36 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 130, character: 48 },
      end: Position { line: 130, character: 49 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 8,
      raw: '8'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 131, character: 28 },
      end: Position { line: 131, character: 29 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 2,
      raw: '2'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 133, character: 44 },
      end: Position { line: 133, character: 46 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 18,
      raw: '18'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 133, character: 49 },
      end: Position { line: 133, character: 51 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 63,
      raw: '63'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 134, character: 44 },
      end: Position { line: 134, character: 46 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 12,
      raw: '12'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 134, character: 49 },
      end: Position { line: 134, character: 51 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 63,
      raw: '63'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 135, character: 44 },
      end: Position { line: 135, character: 45 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 6,
      raw: '6'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 135, character: 48 },
      end: Position { line: 135, character: 50 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 63,
      raw: '63'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 136, character: 37 },
      end: Position { line: 136, character: 39 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 63,
      raw: '63'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 137, character: 31 },
      end: Position { line: 137, character: 32 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 3,
      raw: '3'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 139, character: 20 },
      end: Position { line: 139, character: 21 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 2,
      raw: '2'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 140, character: 40 },
      end: Position { line: 140, character: 41 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 141, character: 44 },
      end: Position { line: 141, character: 45 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 8,
      raw: '8'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 142, character: 28 },
      end: Position { line: 142, character: 29 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 144, character: 40 },
      end: Position { line: 144, character: 42 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 10,
      raw: '10'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 145, character: 44 },
      end: Position { line: 145, character: 45 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 4,
      raw: '4'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 145, character: 48 },
      end: Position { line: 145, character: 50 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 63,
      raw: '63'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 146, character: 44 },
      end: Position { line: 146, character: 45 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 2,
      raw: '2'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 146, character: 48 },
      end: Position { line: 146, character: 50 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 63,
      raw: '63'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 147, character: 21 },
      end: Position { line: 147, character: 24 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: '=',
      raw: '\\"=\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 148, character: 25 },
      end: Position { line: 148, character: 26 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 149, character: 40 },
      end: Position { line: 149, character: 41 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 151, character: 40 },
      end: Position { line: 151, character: 41 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 2,
      raw: '2'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 152, character: 44 },
      end: Position { line: 152, character: 45 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 4,
      raw: '4'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 152, character: 48 },
      end: Position { line: 152, character: 50 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 63,
      raw: '63'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 153, character: 21 },
      end: Position { line: 153, character: 25 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: '==',
      raw: '\\"==\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 155, character: 24 },
      end: Position { line: 155, character: 26 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: '',
      raw: '\\"\\"'
    },
    ASTLiteral {
      type: 'NilLiteral',
      start: Position { line: 160, character: 15 },
      end: Position { line: 160, character: 19 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(21) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'len',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'test',
          'Crypto',
          'constructor',
          'pwd',
          'foo',
          'encrypt',
          'decrypted',
          'decrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: null,
      raw: 'null'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 162, character: 19 },
      end: Position { line: 162, character: 20 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(21) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'len',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'test',
          'Crypto',
          'constructor',
          'pwd',
          'foo',
          'encrypt',
          'decrypted',
          'decrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 165, character: 18 },
      end: Position { line: 165, character: 19 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(21) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'len',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'test',
          'Crypto',
          'constructor',
          'pwd',
          'foo',
          'encrypt',
          'decrypted',
          'decrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 166, character: 18 },
      end: Position { line: 166, character: 19 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(21) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'len',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'test',
          'Crypto',
          'constructor',
          'pwd',
          'foo',
          'encrypt',
          'decrypted',
          'decrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 167, character: 16 },
      end: Position { line: 167, character: 17 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(21) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'len',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'test',
          'Crypto',
          'constructor',
          'pwd',
          'foo',
          'encrypt',
          'decrypted',
          'decrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 168, character: 19 },
      end: Position { line: 168, character: 20 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(21) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'len',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'test',
          'Crypto',
          'constructor',
          'pwd',
          'foo',
          'encrypt',
          'decrypted',
          'decrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 171, character: 24 },
      end: Position { line: 171, character: 27 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 170, character: 11 },
        end: Position { line: 172, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'a', 'b', 'RSHIFT' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: '&',
      raw: '\\"&\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 174, character: 24 },
      end: Position { line: 174, character: 28 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 173, character: 14 },
        end: Position { line: 175, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(23) {
          'a',
          'b',
          'position',
          'max',
          'buffer',
          'me',
          'table',
          'indexOf',
          'currentBit',
          'bitCounter',
          'bitStorage',
          'expectedHashIndex',
          'hashPointer',
          'hashLength',
          'm',
          'operation',
          'AND',
          'RSHIFT',
          'charCode',
          'maxCharCode',
          'output',
          'push',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: '>>',
      raw: '\\">>\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 179, character: 35 },
      end: Position { line: 179, character: 36 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 173, character: 14 },
        end: Position { line: 175, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(23) {
          'a',
          'b',
          'position',
          'max',
          'buffer',
          'me',
          'table',
          'indexOf',
          'currentBit',
          'bitCounter',
          'bitStorage',
          'expectedHashIndex',
          'hashPointer',
          'hashLength',
          'm',
          'operation',
          'AND',
          'RSHIFT',
          'charCode',
          'maxCharCode',
          'output',
          'push',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 180, character: 26 },
      end: Position { line: 180, character: 27 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 173, character: 14 },
        end: Position { line: 175, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(23) {
          'a',
          'b',
          'position',
          'max',
          'buffer',
          'me',
          'table',
          'indexOf',
          'currentBit',
          'bitCounter',
          'bitStorage',
          'expectedHashIndex',
          'hashPointer',
          'hashLength',
          'm',
          'operation',
          'AND',
          'RSHIFT',
          'charCode',
          'maxCharCode',
          'output',
          'push',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 4,
      raw: '4'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 181, character: 39 },
      end: Position { line: 181, character: 41 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 173, character: 14 },
        end: Position { line: 175, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(23) {
          'a',
          'b',
          'position',
          'max',
          'buffer',
          'me',
          'table',
          'indexOf',
          'currentBit',
          'bitCounter',
          'bitStorage',
          'expectedHashIndex',
          'hashPointer',
          'hashLength',
          'm',
          'operation',
          'AND',
          'RSHIFT',
          'charCode',
          'maxCharCode',
          'output',
          'push',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 64,
      raw: '64'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 185, character: 26 },
      end: Position { line: 185, character: 27 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 173, character: 14 },
        end: Position { line: 175, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(23) {
          'a',
          'b',
          'position',
          'max',
          'buffer',
          'me',
          'table',
          'indexOf',
          'currentBit',
          'bitCounter',
          'bitStorage',
          'expectedHashIndex',
          'hashPointer',
          'hashLength',
          'm',
          'operation',
          'AND',
          'RSHIFT',
          'charCode',
          'maxCharCode',
          'output',
          'push',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 4,
      raw: '4'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 186, character: 54 },
      end: Position { line: 186, character: 55 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 173, character: 14 },
        end: Position { line: 175, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(23) {
          'a',
          'b',
          'position',
          'max',
          'buffer',
          'me',
          'table',
          'indexOf',
          'currentBit',
          'bitCounter',
          'bitStorage',
          'expectedHashIndex',
          'hashPointer',
          'hashLength',
          'm',
          'operation',
          'AND',
          'RSHIFT',
          'charCode',
          'maxCharCode',
          'output',
          'push',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 3,
      raw: '3'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 186, character: 59 },
      end: Position { line: 186, character: 60 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 173, character: 14 },
        end: Position { line: 175, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(23) {
          'a',
          'b',
          'position',
          'max',
          'buffer',
          'me',
          'table',
          'indexOf',
          'currentBit',
          'bitCounter',
          'bitStorage',
          'expectedHashIndex',
          'hashPointer',
          'hashLength',
          'm',
          'operation',
          'AND',
          'RSHIFT',
          'charCode',
          'maxCharCode',
          'output',
          'push',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 3,
      raw: '3'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 186, character: 77 },
      end: Position { line: 186, character: 78 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 173, character: 14 },
        end: Position { line: 175, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(23) {
          'a',
          'b',
          'position',
          'max',
          'buffer',
          'me',
          'table',
          'indexOf',
          'currentBit',
          'bitCounter',
          'bitStorage',
          'expectedHashIndex',
          'hashPointer',
          'hashLength',
          'm',
          'operation',
          'AND',
          'RSHIFT',
          'charCode',
          'maxCharCode',
          'output',
          'push',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 189, character: 30 },
      end: Position { line: 189, character: 31 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 173, character: 14 },
        end: Position { line: 175, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(23) {
          'a',
          'b',
          'position',
          'max',
          'buffer',
          'me',
          'table',
          'indexOf',
          'currentBit',
          'bitCounter',
          'bitStorage',
          'expectedHashIndex',
          'hashPointer',
          'hashLength',
          'm',
          'operation',
          'AND',
          'RSHIFT',
          'charCode',
          'maxCharCode',
          'output',
          'push',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 2,
      raw: '2'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 189, character: 46 },
      end: Position { line: 189, character: 47 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 173, character: 14 },
        end: Position { line: 175, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(23) {
          'a',
          'b',
          'position',
          'max',
          'buffer',
          'me',
          'table',
          'indexOf',
          'currentBit',
          'bitCounter',
          'bitStorage',
          'expectedHashIndex',
          'hashPointer',
          'hashLength',
          'm',
          'operation',
          'AND',
          'RSHIFT',
          'charCode',
          'maxCharCode',
          'output',
          'push',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 6,
      raw: '6'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 191, character: 29 },
      end: Position { line: 191, character: 32 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 173, character: 14 },
        end: Position { line: 175, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(23) {
          'a',
          'b',
          'position',
          'max',
          'buffer',
          'me',
          'table',
          'indexOf',
          'currentBit',
          'bitCounter',
          'bitStorage',
          'expectedHashIndex',
          'hashPointer',
          'hashLength',
          'm',
          'operation',
          'AND',
          'RSHIFT',
          'charCode',
          'maxCharCode',
          'output',
          'push',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 255,
      raw: '255'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 192, character: 30 },
      end: Position { line: 192, character: 31 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 173, character: 14 },
        end: Position { line: 175, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(23) {
          'a',
          'b',
          'position',
          'max',
          'buffer',
          'me',
          'table',
          'indexOf',
          'currentBit',
          'bitCounter',
          'bitStorage',
          'expectedHashIndex',
          'hashPointer',
          'hashLength',
          'm',
          'operation',
          'AND',
          'RSHIFT',
          'charCode',
          'maxCharCode',
          'output',
          'push',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 197, character: 41 },
      end: Position { line: 197, character: 42 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 173, character: 14 },
        end: Position { line: 175, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(23) {
          'a',
          'b',
          'position',
          'max',
          'buffer',
          'me',
          'table',
          'indexOf',
          'currentBit',
          'bitCounter',
          'bitStorage',
          'expectedHashIndex',
          'hashPointer',
          'hashLength',
          'm',
          'operation',
          'AND',
          'RSHIFT',
          'charCode',
          'maxCharCode',
          'output',
          'push',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 199, character: 31 },
      end: Position { line: 199, character: 32 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 173, character: 14 },
        end: Position { line: 175, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(23) {
          'a',
          'b',
          'position',
          'max',
          'buffer',
          'me',
          'table',
          'indexOf',
          'currentBit',
          'bitCounter',
          'bitStorage',
          'expectedHashIndex',
          'hashPointer',
          'hashLength',
          'm',
          'operation',
          'AND',
          'RSHIFT',
          'charCode',
          'maxCharCode',
          'output',
          'push',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 201, character: 24 },
      end: Position { line: 201, character: 26 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 173, character: 14 },
        end: Position { line: 175, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(23) {
          'a',
          'b',
          'position',
          'max',
          'buffer',
          'me',
          'table',
          'indexOf',
          'currentBit',
          'bitCounter',
          'bitStorage',
          'expectedHashIndex',
          'hashPointer',
          'hashLength',
          'm',
          'operation',
          'AND',
          'RSHIFT',
          'charCode',
          'maxCharCode',
          'output',
          'push',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: '',
      raw: '\\"\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 204, character: 33 },
      end: Position { line: 204, character: 39 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(21) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'len',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'test',
          'Crypto',
          'constructor',
          'pwd',
          'foo',
          'encrypt',
          'decrypted',
          'decrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 'test',
      raw: '\\"test\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 206, character: 7 },
      end: Position { line: 206, character: 14 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(21) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'len',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'test',
          'Crypto',
          'constructor',
          'pwd',
          'foo',
          'encrypt',
          'decrypted',
          'decrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 'abcde',
      raw: '\\"abcde\\"'
    }
  ],
  scopes: [
    <ref *30> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 3, character: 22 },
      end: Position { line: 6, character: 13 },
      scope: [Circular *1],
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *30],
          variable: [ASTMemberExpression],
          init: [ASTIdentifier]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *30],
          argument: [ASTIdentifier]
        }
      ],
      namespaces: Set(2) { 'String', 'parse' },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *30],
          variable: [ASTMemberExpression],
          init: [ASTIdentifier]
        },
        <ref *2> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *30],
          variable: [ASTMemberExpression],
          init: [Circular *30]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *30],
          name: 'str'
        }
      ]
    },
    <ref *31> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 8, character: 16 },
      end: Position { line: 19, character: 13 },
      scope: <ref *30> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 3, character: 22 },
        end: Position { line: 6, character: 13 },
        scope: [Circular *1],
        body: [ [ASTAssignmentStatement], [ASTReturnStatement] ],
        namespaces: Set(2) { 'String', 'parse' },
        assignments: [ [ASTAssignmentStatement], [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier] ]
      },
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *31],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *31],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *31],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTWhileStatement {
          type: 'WhileStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *31],
          body: [Array],
          condition: [ASTEvaluationExpression]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *31],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(9) {
        'values',
        'result',
        'index',
        'maxIndex',
        'len',
        'replace',
        'constructor',
        'String',
        'startsWith'
      },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *31],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *31],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *31],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *31],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *31],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        <ref *3> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *31],
          variable: [ASTMemberExpression],
          init: [Circular *31]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *31],
          name: 'values'
        }
      ]
    },
    <ref *32> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 21, character: 21 },
      end: Position { line: 23, character: 13 },
      scope: <ref *31> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 16 },
        end: Position { line: 19, character: 13 },
        scope: <ref *30> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'values',
          'result',
          'index',
          'maxIndex',
          'len',
          'replace',
          'constructor',
          'String',
          'startsWith'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *32],
          argument: [ASTEvaluationExpression]
        }
      ],
      namespaces: Set(3) { 'indexOf', 'String', 'substr' },
      assignments: [
        <ref *4> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *32],
          variable: [ASTMemberExpression],
          init: [Circular *32]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *32],
          name: 'str'
        }
      ]
    },
    <ref *33> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 25, character: 17 },
      end: Position { line: 27, character: 13 },
      scope: <ref *32> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 21, character: 21 },
        end: Position { line: 23, character: 13 },
        scope: <ref *31> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'indexOf', 'String', 'substr' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier] ]
      },
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *33],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(5) {
        'startIndex',
        'endIndex',
        'constructor',
        'String',
        'indexOf'
      },
      assignments: [
        <ref *5> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *33],
          variable: [ASTMemberExpression],
          init: [Circular *33]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *33],
          name: 'startIndex'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *33],
          name: 'endIndex'
        }
      ]
    },
    <ref *34> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 29, character: 18 },
      end: Position { line: 31, character: 13 },
      scope: <ref *33> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 25, character: 17 },
        end: Position { line: 27, character: 13 },
        scope: <ref *32> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(5) {
          'startIndex',
          'endIndex',
          'constructor',
          'String',
          'indexOf'
        },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *34],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(3) { 'indexOf', 'String', 'replace' },
      assignments: [
        <ref *6> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *34],
          variable: [ASTMemberExpression],
          init: [Circular *34]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *34],
          name: 'str'
        }
      ]
    },
    <ref *35> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 33, character: 18 },
      end: Position { line: 35, character: 13 },
      scope: <ref *34> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 29, character: 18 },
        end: Position { line: 31, character: 13 },
        scope: <ref *33> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'indexOf', 'String', 'replace' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier] ]
      },
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *35],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(5) { 'newStr', 'constructor', 'replace', 'String', 'remove' },
      assignments: [
        <ref *7> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *35],
          variable: [ASTMemberExpression],
          init: [Circular *35]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *35],
          name: 'str'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *35],
          name: 'newStr'
        }
      ]
    },
    <ref *36> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 37, character: 17 },
      end: Position { line: 39, character: 13 },
      scope: <ref *35> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 18 },
        end: Position { line: 35, character: 13 },
        scope: <ref *34> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(5) {
          'newStr',
          'constructor',
          'replace',
          'String',
          'remove'
        },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *36],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(4) { 'constructor', 'remove', 'String', 'toString' },
      assignments: [
        <ref *8> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *36],
          variable: [ASTMemberExpression],
          init: [Circular *36]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *36],
          name: 'str'
        }
      ]
    },
    <ref *37> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 41, character: 19 },
      end: Position { line: 43, character: 13 },
      scope: <ref *36> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 37, character: 17 },
        end: Position { line: 39, character: 13 },
        scope: <ref *35> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(4) { 'constructor', 'remove', 'String', 'toString' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier] ]
      },
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *37],
          argument: [ASTMemberExpression]
        }
      ],
      namespaces: Set(2) { 'String', 'length' },
      assignments: [
        <ref *9> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *37],
          variable: [ASTMemberExpression],
          init: [Circular *37]
        }
      ],
      parameters: []
    },
    <ref *38> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 45, character: 17 },
      end: Position { line: 47, character: 13 },
      scope: <ref *37> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 41, character: 19 },
        end: Position { line: 43, character: 13 },
        scope: <ref *36> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(2) { 'String', 'length' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: []
      },
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *38],
          argument: [ASTMemberExpression]
        }
      ],
      namespaces: Set(3) { 'len', 'String', 'split' },
      assignments: [
        <ref *10> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *38],
          variable: [ASTMemberExpression],
          init: [Circular *38]
        }
      ],
      parameters: []
    },
    <ref *39> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 49, character: 16 },
      end: Position { line: 51, character: 13 },
      scope: <ref *38> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 17 },
        end: Position { line: 47, character: 13 },
        scope: <ref *37> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'len', 'String', 'split' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: []
      },
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *39],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(4) { 'seperator', 'split', 'String', 'trim' },
      assignments: [
        <ref *11> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *39],
          variable: [ASTMemberExpression],
          init: [Circular *39]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *39],
          name: 'seperator'
        }
      ]
    },
    <ref *40> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 53, character: 15 },
      end: Position { line: 55, character: 13 },
      scope: <ref *39> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 49, character: 16 },
        end: Position { line: 51, character: 13 },
        scope: <ref *38> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(4) { 'seperator', 'split', 'String', 'trim' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier] ]
      },
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *40],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(5) { 'seperator', 'constructor', 'trim', 'Error', 'String' },
      assignments: [
        <ref *12> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *40],
          variable: [ASTMemberExpression],
          init: [Circular *40]
        },
        <ref *13> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *40],
          variable: [ASTIdentifier],
          init: [ASTMapConstructorExpression]
        },
        <ref *14> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *40],
          variable: [ASTMemberExpression],
          init: [ASTIdentifier]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *40],
          name: 'seperator'
        }
      ]
    },
    <ref *41> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 61, character: 21 },
      end: Position { line: 68, character: 13 },
      scope: <ref *40> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 53, character: 15 },
        end: Position { line: 55, character: 13 },
        scope: <ref *39> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(5) {
          'seperator',
          'constructor',
          'trim',
          'Error',
          'String'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *41],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *41],
          variable: [ASTMemberExpression],
          init: [ASTIdentifier]
        },
        ASTIfStatement {
          type: 'IfStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *41],
          clauses: [Array]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *41],
          argument: [ASTIdentifier]
        }
      ],
      namespaces: Set(9) {
        'message',
        'values',
        'm',
        'String',
        'constructor',
        'parse',
        'toString',
        'Error',
        'throw'
      },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *41],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *41],
          variable: [ASTMemberExpression],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *41],
          variable: [ASTMemberExpression],
          init: [ASTCallExpression]
        },
        <ref *15> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *41],
          variable: [ASTMemberExpression],
          init: [Circular *41]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *41],
          name: 'message'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *41],
          name: 'values'
        }
      ]
    },
    <ref *42> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 70, character: 15 },
      end: Position { line: 72, character: 13 },
      scope: <ref *41> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 61, character: 21 },
        end: Position { line: 68, character: 13 },
        scope: <ref *40> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'message',
          'values',
          'm',
          'String',
          'constructor',
          'parse',
          'toString',
          'Error',
          'throw'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *42],
          expression: [ASTCallExpression]
        }
      ],
      namespaces: Set(7) {
        'message',
        'Crypto',
        'defaultCharset',
        'defaultSecret',
        'maxCharCode',
        'Error',
        'constructor'
      },
      assignments: [
        <ref *16> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *42],
          variable: [ASTMemberExpression],
          init: [Circular *42]
        },
        <ref *17> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *42],
          variable: [ASTIdentifier],
          init: [ASTMapConstructorExpression]
        },
        <ref *18> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *42],
          variable: [ASTMemberExpression],
          init: [ASTLiteral]
        },
        <ref *19> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *42],
          variable: [ASTMemberExpression],
          init: [ASTLiteral]
        },
        <ref *20> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *42],
          variable: [ASTMemberExpression],
          init: [ASTLiteral]
        },
        <ref *21> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *42],
          variable: [ASTMemberExpression],
          init: [ASTIdentifier]
        }
      ],
      parameters: []
    },
    <ref *43> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 81, character: 22 },
      end: Position { line: 90, character: 13 },
      scope: <ref *42> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 70, character: 15 },
        end: Position { line: 72, character: 13 },
        scope: <ref *41> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTCallStatement] ],
        namespaces: Set(7) {
          'message',
          'Crypto',
          'defaultCharset',
          'defaultSecret',
          'maxCharCode',
          'Error',
          'constructor'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *43],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *43],
          variable: [ASTMemberExpression],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *43],
          variable: [ASTMemberExpression],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *43],
          variable: [ASTMemberExpression],
          init: [ASTUnaryExpression]
        },
        ASTIfStatement {
          type: 'IfShortcutStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *43],
          clauses: [Array]
        },
        ASTIfStatement {
          type: 'IfShortcutStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *43],
          clauses: [Array]
        },
        ASTIfStatement {
          type: 'IfShortcutStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *43],
          clauses: [Array]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *43],
          argument: [ASTIdentifier]
        }
      ],
      namespaces: Set(12) {
        'defaultSecret',
        'hashFn',
        'charset',
        'me',
        'table',
        'defaultCharset',
        'len',
        'Error',
        'constructor',
        'throw',
        'Crypto',
        'getHash'
      },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *43],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *43],
          variable: [ASTMemberExpression],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *43],
          variable: [ASTMemberExpression],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *43],
          variable: [ASTMemberExpression],
          init: [ASTUnaryExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *43],
          variable: [ASTMemberExpression],
          init: [ASTUnaryExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *43],
          variable: [ASTMemberExpression],
          init: [ASTMemberExpression]
        },
        <ref *22> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *43],
          variable: [ASTMemberExpression],
          init: [Circular *43]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *43],
          name: 'defaultSecret'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *43],
          name: 'hashFn'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *43],
          name: 'charset'
        }
      ]
    },
    <ref *44> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 92, character: 18 },
      end: Position { line: 101, character: 13 },
      scope: <ref *43> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 81, character: 22 },
        end: Position { line: 90, character: 13 },
        scope: <ref *42> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(12) {
          'defaultSecret',
          'hashFn',
          'charset',
          'me',
          'table',
          'defaultCharset',
          'len',
          'Error',
          'constructor',
          'throw',
          'Crypto',
          'getHash'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier], [ASTIdentifier] ]
      },
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *44],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *44],
          variable: [ASTIdentifier],
          init: [ASTListConstructorExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *44],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTForGenericStatement {
          type: 'ForGenericStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *44],
          body: [Array],
          variable: [ASTIdentifier],
          iterator: [ASTIdentifier]
        },
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *44],
          expression: [ASTMemberExpression]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *44],
          argument: [ASTIdentifier]
        }
      ],
      namespaces: Set(9) {
        'pw',
        'me',
        'x',
        'hashFn',
        'push',
        'code',
        'reverse',
        'Crypto',
        'encrypt'
      },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *44],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *44],
          variable: [ASTIdentifier],
          init: [ASTListConstructorExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *44],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        <ref *23> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *44],
          variable: [ASTMemberExpression],
          init: [Circular *44]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *44],
          name: 'pw'
        }
      ]
    },
    <ref *45> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 103, character: 18 },
      end: Position { line: 156, character: 13 },
      scope: <ref *44> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 92, character: 18 },
        end: Position { line: 101, character: 13 },
        scope: <ref *43> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTCallStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'pw',
          'me',
          'x',
          'hashFn',
          'push',
          'code',
          'reverse',
          'Crypto',
          'encrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *45],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTIfStatement {
          type: 'IfShortcutStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *45],
          clauses: [Array]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *45],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *45],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *45],
          variable: [ASTIdentifier],
          init: [ASTListConstructorExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *45],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *45],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *45],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTFunctionStatement]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTFunctionStatement]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTFunctionStatement]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTFunctionStatement]
        },
        ASTWhileStatement {
          type: 'WhileStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTEvaluationExpression]
        },
        ASTIfStatement {
          type: 'IfStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          clauses: [Array]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(13) {
        'pw',
        'me',
        'defaultSecret',
        'getHash',
        'hashPointer',
        'output',
        'position',
        'padding',
        'len',
        'max',
        'get',
        'Crypto',
        'decrypt'
      },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *45],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *45],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *45],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *45],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *45],
          variable: [ASTIdentifier],
          init: [ASTListConstructorExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *45],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *45],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *45],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        <ref *24> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *45],
          variable: [ASTMemberExpression],
          init: [Circular *45]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *45],
          name: 'str'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *45],
          name: 'pw'
        }
      ]
    },
    <ref *46> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 112, character: 11 },
      end: Position { line: 117, character: 17 },
      scope: <ref *45> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: <ref *44> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'len',
          'max',
          'get',
          'Crypto',
          'decrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      body: [
        ASTIfStatement {
          type: 'IfStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *46],
          clauses: [Array]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *46],
          argument: [ASTIndexExpression]
        }
      ],
      namespaces: Set(7) {
        'v',
        'me',
        'table',
        'Error',
        'constructor',
        'throw',
        'AND'
      },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *46],
          variable: [ASTIdentifier],
          init: [Circular *46]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *46],
          name: 'v'
        }
      ]
    },
    <ref *47> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 118, character: 11 },
      end: Position { line: 120, character: 17 },
      scope: <ref *46> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 112, character: 11 },
        end: Position { line: 117, character: 17 },
        scope: <ref *45> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTIfStatement], [ASTReturnStatement] ],
        namespaces: Set(7) {
          'v',
          'me',
          'table',
          'Error',
          'constructor',
          'throw',
          'AND'
        },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier] ]
      },
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *47],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(3) { 'a', 'b', 'LSHIFT' },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *47],
          variable: [ASTIdentifier],
          init: [Circular *47]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *47],
          name: 'a'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *47],
          name: 'b'
        }
      ]
    },
    <ref *48> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 121, character: 14 },
      end: Position { line: 123, character: 17 },
      scope: <ref *47> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 118, character: 11 },
        end: Position { line: 120, character: 17 },
        scope: <ref *46> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'a', 'b', 'LSHIFT' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *48],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(3) { 'a', 'b', 'RSHIFT' },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *48],
          variable: [ASTIdentifier],
          init: [Circular *48]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *48],
          name: 'a'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *48],
          name: 'b'
        }
      ]
    },
    <ref *49> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 124, character: 14 },
      end: Position { line: 126, character: 17 },
      scope: <ref *48> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 121, character: 14 },
        end: Position { line: 123, character: 17 },
        scope: <ref *47> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'a', 'b', 'RSHIFT' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *49],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(17) {
        'a',
        'b',
        'position',
        'max',
        'm',
        'len',
        'LSHIFT',
        'code',
        'c',
        'buffer',
        'output',
        'push',
        'get',
        'AND',
        'RSHIFT',
        'padding',
        'join'
      },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *49],
          variable: [ASTIdentifier],
          init: [Circular *49]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *49],
          variable: [ASTIdentifier],
          init: [ASTIndexExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *49],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *49],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *49],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *49],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *49],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *49],
          variable: [ASTIdentifier],
          init: [ASTIndexExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *49],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *49],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *49],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *49],
          variable: [ASTIdentifier],
          init: [ASTIndexExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *49],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *49],
          name: 'a'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *49],
          name: 'b'
        }
      ]
    },
    <ref *50> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 158, character: 18 },
      end: Position { line: 202, character: 13 },
      scope: <ref *45> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: <ref *44> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'len',
          'max',
          'get',
          'Crypto',
          'decrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTIfStatement {
          type: 'IfShortcutStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          clauses: [Array]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          variable: [ASTIdentifier],
          init: [ASTListConstructorExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTFunctionStatement]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTFunctionStatement]
        },
        ASTWhileStatement {
          type: 'WhileStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTEvaluationExpression]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(21) {
        'pw',
        'me',
        'defaultSecret',
        'getHash',
        'hashPointer',
        'hashLength',
        'len',
        'output',
        'bitCounter',
        'bitStorage',
        'position',
        'max',
        'AND',
        'test',
        'Crypto',
        'constructor',
        'pwd',
        'foo',
        'encrypt',
        'decrypted',
        'decrypt'
      },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          variable: [ASTIdentifier],
          init: [ASTListConstructorExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        <ref *25> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          variable: [ASTMemberExpression],
          init: [Circular *50]
        },
        <ref *26> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        <ref *27> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        <ref *28> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        <ref *29> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          name: 'str'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          name: 'pw'
        }
      ]
    },
    <ref *51> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 170, character: 11 },
      end: Position { line: 172, character: 17 },
      scope: <ref *50> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: <ref *45> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(21) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'len',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'test',
          'Crypto',
          'constructor',
          'pwd',
          'foo',
          'encrypt',
          'decrypted',
          'decrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *51],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(3) { 'a', 'b', 'RSHIFT' },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *51],
          variable: [ASTIdentifier],
          init: [Circular *51]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *51],
          name: 'a'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *51],
          name: 'b'
        }
      ]
    },
    <ref *52> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 173, character: 14 },
      end: Position { line: 175, character: 17 },
      scope: <ref *51> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 170, character: 11 },
        end: Position { line: 172, character: 17 },
        scope: <ref *50> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'a', 'b', 'RSHIFT' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *52],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(23) {
        'a',
        'b',
        'position',
        'max',
        'buffer',
        'me',
        'table',
        'indexOf',
        'currentBit',
        'bitCounter',
        'bitStorage',
        'expectedHashIndex',
        'hashPointer',
        'hashLength',
        'm',
        'operation',
        'AND',
        'RSHIFT',
        'charCode',
        'maxCharCode',
        'output',
        'push',
        'join'
      },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *52],
          variable: [ASTIdentifier],
          init: [Circular *52]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *52],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *52],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *52],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *52],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *52],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *52],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *52],
          variable: [ASTIdentifier],
          init: [ASTIndexExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *52],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *52],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *52],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *52],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *52],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *52],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *52],
          name: 'a'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *52],
          name: 'b'
        }
      ]
    }
  ]
}"
`;

exports[`parse default scripts pseudo-crypto.src unsafe 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 213, character: 1 },
  scope: null,
  body: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 12 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 7 },
        scope: [Circular *1],
        name: 'String'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 10 },
        end: Position { line: 1, character: 12 },
        scope: [Circular *1],
        fields: []
      }
    },
    <ref *2> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 6, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 3, character: 22 },
        end: Position { line: 6, character: 13 },
        scope: [Circular *1],
        body: [ [ASTAssignmentStatement], [ASTReturnStatement] ],
        namespaces: Set(2) { 'String', 'parse' },
        assignments: [ [ASTAssignmentStatement], [Circular *2] ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 3, character: 7 },
        end: Position { line: 3, character: 21 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'constructor'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 3, character: 22 },
        end: Position { line: 6, character: 13 },
        scope: [Circular *1],
        body: [ [ASTAssignmentStatement], [ASTReturnStatement] ],
        namespaces: Set(2) { 'String', 'parse' },
        assignments: [ [ASTAssignmentStatement], [Circular *2] ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    <ref *3> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 8, character: 1 },
      end: Position { line: 19, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 16 },
        end: Position { line: 19, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'values',
          'result',
          'index',
          'maxIndex',
          'len',
          'replace',
          'constructor',
          'String',
          'startsWith'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *3]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 8, character: 7 },
        end: Position { line: 8, character: 15 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'parse'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 16 },
        end: Position { line: 19, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'values',
          'result',
          'index',
          'maxIndex',
          'len',
          'replace',
          'constructor',
          'String',
          'startsWith'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *3]
        ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    <ref *4> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 21, character: 1 },
      end: Position { line: 23, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 21, character: 21 },
        end: Position { line: 23, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'indexOf', 'String', 'substr' },
        assignments: [ [Circular *4] ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 21, character: 7 },
        end: Position { line: 21, character: 20 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'startsWith'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 21, character: 21 },
        end: Position { line: 23, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'indexOf', 'String', 'substr' },
        assignments: [ [Circular *4] ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    <ref *5> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 25, character: 1 },
      end: Position { line: 27, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 25, character: 17 },
        end: Position { line: 27, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(5) {
          'startIndex',
          'endIndex',
          'constructor',
          'String',
          'indexOf'
        },
        assignments: [ [Circular *5] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 25, character: 7 },
        end: Position { line: 25, character: 16 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'substr'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 25, character: 17 },
        end: Position { line: 27, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(5) {
          'startIndex',
          'endIndex',
          'constructor',
          'String',
          'indexOf'
        },
        assignments: [ [Circular *5] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    <ref *6> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 29, character: 1 },
      end: Position { line: 31, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 29, character: 18 },
        end: Position { line: 31, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'indexOf', 'String', 'replace' },
        assignments: [ [Circular *6] ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 29, character: 7 },
        end: Position { line: 29, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'indexOf'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 29, character: 18 },
        end: Position { line: 31, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'indexOf', 'String', 'replace' },
        assignments: [ [Circular *6] ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    <ref *7> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 33, character: 1 },
      end: Position { line: 35, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 18 },
        end: Position { line: 35, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(5) {
          'newStr',
          'constructor',
          'replace',
          'String',
          'remove'
        },
        assignments: [ [Circular *7] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 33, character: 7 },
        end: Position { line: 33, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'replace'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 18 },
        end: Position { line: 35, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(5) {
          'newStr',
          'constructor',
          'replace',
          'String',
          'remove'
        },
        assignments: [ [Circular *7] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    <ref *8> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 37, character: 1 },
      end: Position { line: 39, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 37, character: 17 },
        end: Position { line: 39, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(4) { 'constructor', 'remove', 'String', 'toString' },
        assignments: [ [Circular *8] ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 37, character: 7 },
        end: Position { line: 37, character: 16 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'remove'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 37, character: 17 },
        end: Position { line: 39, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(4) { 'constructor', 'remove', 'String', 'toString' },
        assignments: [ [Circular *8] ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    <ref *9> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 41, character: 1 },
      end: Position { line: 43, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 41, character: 19 },
        end: Position { line: 43, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(2) { 'String', 'length' },
        assignments: [ [Circular *9] ],
        parameters: []
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 41, character: 7 },
        end: Position { line: 41, character: 18 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'toString'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 41, character: 19 },
        end: Position { line: 43, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(2) { 'String', 'length' },
        assignments: [ [Circular *9] ],
        parameters: []
      }
    },
    <ref *10> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 45, character: 1 },
      end: Position { line: 47, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 17 },
        end: Position { line: 47, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'len', 'String', 'split' },
        assignments: [ [Circular *10] ],
        parameters: []
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 45, character: 7 },
        end: Position { line: 45, character: 16 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'length'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 17 },
        end: Position { line: 47, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'len', 'String', 'split' },
        assignments: [ [Circular *10] ],
        parameters: []
      }
    },
    <ref *11> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 49, character: 1 },
      end: Position { line: 51, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 49, character: 16 },
        end: Position { line: 51, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(4) { 'seperator', 'split', 'String', 'trim' },
        assignments: [ [Circular *11] ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 49, character: 7 },
        end: Position { line: 49, character: 15 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'split'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 49, character: 16 },
        end: Position { line: 51, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(4) { 'seperator', 'split', 'String', 'trim' },
        assignments: [ [Circular *11] ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    <ref *12> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 53, character: 1 },
      end: Position { line: 55, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 53, character: 15 },
        end: Position { line: 55, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(5) {
          'seperator',
          'constructor',
          'trim',
          'Error',
          'String'
        },
        assignments: [
          [Circular *12],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 53, character: 7 },
        end: Position { line: 53, character: 14 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'trim'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 53, character: 15 },
        end: Position { line: 55, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(5) {
          'seperator',
          'constructor',
          'trim',
          'Error',
          'String'
        },
        assignments: [
          [Circular *12],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    <ref *13> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 57, character: 1 },
      end: Position { line: 57, character: 11 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 53, character: 15 },
        end: Position { line: 55, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(5) {
          'seperator',
          'constructor',
          'trim',
          'Error',
          'String'
        },
        assignments: [
          [ASTAssignmentStatement],
          [Circular *13],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 57, character: 1 },
        end: Position { line: 57, character: 6 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'Error'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 57, character: 9 },
        end: Position { line: 57, character: 11 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        fields: []
      }
    },
    <ref *14> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 59, character: 1 },
      end: Position { line: 59, character: 22 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 53, character: 15 },
        end: Position { line: 55, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(5) {
          'seperator',
          'constructor',
          'trim',
          'Error',
          'String'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *14]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 59, character: 6 },
        end: Position { line: 59, character: 15 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'String'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'Error'
        }
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 59, character: 16 },
        end: Position { line: 59, character: 22 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'String'
      }
    },
    <ref *15> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 61, character: 1 },
      end: Position { line: 68, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 61, character: 21 },
        end: Position { line: 68, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'message',
          'values',
          'm',
          'String',
          'constructor',
          'parse',
          'toString',
          'Error',
          'throw'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *15]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 61, character: 6 },
        end: Position { line: 61, character: 20 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'constructor'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'Error'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 61, character: 21 },
        end: Position { line: 68, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'message',
          'values',
          'm',
          'String',
          'constructor',
          'parse',
          'toString',
          'Error',
          'throw'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *15]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    <ref *16> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 70, character: 1 },
      end: Position { line: 72, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 70, character: 15 },
        end: Position { line: 72, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTCallStatement] ],
        namespaces: Set(7) {
          'message',
          'Crypto',
          'defaultCharset',
          'defaultSecret',
          'maxCharCode',
          'Error',
          'constructor'
        },
        assignments: [
          [Circular *16],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 70, character: 6 },
        end: Position { line: 70, character: 14 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'throw'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'Error'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 70, character: 15 },
        end: Position { line: 72, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTCallStatement] ],
        namespaces: Set(7) {
          'message',
          'Crypto',
          'defaultCharset',
          'defaultSecret',
          'maxCharCode',
          'Error',
          'constructor'
        },
        assignments: [
          [Circular *16],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      }
    },
    <ref *17> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 74, character: 1 },
      end: Position { line: 74, character: 12 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 70, character: 15 },
        end: Position { line: 72, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTCallStatement] ],
        namespaces: Set(7) {
          'message',
          'Crypto',
          'defaultCharset',
          'defaultSecret',
          'maxCharCode',
          'Error',
          'constructor'
        },
        assignments: [
          [ASTAssignmentStatement],
          [Circular *17],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 74, character: 1 },
        end: Position { line: 74, character: 7 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        name: 'Crypto'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 74, character: 10 },
        end: Position { line: 74, character: 12 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        fields: []
      }
    },
    <ref *18> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 76, character: 1 },
      end: Position { line: 76, character: 91 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 70, character: 15 },
        end: Position { line: 72, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTCallStatement] ],
        namespaces: Set(7) {
          'message',
          'Crypto',
          'defaultCharset',
          'defaultSecret',
          'maxCharCode',
          'Error',
          'constructor'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *18],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 76, character: 7 },
        end: Position { line: 76, character: 24 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'defaultCharset'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'Crypto'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 76, character: 25 },
        end: Position { line: 76, character: 91 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        value: 'QWERTZUIOPASDFGHJKLYXCVBNMqwertzuiopasdfghjklyxcvbnm1234567890+-',
        raw: '\\"QWERTZUIOPASDFGHJKLYXCVBNMqwertzuiopasdfghjklyxcvbnm1234567890+-\\"'
      }
    },
    <ref *19> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 77, character: 1 },
      end: Position { line: 77, character: 33 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 70, character: 15 },
        end: Position { line: 72, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTCallStatement] ],
        namespaces: Set(7) {
          'message',
          'Crypto',
          'defaultCharset',
          'defaultSecret',
          'maxCharCode',
          'Error',
          'constructor'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *19],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 77, character: 7 },
        end: Position { line: 77, character: 23 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'defaultSecret'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'Crypto'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 77, character: 24 },
        end: Position { line: 77, character: 33 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        value: 'test123',
        raw: '\\"test123\\"'
      }
    },
    <ref *20> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 78, character: 1 },
      end: Position { line: 78, character: 27 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 70, character: 15 },
        end: Position { line: 72, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTCallStatement] ],
        namespaces: Set(7) {
          'message',
          'Crypto',
          'defaultCharset',
          'defaultSecret',
          'maxCharCode',
          'Error',
          'constructor'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *20],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 78, character: 7 },
        end: Position { line: 78, character: 21 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'maxCharCode'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'Crypto'
        }
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 78, character: 22 },
        end: Position { line: 78, character: 27 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        value: 55295,
        raw: '55295'
      }
    },
    <ref *21> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 79, character: 1 },
      end: Position { line: 79, character: 21 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 70, character: 15 },
        end: Position { line: 72, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTCallStatement] ],
        namespaces: Set(7) {
          'message',
          'Crypto',
          'defaultCharset',
          'defaultSecret',
          'maxCharCode',
          'Error',
          'constructor'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *21]
        ],
        parameters: []
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 79, character: 7 },
        end: Position { line: 79, character: 15 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'Error'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'Crypto'
        }
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 79, character: 16 },
        end: Position { line: 79, character: 21 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        name: 'Error'
      }
    },
    <ref *22> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 81, character: 1 },
      end: Position { line: 90, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 81, character: 22 },
        end: Position { line: 90, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(12) {
          'defaultSecret',
          'hashFn',
          'charset',
          'me',
          'table',
          'defaultCharset',
          'len',
          'Error',
          'constructor',
          'throw',
          'Crypto',
          'getHash'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *22]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 81, character: 7 },
        end: Position { line: 81, character: 21 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'constructor'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'Crypto'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 81, character: 22 },
        end: Position { line: 90, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(12) {
          'defaultSecret',
          'hashFn',
          'charset',
          'me',
          'table',
          'defaultCharset',
          'len',
          'Error',
          'constructor',
          'throw',
          'Crypto',
          'getHash'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *22]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    <ref *23> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 92, character: 1 },
      end: Position { line: 101, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 92, character: 18 },
        end: Position { line: 101, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTCallStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'pw',
          'me',
          'x',
          'hashFn',
          'push',
          'code',
          'reverse',
          'Crypto',
          'encrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *23]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 92, character: 7 },
        end: Position { line: 92, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'getHash'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'Crypto'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 92, character: 18 },
        end: Position { line: 101, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTCallStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'pw',
          'me',
          'x',
          'hashFn',
          'push',
          'code',
          'reverse',
          'Crypto',
          'encrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *23]
        ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    <ref *24> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 103, character: 1 },
      end: Position { line: 156, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'len',
          'max',
          'get',
          'Crypto',
          'decrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *24]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 103, character: 7 },
        end: Position { line: 103, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'encrypt'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'Crypto'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'len',
          'max',
          'get',
          'Crypto',
          'decrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *24]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    <ref *25> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 158, character: 1 },
      end: Position { line: 202, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(21) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'len',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'test',
          'Crypto',
          'constructor',
          'pwd',
          'foo',
          'encrypt',
          'decrypted',
          'decrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *25],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 158, character: 7 },
        end: Position { line: 158, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'decrypt'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'Crypto'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(21) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'len',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'test',
          'Crypto',
          'constructor',
          'pwd',
          'foo',
          'encrypt',
          'decrypted',
          'decrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *25],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    <ref *26> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 204, character: 1 },
      end: Position { line: 204, character: 40 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(21) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'len',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'test',
          'Crypto',
          'constructor',
          'pwd',
          'foo',
          'encrypt',
          'decrypted',
          'decrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *26],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 204, character: 1 },
        end: Position { line: 204, character: 5 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'test'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 204, character: 32 },
        end: Position { line: 204, character: 40 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTUnaryExpression]
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    <ref *27> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 206, character: 1 },
      end: Position { line: 206, character: 14 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(21) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'len',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'test',
          'Crypto',
          'constructor',
          'pwd',
          'foo',
          'encrypt',
          'decrypted',
          'decrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *27],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 206, character: 1 },
        end: Position { line: 206, character: 4 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'pwd'
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 206, character: 7 },
        end: Position { line: 206, character: 14 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        value: 'abcde',
        raw: '\\"abcde\\"'
      }
    },
    <ref *28> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 208, character: 1 },
      end: Position { line: 208, character: 24 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(21) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'len',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'test',
          'Crypto',
          'constructor',
          'pwd',
          'foo',
          'encrypt',
          'decrypted',
          'decrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *28],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 208, character: 1 },
        end: Position { line: 208, character: 4 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'foo'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 208, character: 19 },
        end: Position { line: 208, character: 24 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTIdentifier] ]
      }
    },
    <ref *29> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 209, character: 1 },
      end: Position { line: 209, character: 30 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(21) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'len',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'test',
          'Crypto',
          'constructor',
          'pwd',
          'foo',
          'encrypt',
          'decrypted',
          'decrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *29]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 209, character: 1 },
        end: Position { line: 209, character: 10 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'decrypted'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 209, character: 25 },
        end: Position { line: 209, character: 30 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTIdentifier] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 211, character: 1 },
      end: Position { line: 211, character: 11 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(21) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'len',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'test',
          'Crypto',
          'constructor',
          'pwd',
          'foo',
          'encrypt',
          'decrypted',
          'decrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 211, character: 6 },
        end: Position { line: 211, character: 11 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'print'
        },
        arguments: [ [ASTIdentifier] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 212, character: 1 },
      end: Position { line: 212, character: 17 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(21) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'len',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'test',
          'Crypto',
          'constructor',
          'pwd',
          'foo',
          'encrypt',
          'decrypted',
          'decrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 212, character: 6 },
        end: Position { line: 212, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'print'
        },
        arguments: [ [ASTIdentifier] ]
      }
    }
  ],
  namespaces: Set(2) { 'String', 'constructor' },
  assignments: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 12 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 7 },
        scope: [Circular *1],
        name: 'String'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 10 },
        end: Position { line: 1, character: 12 },
        scope: [Circular *1],
        fields: []
      }
    }
  ],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 10, character: 13 },
      end: Position { line: 10, character: 14 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 16 },
        end: Position { line: 19, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'values',
          'result',
          'index',
          'maxIndex',
          'len',
          'replace',
          'constructor',
          'String',
          'startsWith'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 14, character: 33 },
      end: Position { line: 14, character: 36 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 16 },
        end: Position { line: 19, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'values',
          'result',
          'index',
          'maxIndex',
          'len',
          'replace',
          'constructor',
          'String',
          'startsWith'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      value: '$',
      raw: '\\"$\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 15, character: 25 },
      end: Position { line: 15, character: 26 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 16 },
        end: Position { line: 19, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'values',
          'result',
          'index',
          'maxIndex',
          'len',
          'replace',
          'constructor',
          'String',
          'startsWith'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 22, character: 37 },
      end: Position { line: 22, character: 38 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 21, character: 21 },
        end: Position { line: 23, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'indexOf', 'String', 'substr' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NilLiteral',
      start: Position { line: 64, character: 19 },
      end: Position { line: 64, character: 23 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 61, character: 21 },
        end: Position { line: 68, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'message',
          'values',
          'm',
          'String',
          'constructor',
          'parse',
          'toString',
          'Error',
          'throw'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: null,
      raw: 'null'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 71, character: 10 },
      end: Position { line: 71, character: 27 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 70, character: 15 },
        end: Position { line: 72, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTCallStatement] ],
        namespaces: Set(7) {
          'message',
          'Crypto',
          'defaultCharset',
          'defaultSecret',
          'maxCharCode',
          'Error',
          'constructor'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      value: '<color=#ff0000>',
      raw: '\\"<color=#ff0000>\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 71, character: 45 },
      end: Position { line: 71, character: 55 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 70, character: 15 },
        end: Position { line: 72, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTCallStatement] ],
        namespaces: Set(7) {
          'message',
          'Crypto',
          'defaultCharset',
          'defaultSecret',
          'maxCharCode',
          'Error',
          'constructor'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      value: '</color>',
      raw: '\\"</color>\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 76, character: 25 },
      end: Position { line: 76, character: 91 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 70, character: 15 },
        end: Position { line: 72, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTCallStatement] ],
        namespaces: Set(7) {
          'message',
          'Crypto',
          'defaultCharset',
          'defaultSecret',
          'maxCharCode',
          'Error',
          'constructor'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      value: 'QWERTZUIOPASDFGHJKLYXCVBNMqwertzuiopasdfghjklyxcvbnm1234567890+-',
      raw: '\\"QWERTZUIOPASDFGHJKLYXCVBNMqwertzuiopasdfghjklyxcvbnm1234567890+-\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 77, character: 24 },
      end: Position { line: 77, character: 33 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 70, character: 15 },
        end: Position { line: 72, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTCallStatement] ],
        namespaces: Set(7) {
          'message',
          'Crypto',
          'defaultCharset',
          'defaultSecret',
          'maxCharCode',
          'Error',
          'constructor'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      value: 'test123',
      raw: '\\"test123\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 78, character: 22 },
      end: Position { line: 78, character: 27 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 70, character: 15 },
        end: Position { line: 72, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTCallStatement] ],
        namespaces: Set(7) {
          'message',
          'Crypto',
          'defaultCharset',
          'defaultSecret',
          'maxCharCode',
          'Error',
          'constructor'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      value: 55295,
      raw: '55295'
    },
    ASTLiteral {
      type: 'NilLiteral',
      start: Position { line: 86, character: 20 },
      end: Position { line: 86, character: 24 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 81, character: 22 },
        end: Position { line: 90, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(12) {
          'defaultSecret',
          'hashFn',
          'charset',
          'me',
          'table',
          'defaultCharset',
          'len',
          'Error',
          'constructor',
          'throw',
          'Crypto',
          'getHash'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier], [ASTIdentifier] ]
      },
      value: null,
      raw: 'null'
    },
    ASTLiteral {
      type: 'NilLiteral',
      start: Position { line: 87, character: 19 },
      end: Position { line: 87, character: 23 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 81, character: 22 },
        end: Position { line: 90, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(12) {
          'defaultSecret',
          'hashFn',
          'charset',
          'me',
          'table',
          'defaultCharset',
          'len',
          'Error',
          'constructor',
          'throw',
          'Crypto',
          'getHash'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier], [ASTIdentifier] ]
      },
      value: null,
      raw: 'null'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 88, character: 24 },
      end: Position { line: 88, character: 26 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 81, character: 22 },
        end: Position { line: 90, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(12) {
          'defaultSecret',
          'hashFn',
          'charset',
          'me',
          'table',
          'defaultCharset',
          'len',
          'Error',
          'constructor',
          'throw',
          'Crypto',
          'getHash'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 64,
      raw: '64'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 88, character: 59 },
      end: Position { line: 88, character: 82 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 81, character: 22 },
        end: Position { line: 90, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(12) {
          'defaultSecret',
          'hashFn',
          'charset',
          'me',
          'table',
          'defaultCharset',
          'len',
          'Error',
          'constructor',
          'throw',
          'Crypto',
          'getHash'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 'Invalid charset $0...',
      raw: '\\"Invalid charset $0...\\"'
    },
    ASTLiteral {
      type: 'NilLiteral',
      start: Position { line: 105, character: 15 },
      end: Position { line: 105, character: 19 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'len',
          'max',
          'get',
          'Crypto',
          'decrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: null,
      raw: 'null'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 107, character: 19 },
      end: Position { line: 107, character: 20 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'len',
          'max',
          'get',
          'Crypto',
          'decrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 109, character: 16 },
      end: Position { line: 109, character: 17 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'len',
          'max',
          'get',
          'Crypto',
          'decrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 110, character: 25 },
      end: Position { line: 110, character: 26 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'len',
          'max',
          'get',
          'Crypto',
          'decrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 3,
      raw: '3'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 114, character: 40 },
      end: Position { line: 114, character: 61 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 112, character: 11 },
        end: Position { line: 117, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTIfStatement], [ASTReturnStatement] ],
        namespaces: Set(7) {
          'v',
          'me',
          'table',
          'Error',
          'constructor',
          'throw',
          'AND'
        },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier] ]
      },
      value: 'Invalid index $0...',
      raw: '\\"Invalid index $0...\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 119, character: 24 },
      end: Position { line: 119, character: 27 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 118, character: 11 },
        end: Position { line: 120, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'a', 'b', 'LSHIFT' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: '&',
      raw: '\\"&\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 122, character: 24 },
      end: Position { line: 122, character: 28 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 121, character: 14 },
        end: Position { line: 123, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'a', 'b', 'RSHIFT' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: '<<',
      raw: '\\"<<\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 125, character: 24 },
      end: Position { line: 125, character: 28 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: '>>',
      raw: '\\">>\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 128, character: 40 },
      end: Position { line: 128, character: 41 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 129, character: 44 },
      end: Position { line: 129, character: 46 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 16,
      raw: '16'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 130, character: 35 },
      end: Position { line: 130, character: 36 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 130, character: 48 },
      end: Position { line: 130, character: 49 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 8,
      raw: '8'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 131, character: 28 },
      end: Position { line: 131, character: 29 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 2,
      raw: '2'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 133, character: 44 },
      end: Position { line: 133, character: 46 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 18,
      raw: '18'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 133, character: 49 },
      end: Position { line: 133, character: 51 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 63,
      raw: '63'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 134, character: 44 },
      end: Position { line: 134, character: 46 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 12,
      raw: '12'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 134, character: 49 },
      end: Position { line: 134, character: 51 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 63,
      raw: '63'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 135, character: 44 },
      end: Position { line: 135, character: 45 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 6,
      raw: '6'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 135, character: 48 },
      end: Position { line: 135, character: 50 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 63,
      raw: '63'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 136, character: 37 },
      end: Position { line: 136, character: 39 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 63,
      raw: '63'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 137, character: 31 },
      end: Position { line: 137, character: 32 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 3,
      raw: '3'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 139, character: 20 },
      end: Position { line: 139, character: 21 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 2,
      raw: '2'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 140, character: 40 },
      end: Position { line: 140, character: 41 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 141, character: 44 },
      end: Position { line: 141, character: 45 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 8,
      raw: '8'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 142, character: 28 },
      end: Position { line: 142, character: 29 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 144, character: 40 },
      end: Position { line: 144, character: 42 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 10,
      raw: '10'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 145, character: 44 },
      end: Position { line: 145, character: 45 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 4,
      raw: '4'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 145, character: 48 },
      end: Position { line: 145, character: 50 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 63,
      raw: '63'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 146, character: 44 },
      end: Position { line: 146, character: 45 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 2,
      raw: '2'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 146, character: 48 },
      end: Position { line: 146, character: 50 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 63,
      raw: '63'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 147, character: 21 },
      end: Position { line: 147, character: 24 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: '=',
      raw: '\\"=\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 148, character: 25 },
      end: Position { line: 148, character: 26 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 149, character: 40 },
      end: Position { line: 149, character: 41 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 151, character: 40 },
      end: Position { line: 151, character: 41 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 2,
      raw: '2'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 152, character: 44 },
      end: Position { line: 152, character: 45 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 4,
      raw: '4'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 152, character: 48 },
      end: Position { line: 152, character: 50 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 63,
      raw: '63'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 153, character: 21 },
      end: Position { line: 153, character: 25 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: '==',
      raw: '\\"==\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 155, character: 24 },
      end: Position { line: 155, character: 26 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(17) {
          'a',
          'b',
          'position',
          'max',
          'm',
          'len',
          'LSHIFT',
          'code',
          'c',
          'buffer',
          'output',
          'push',
          'get',
          'AND',
          'RSHIFT',
          'padding',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: '',
      raw: '\\"\\"'
    },
    ASTLiteral {
      type: 'NilLiteral',
      start: Position { line: 160, character: 15 },
      end: Position { line: 160, character: 19 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(21) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'len',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'test',
          'Crypto',
          'constructor',
          'pwd',
          'foo',
          'encrypt',
          'decrypted',
          'decrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: null,
      raw: 'null'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 162, character: 19 },
      end: Position { line: 162, character: 20 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(21) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'len',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'test',
          'Crypto',
          'constructor',
          'pwd',
          'foo',
          'encrypt',
          'decrypted',
          'decrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 165, character: 18 },
      end: Position { line: 165, character: 19 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(21) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'len',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'test',
          'Crypto',
          'constructor',
          'pwd',
          'foo',
          'encrypt',
          'decrypted',
          'decrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 166, character: 18 },
      end: Position { line: 166, character: 19 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(21) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'len',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'test',
          'Crypto',
          'constructor',
          'pwd',
          'foo',
          'encrypt',
          'decrypted',
          'decrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 167, character: 16 },
      end: Position { line: 167, character: 17 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(21) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'len',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'test',
          'Crypto',
          'constructor',
          'pwd',
          'foo',
          'encrypt',
          'decrypted',
          'decrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 168, character: 19 },
      end: Position { line: 168, character: 20 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(21) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'len',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'test',
          'Crypto',
          'constructor',
          'pwd',
          'foo',
          'encrypt',
          'decrypted',
          'decrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 171, character: 24 },
      end: Position { line: 171, character: 27 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 170, character: 11 },
        end: Position { line: 172, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'a', 'b', 'RSHIFT' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: '&',
      raw: '\\"&\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 174, character: 24 },
      end: Position { line: 174, character: 28 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 173, character: 14 },
        end: Position { line: 175, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(23) {
          'a',
          'b',
          'position',
          'max',
          'buffer',
          'me',
          'table',
          'indexOf',
          'currentBit',
          'bitCounter',
          'bitStorage',
          'expectedHashIndex',
          'hashPointer',
          'hashLength',
          'm',
          'operation',
          'AND',
          'RSHIFT',
          'charCode',
          'maxCharCode',
          'output',
          'push',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: '>>',
      raw: '\\">>\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 179, character: 35 },
      end: Position { line: 179, character: 36 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 173, character: 14 },
        end: Position { line: 175, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(23) {
          'a',
          'b',
          'position',
          'max',
          'buffer',
          'me',
          'table',
          'indexOf',
          'currentBit',
          'bitCounter',
          'bitStorage',
          'expectedHashIndex',
          'hashPointer',
          'hashLength',
          'm',
          'operation',
          'AND',
          'RSHIFT',
          'charCode',
          'maxCharCode',
          'output',
          'push',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 180, character: 26 },
      end: Position { line: 180, character: 27 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 173, character: 14 },
        end: Position { line: 175, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(23) {
          'a',
          'b',
          'position',
          'max',
          'buffer',
          'me',
          'table',
          'indexOf',
          'currentBit',
          'bitCounter',
          'bitStorage',
          'expectedHashIndex',
          'hashPointer',
          'hashLength',
          'm',
          'operation',
          'AND',
          'RSHIFT',
          'charCode',
          'maxCharCode',
          'output',
          'push',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 4,
      raw: '4'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 181, character: 39 },
      end: Position { line: 181, character: 41 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 173, character: 14 },
        end: Position { line: 175, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(23) {
          'a',
          'b',
          'position',
          'max',
          'buffer',
          'me',
          'table',
          'indexOf',
          'currentBit',
          'bitCounter',
          'bitStorage',
          'expectedHashIndex',
          'hashPointer',
          'hashLength',
          'm',
          'operation',
          'AND',
          'RSHIFT',
          'charCode',
          'maxCharCode',
          'output',
          'push',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 64,
      raw: '64'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 185, character: 26 },
      end: Position { line: 185, character: 27 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 173, character: 14 },
        end: Position { line: 175, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(23) {
          'a',
          'b',
          'position',
          'max',
          'buffer',
          'me',
          'table',
          'indexOf',
          'currentBit',
          'bitCounter',
          'bitStorage',
          'expectedHashIndex',
          'hashPointer',
          'hashLength',
          'm',
          'operation',
          'AND',
          'RSHIFT',
          'charCode',
          'maxCharCode',
          'output',
          'push',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 4,
      raw: '4'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 186, character: 54 },
      end: Position { line: 186, character: 55 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 173, character: 14 },
        end: Position { line: 175, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(23) {
          'a',
          'b',
          'position',
          'max',
          'buffer',
          'me',
          'table',
          'indexOf',
          'currentBit',
          'bitCounter',
          'bitStorage',
          'expectedHashIndex',
          'hashPointer',
          'hashLength',
          'm',
          'operation',
          'AND',
          'RSHIFT',
          'charCode',
          'maxCharCode',
          'output',
          'push',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 3,
      raw: '3'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 186, character: 59 },
      end: Position { line: 186, character: 60 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 173, character: 14 },
        end: Position { line: 175, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(23) {
          'a',
          'b',
          'position',
          'max',
          'buffer',
          'me',
          'table',
          'indexOf',
          'currentBit',
          'bitCounter',
          'bitStorage',
          'expectedHashIndex',
          'hashPointer',
          'hashLength',
          'm',
          'operation',
          'AND',
          'RSHIFT',
          'charCode',
          'maxCharCode',
          'output',
          'push',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 3,
      raw: '3'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 186, character: 77 },
      end: Position { line: 186, character: 78 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 173, character: 14 },
        end: Position { line: 175, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(23) {
          'a',
          'b',
          'position',
          'max',
          'buffer',
          'me',
          'table',
          'indexOf',
          'currentBit',
          'bitCounter',
          'bitStorage',
          'expectedHashIndex',
          'hashPointer',
          'hashLength',
          'm',
          'operation',
          'AND',
          'RSHIFT',
          'charCode',
          'maxCharCode',
          'output',
          'push',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 189, character: 30 },
      end: Position { line: 189, character: 31 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 173, character: 14 },
        end: Position { line: 175, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(23) {
          'a',
          'b',
          'position',
          'max',
          'buffer',
          'me',
          'table',
          'indexOf',
          'currentBit',
          'bitCounter',
          'bitStorage',
          'expectedHashIndex',
          'hashPointer',
          'hashLength',
          'm',
          'operation',
          'AND',
          'RSHIFT',
          'charCode',
          'maxCharCode',
          'output',
          'push',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 2,
      raw: '2'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 189, character: 46 },
      end: Position { line: 189, character: 47 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 173, character: 14 },
        end: Position { line: 175, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(23) {
          'a',
          'b',
          'position',
          'max',
          'buffer',
          'me',
          'table',
          'indexOf',
          'currentBit',
          'bitCounter',
          'bitStorage',
          'expectedHashIndex',
          'hashPointer',
          'hashLength',
          'm',
          'operation',
          'AND',
          'RSHIFT',
          'charCode',
          'maxCharCode',
          'output',
          'push',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 6,
      raw: '6'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 191, character: 29 },
      end: Position { line: 191, character: 32 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 173, character: 14 },
        end: Position { line: 175, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(23) {
          'a',
          'b',
          'position',
          'max',
          'buffer',
          'me',
          'table',
          'indexOf',
          'currentBit',
          'bitCounter',
          'bitStorage',
          'expectedHashIndex',
          'hashPointer',
          'hashLength',
          'm',
          'operation',
          'AND',
          'RSHIFT',
          'charCode',
          'maxCharCode',
          'output',
          'push',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 255,
      raw: '255'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 192, character: 30 },
      end: Position { line: 192, character: 31 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 173, character: 14 },
        end: Position { line: 175, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(23) {
          'a',
          'b',
          'position',
          'max',
          'buffer',
          'me',
          'table',
          'indexOf',
          'currentBit',
          'bitCounter',
          'bitStorage',
          'expectedHashIndex',
          'hashPointer',
          'hashLength',
          'm',
          'operation',
          'AND',
          'RSHIFT',
          'charCode',
          'maxCharCode',
          'output',
          'push',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 197, character: 41 },
      end: Position { line: 197, character: 42 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 173, character: 14 },
        end: Position { line: 175, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(23) {
          'a',
          'b',
          'position',
          'max',
          'buffer',
          'me',
          'table',
          'indexOf',
          'currentBit',
          'bitCounter',
          'bitStorage',
          'expectedHashIndex',
          'hashPointer',
          'hashLength',
          'm',
          'operation',
          'AND',
          'RSHIFT',
          'charCode',
          'maxCharCode',
          'output',
          'push',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 199, character: 31 },
      end: Position { line: 199, character: 32 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 173, character: 14 },
        end: Position { line: 175, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(23) {
          'a',
          'b',
          'position',
          'max',
          'buffer',
          'me',
          'table',
          'indexOf',
          'currentBit',
          'bitCounter',
          'bitStorage',
          'expectedHashIndex',
          'hashPointer',
          'hashLength',
          'm',
          'operation',
          'AND',
          'RSHIFT',
          'charCode',
          'maxCharCode',
          'output',
          'push',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 201, character: 24 },
      end: Position { line: 201, character: 26 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 173, character: 14 },
        end: Position { line: 175, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(23) {
          'a',
          'b',
          'position',
          'max',
          'buffer',
          'me',
          'table',
          'indexOf',
          'currentBit',
          'bitCounter',
          'bitStorage',
          'expectedHashIndex',
          'hashPointer',
          'hashLength',
          'm',
          'operation',
          'AND',
          'RSHIFT',
          'charCode',
          'maxCharCode',
          'output',
          'push',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: '',
      raw: '\\"\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 204, character: 33 },
      end: Position { line: 204, character: 39 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(21) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'len',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'test',
          'Crypto',
          'constructor',
          'pwd',
          'foo',
          'encrypt',
          'decrypted',
          'decrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 'test',
      raw: '\\"test\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 206, character: 7 },
      end: Position { line: 206, character: 14 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(21) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'len',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'test',
          'Crypto',
          'constructor',
          'pwd',
          'foo',
          'encrypt',
          'decrypted',
          'decrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 'abcde',
      raw: '\\"abcde\\"'
    }
  ],
  scopes: [
    <ref *30> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 3, character: 22 },
      end: Position { line: 6, character: 13 },
      scope: [Circular *1],
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *30],
          variable: [ASTMemberExpression],
          init: [ASTIdentifier]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *30],
          argument: [ASTIdentifier]
        }
      ],
      namespaces: Set(2) { 'String', 'parse' },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *30],
          variable: [ASTMemberExpression],
          init: [ASTIdentifier]
        },
        <ref *2> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *30],
          variable: [ASTMemberExpression],
          init: [Circular *30]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *30],
          name: 'str'
        }
      ]
    },
    <ref *31> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 8, character: 16 },
      end: Position { line: 19, character: 13 },
      scope: <ref *30> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 3, character: 22 },
        end: Position { line: 6, character: 13 },
        scope: [Circular *1],
        body: [ [ASTAssignmentStatement], [ASTReturnStatement] ],
        namespaces: Set(2) { 'String', 'parse' },
        assignments: [ [ASTAssignmentStatement], [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier] ]
      },
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *31],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *31],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *31],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTWhileStatement {
          type: 'WhileStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *31],
          body: [Array],
          condition: [ASTEvaluationExpression]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *31],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(9) {
        'values',
        'result',
        'index',
        'maxIndex',
        'len',
        'replace',
        'constructor',
        'String',
        'startsWith'
      },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *31],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *31],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *31],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *31],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *31],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        <ref *3> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *31],
          variable: [ASTMemberExpression],
          init: [Circular *31]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *31],
          name: 'values'
        }
      ]
    },
    <ref *32> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 21, character: 21 },
      end: Position { line: 23, character: 13 },
      scope: <ref *31> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 16 },
        end: Position { line: 19, character: 13 },
        scope: <ref *30> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'values',
          'result',
          'index',
          'maxIndex',
          'len',
          'replace',
          'constructor',
          'String',
          'startsWith'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *32],
          argument: [ASTEvaluationExpression]
        }
      ],
      namespaces: Set(3) { 'indexOf', 'String', 'substr' },
      assignments: [
        <ref *4> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *32],
          variable: [ASTMemberExpression],
          init: [Circular *32]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *32],
          name: 'str'
        }
      ]
    },
    <ref *33> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 25, character: 17 },
      end: Position { line: 27, character: 13 },
      scope: <ref *32> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 21, character: 21 },
        end: Position { line: 23, character: 13 },
        scope: <ref *31> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'indexOf', 'String', 'substr' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier] ]
      },
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *33],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(5) {
        'startIndex',
        'endIndex',
        'constructor',
        'String',
        'indexOf'
      },
      assignments: [
        <ref *5> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *33],
          variable: [ASTMemberExpression],
          init: [Circular *33]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *33],
          name: 'startIndex'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *33],
          name: 'endIndex'
        }
      ]
    },
    <ref *34> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 29, character: 18 },
      end: Position { line: 31, character: 13 },
      scope: <ref *33> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 25, character: 17 },
        end: Position { line: 27, character: 13 },
        scope: <ref *32> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(5) {
          'startIndex',
          'endIndex',
          'constructor',
          'String',
          'indexOf'
        },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *34],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(3) { 'indexOf', 'String', 'replace' },
      assignments: [
        <ref *6> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *34],
          variable: [ASTMemberExpression],
          init: [Circular *34]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *34],
          name: 'str'
        }
      ]
    },
    <ref *35> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 33, character: 18 },
      end: Position { line: 35, character: 13 },
      scope: <ref *34> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 29, character: 18 },
        end: Position { line: 31, character: 13 },
        scope: <ref *33> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'indexOf', 'String', 'replace' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier] ]
      },
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *35],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(5) { 'newStr', 'constructor', 'replace', 'String', 'remove' },
      assignments: [
        <ref *7> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *35],
          variable: [ASTMemberExpression],
          init: [Circular *35]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *35],
          name: 'str'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *35],
          name: 'newStr'
        }
      ]
    },
    <ref *36> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 37, character: 17 },
      end: Position { line: 39, character: 13 },
      scope: <ref *35> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 18 },
        end: Position { line: 35, character: 13 },
        scope: <ref *34> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(5) {
          'newStr',
          'constructor',
          'replace',
          'String',
          'remove'
        },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *36],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(4) { 'constructor', 'remove', 'String', 'toString' },
      assignments: [
        <ref *8> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *36],
          variable: [ASTMemberExpression],
          init: [Circular *36]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *36],
          name: 'str'
        }
      ]
    },
    <ref *37> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 41, character: 19 },
      end: Position { line: 43, character: 13 },
      scope: <ref *36> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 37, character: 17 },
        end: Position { line: 39, character: 13 },
        scope: <ref *35> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(4) { 'constructor', 'remove', 'String', 'toString' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier] ]
      },
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *37],
          argument: [ASTMemberExpression]
        }
      ],
      namespaces: Set(2) { 'String', 'length' },
      assignments: [
        <ref *9> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *37],
          variable: [ASTMemberExpression],
          init: [Circular *37]
        }
      ],
      parameters: []
    },
    <ref *38> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 45, character: 17 },
      end: Position { line: 47, character: 13 },
      scope: <ref *37> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 41, character: 19 },
        end: Position { line: 43, character: 13 },
        scope: <ref *36> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(2) { 'String', 'length' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: []
      },
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *38],
          argument: [ASTMemberExpression]
        }
      ],
      namespaces: Set(3) { 'len', 'String', 'split' },
      assignments: [
        <ref *10> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *38],
          variable: [ASTMemberExpression],
          init: [Circular *38]
        }
      ],
      parameters: []
    },
    <ref *39> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 49, character: 16 },
      end: Position { line: 51, character: 13 },
      scope: <ref *38> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 17 },
        end: Position { line: 47, character: 13 },
        scope: <ref *37> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'len', 'String', 'split' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: []
      },
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *39],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(4) { 'seperator', 'split', 'String', 'trim' },
      assignments: [
        <ref *11> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *39],
          variable: [ASTMemberExpression],
          init: [Circular *39]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *39],
          name: 'seperator'
        }
      ]
    },
    <ref *40> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 53, character: 15 },
      end: Position { line: 55, character: 13 },
      scope: <ref *39> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 49, character: 16 },
        end: Position { line: 51, character: 13 },
        scope: <ref *38> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(4) { 'seperator', 'split', 'String', 'trim' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier] ]
      },
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *40],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(5) { 'seperator', 'constructor', 'trim', 'Error', 'String' },
      assignments: [
        <ref *12> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *40],
          variable: [ASTMemberExpression],
          init: [Circular *40]
        },
        <ref *13> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *40],
          variable: [ASTIdentifier],
          init: [ASTMapConstructorExpression]
        },
        <ref *14> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *40],
          variable: [ASTMemberExpression],
          init: [ASTIdentifier]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *40],
          name: 'seperator'
        }
      ]
    },
    <ref *41> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 61, character: 21 },
      end: Position { line: 68, character: 13 },
      scope: <ref *40> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 53, character: 15 },
        end: Position { line: 55, character: 13 },
        scope: <ref *39> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(5) {
          'seperator',
          'constructor',
          'trim',
          'Error',
          'String'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *41],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *41],
          variable: [ASTMemberExpression],
          init: [ASTIdentifier]
        },
        ASTIfStatement {
          type: 'IfStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *41],
          clauses: [Array]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *41],
          argument: [ASTIdentifier]
        }
      ],
      namespaces: Set(9) {
        'message',
        'values',
        'm',
        'String',
        'constructor',
        'parse',
        'toString',
        'Error',
        'throw'
      },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *41],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *41],
          variable: [ASTMemberExpression],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *41],
          variable: [ASTMemberExpression],
          init: [ASTCallExpression]
        },
        <ref *15> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *41],
          variable: [ASTMemberExpression],
          init: [Circular *41]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *41],
          name: 'message'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *41],
          name: 'values'
        }
      ]
    },
    <ref *42> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 70, character: 15 },
      end: Position { line: 72, character: 13 },
      scope: <ref *41> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 61, character: 21 },
        end: Position { line: 68, character: 13 },
        scope: <ref *40> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'message',
          'values',
          'm',
          'String',
          'constructor',
          'parse',
          'toString',
          'Error',
          'throw'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *42],
          expression: [ASTCallExpression]
        }
      ],
      namespaces: Set(7) {
        'message',
        'Crypto',
        'defaultCharset',
        'defaultSecret',
        'maxCharCode',
        'Error',
        'constructor'
      },
      assignments: [
        <ref *16> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *42],
          variable: [ASTMemberExpression],
          init: [Circular *42]
        },
        <ref *17> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *42],
          variable: [ASTIdentifier],
          init: [ASTMapConstructorExpression]
        },
        <ref *18> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *42],
          variable: [ASTMemberExpression],
          init: [ASTLiteral]
        },
        <ref *19> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *42],
          variable: [ASTMemberExpression],
          init: [ASTLiteral]
        },
        <ref *20> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *42],
          variable: [ASTMemberExpression],
          init: [ASTLiteral]
        },
        <ref *21> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *42],
          variable: [ASTMemberExpression],
          init: [ASTIdentifier]
        }
      ],
      parameters: []
    },
    <ref *43> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 81, character: 22 },
      end: Position { line: 90, character: 13 },
      scope: <ref *42> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 70, character: 15 },
        end: Position { line: 72, character: 13 },
        scope: <ref *41> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTCallStatement] ],
        namespaces: Set(7) {
          'message',
          'Crypto',
          'defaultCharset',
          'defaultSecret',
          'maxCharCode',
          'Error',
          'constructor'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *43],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *43],
          variable: [ASTMemberExpression],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *43],
          variable: [ASTMemberExpression],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *43],
          variable: [ASTMemberExpression],
          init: [ASTUnaryExpression]
        },
        ASTIfStatement {
          type: 'IfShortcutStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *43],
          clauses: [Array]
        },
        ASTIfStatement {
          type: 'IfShortcutStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *43],
          clauses: [Array]
        },
        ASTIfStatement {
          type: 'IfShortcutStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *43],
          clauses: [Array]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *43],
          argument: [ASTIdentifier]
        }
      ],
      namespaces: Set(12) {
        'defaultSecret',
        'hashFn',
        'charset',
        'me',
        'table',
        'defaultCharset',
        'len',
        'Error',
        'constructor',
        'throw',
        'Crypto',
        'getHash'
      },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *43],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *43],
          variable: [ASTMemberExpression],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *43],
          variable: [ASTMemberExpression],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *43],
          variable: [ASTMemberExpression],
          init: [ASTUnaryExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *43],
          variable: [ASTMemberExpression],
          init: [ASTUnaryExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *43],
          variable: [ASTMemberExpression],
          init: [ASTMemberExpression]
        },
        <ref *22> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *43],
          variable: [ASTMemberExpression],
          init: [Circular *43]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *43],
          name: 'defaultSecret'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *43],
          name: 'hashFn'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *43],
          name: 'charset'
        }
      ]
    },
    <ref *44> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 92, character: 18 },
      end: Position { line: 101, character: 13 },
      scope: <ref *43> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 81, character: 22 },
        end: Position { line: 90, character: 13 },
        scope: <ref *42> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(12) {
          'defaultSecret',
          'hashFn',
          'charset',
          'me',
          'table',
          'defaultCharset',
          'len',
          'Error',
          'constructor',
          'throw',
          'Crypto',
          'getHash'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier], [ASTIdentifier] ]
      },
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *44],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *44],
          variable: [ASTIdentifier],
          init: [ASTListConstructorExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *44],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTForGenericStatement {
          type: 'ForGenericStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *44],
          body: [Array],
          variable: [ASTIdentifier],
          iterator: [ASTIdentifier]
        },
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *44],
          expression: [ASTMemberExpression]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *44],
          argument: [ASTIdentifier]
        }
      ],
      namespaces: Set(9) {
        'pw',
        'me',
        'x',
        'hashFn',
        'push',
        'code',
        'reverse',
        'Crypto',
        'encrypt'
      },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *44],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *44],
          variable: [ASTIdentifier],
          init: [ASTListConstructorExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *44],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        <ref *23> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *44],
          variable: [ASTMemberExpression],
          init: [Circular *44]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *44],
          name: 'pw'
        }
      ]
    },
    <ref *45> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 103, character: 18 },
      end: Position { line: 156, character: 13 },
      scope: <ref *44> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 92, character: 18 },
        end: Position { line: 101, character: 13 },
        scope: <ref *43> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTCallStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'pw',
          'me',
          'x',
          'hashFn',
          'push',
          'code',
          'reverse',
          'Crypto',
          'encrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *45],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTIfStatement {
          type: 'IfShortcutStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *45],
          clauses: [Array]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *45],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *45],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *45],
          variable: [ASTIdentifier],
          init: [ASTListConstructorExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *45],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *45],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *45],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTFunctionStatement]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTFunctionStatement]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTFunctionStatement]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTFunctionStatement]
        },
        ASTWhileStatement {
          type: 'WhileStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTEvaluationExpression]
        },
        ASTIfStatement {
          type: 'IfStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          clauses: [Array]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(13) {
        'pw',
        'me',
        'defaultSecret',
        'getHash',
        'hashPointer',
        'output',
        'position',
        'padding',
        'len',
        'max',
        'get',
        'Crypto',
        'decrypt'
      },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *45],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *45],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *45],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *45],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *45],
          variable: [ASTIdentifier],
          init: [ASTListConstructorExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *45],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *45],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *45],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        <ref *24> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *45],
          variable: [ASTMemberExpression],
          init: [Circular *45]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *45],
          name: 'str'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *45],
          name: 'pw'
        }
      ]
    },
    <ref *46> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 112, character: 11 },
      end: Position { line: 117, character: 17 },
      scope: <ref *45> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: <ref *44> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'len',
          'max',
          'get',
          'Crypto',
          'decrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      body: [
        ASTIfStatement {
          type: 'IfStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *46],
          clauses: [Array]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *46],
          argument: [ASTIndexExpression]
        }
      ],
      namespaces: Set(7) {
        'v',
        'me',
        'table',
        'Error',
        'constructor',
        'throw',
        'AND'
      },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *46],
          variable: [ASTIdentifier],
          init: [Circular *46]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *46],
          name: 'v'
        }
      ]
    },
    <ref *47> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 118, character: 11 },
      end: Position { line: 120, character: 17 },
      scope: <ref *46> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 112, character: 11 },
        end: Position { line: 117, character: 17 },
        scope: <ref *45> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTIfStatement], [ASTReturnStatement] ],
        namespaces: Set(7) {
          'v',
          'me',
          'table',
          'Error',
          'constructor',
          'throw',
          'AND'
        },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier] ]
      },
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *47],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(3) { 'a', 'b', 'LSHIFT' },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *47],
          variable: [ASTIdentifier],
          init: [Circular *47]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *47],
          name: 'a'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *47],
          name: 'b'
        }
      ]
    },
    <ref *48> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 121, character: 14 },
      end: Position { line: 123, character: 17 },
      scope: <ref *47> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 118, character: 11 },
        end: Position { line: 120, character: 17 },
        scope: <ref *46> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'a', 'b', 'LSHIFT' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *48],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(3) { 'a', 'b', 'RSHIFT' },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *48],
          variable: [ASTIdentifier],
          init: [Circular *48]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *48],
          name: 'a'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *48],
          name: 'b'
        }
      ]
    },
    <ref *49> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 124, character: 14 },
      end: Position { line: 126, character: 17 },
      scope: <ref *48> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 121, character: 14 },
        end: Position { line: 123, character: 17 },
        scope: <ref *47> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'a', 'b', 'RSHIFT' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *49],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(17) {
        'a',
        'b',
        'position',
        'max',
        'm',
        'len',
        'LSHIFT',
        'code',
        'c',
        'buffer',
        'output',
        'push',
        'get',
        'AND',
        'RSHIFT',
        'padding',
        'join'
      },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *49],
          variable: [ASTIdentifier],
          init: [Circular *49]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *49],
          variable: [ASTIdentifier],
          init: [ASTIndexExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *49],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *49],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *49],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *49],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *49],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *49],
          variable: [ASTIdentifier],
          init: [ASTIndexExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *49],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *49],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *49],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *49],
          variable: [ASTIdentifier],
          init: [ASTIndexExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *49],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *49],
          name: 'a'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *49],
          name: 'b'
        }
      ]
    },
    <ref *50> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 158, character: 18 },
      end: Position { line: 202, character: 13 },
      scope: <ref *45> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: <ref *44> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'len',
          'max',
          'get',
          'Crypto',
          'decrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTIfStatement {
          type: 'IfShortcutStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          clauses: [Array]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          variable: [ASTIdentifier],
          init: [ASTListConstructorExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTFunctionStatement]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTFunctionStatement]
        },
        ASTWhileStatement {
          type: 'WhileStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTEvaluationExpression]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(21) {
        'pw',
        'me',
        'defaultSecret',
        'getHash',
        'hashPointer',
        'hashLength',
        'len',
        'output',
        'bitCounter',
        'bitStorage',
        'position',
        'max',
        'AND',
        'test',
        'Crypto',
        'constructor',
        'pwd',
        'foo',
        'encrypt',
        'decrypted',
        'decrypt'
      },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          variable: [ASTIdentifier],
          init: [ASTListConstructorExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        <ref *25> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          variable: [ASTMemberExpression],
          init: [Circular *50]
        },
        <ref *26> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        <ref *27> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        <ref *28> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        <ref *29> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          name: 'str'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *50],
          name: 'pw'
        }
      ]
    },
    <ref *51> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 170, character: 11 },
      end: Position { line: 172, character: 17 },
      scope: <ref *50> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: <ref *45> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(21) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'len',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'test',
          'Crypto',
          'constructor',
          'pwd',
          'foo',
          'encrypt',
          'decrypted',
          'decrypt'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *51],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(3) { 'a', 'b', 'RSHIFT' },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *51],
          variable: [ASTIdentifier],
          init: [Circular *51]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *51],
          name: 'a'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *51],
          name: 'b'
        }
      ]
    },
    <ref *52> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 173, character: 14 },
      end: Position { line: 175, character: 17 },
      scope: <ref *51> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 170, character: 11 },
        end: Position { line: 172, character: 17 },
        scope: <ref *50> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'a', 'b', 'RSHIFT' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *52],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(23) {
        'a',
        'b',
        'position',
        'max',
        'buffer',
        'me',
        'table',
        'indexOf',
        'currentBit',
        'bitCounter',
        'bitStorage',
        'expectedHashIndex',
        'hashPointer',
        'hashLength',
        'm',
        'operation',
        'AND',
        'RSHIFT',
        'charCode',
        'maxCharCode',
        'output',
        'push',
        'join'
      },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *52],
          variable: [ASTIdentifier],
          init: [Circular *52]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *52],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *52],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *52],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *52],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *52],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *52],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *52],
          variable: [ASTIdentifier],
          init: [ASTIndexExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *52],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *52],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *52],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *52],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *52],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *52],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *52],
          name: 'a'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *52],
          name: 'b'
        }
      ]
    }
  ]
}"
`;

exports[`parse default scripts random.src 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 62, character: 39 },
  scope: null,
  body: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 12 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 7 },
        scope: [Circular *1],
        name: 'Random'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 10 },
        end: Position { line: 1, character: 12 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 17 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 3, character: 7 },
        end: Position { line: 3, character: 14 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'pool'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Random'
        }
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 3, character: 15 },
        end: Position { line: 3, character: 17 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 4, character: 30 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 4, character: 7 },
        end: Position { line: 4, character: 21 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'defaultSeed'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Random'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 4, character: 22 },
        end: Position { line: 4, character: 30 },
        scope: [Circular *1],
        value: 'random',
        raw: '\\"random\\"'
      }
    },
    <ref *2> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 6, character: 1 },
      end: Position { line: 8, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 6, character: 21 },
        end: Position { line: 8, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(4) { 'seed', 'val', 'Random', 'calcSeed' },
        assignments: [ [Circular *2] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 6, character: 7 },
        end: Position { line: 6, character: 20 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'createPool'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Random'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 6, character: 21 },
        end: Position { line: 8, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(4) { 'seed', 'val', 'Random', 'calcSeed' },
        assignments: [ [Circular *2] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    <ref *3> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 10, character: 1 },
      end: Position { line: 20, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 10, character: 19 },
        end: Position { line: 20, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(7) {
          'seed',
          'seedVal',
          'pos',
          'len',
          'code',
          'Random',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *3]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 10, character: 7 },
        end: Position { line: 10, character: 18 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'calcSeed'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'Random'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 10, character: 19 },
        end: Position { line: 20, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(7) {
          'seed',
          'seedVal',
          'pos',
          'len',
          'code',
          'Random',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *3]
        ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    <ref *4> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 22, character: 1 },
      end: Position { line: 42, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(16) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'val',
          'seedVal',
          'calcSeed',
          'createPool',
          'Random',
          'seq'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *4]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 22, character: 7 },
        end: Position { line: 22, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'gen'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'Random'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(16) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'val',
          'seedVal',
          'calcSeed',
          'createPool',
          'Random',
          'seq'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *4]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      }
    },
    <ref *5> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 44, character: 1 },
      end: Position { line: 55, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 44, character: 14 },
        end: Position { line: 55, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(15) {
          'min',
          'max',
          'seed',
          'amount',
          'keepPool',
          'me',
          'index',
          'result',
          'temp',
          'gen',
          'push',
          'pool',
          'remove',
          'Random',
          'get'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *5]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 44, character: 7 },
        end: Position { line: 44, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'seq'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'Random'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 44, character: 14 },
        end: Position { line: 55, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(15) {
          'min',
          'max',
          'seed',
          'amount',
          'keepPool',
          'me',
          'index',
          'result',
          'temp',
          'gen',
          'push',
          'pool',
          'remove',
          'Random',
          'get'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *5]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      }
    },
    <ref *6> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 57, character: 1 },
      end: Position { line: 59, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 57, character: 14 },
        end: Position { line: 59, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(6) { 'min', 'max', 'gen', 'Random', 'get', 'seq' },
        assignments: [ [Circular *6] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 57, character: 7 },
        end: Position { line: 57, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'get'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'Random'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 57, character: 14 },
        end: Position { line: 59, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(6) { 'min', 'max', 'gen', 'Random', 'get', 'seq' },
        assignments: [ [Circular *6] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 61, character: 1 },
      end: Position { line: 61, character: 27 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 57, character: 14 },
        end: Position { line: 59, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(6) { 'min', 'max', 'gen', 'Random', 'get', 'seq' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 61, character: 6 },
        end: Position { line: 61, character: 27 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'print'
        },
        arguments: [ [ASTCallExpression] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 62, character: 1 },
      end: Position { line: 62, character: 39 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 57, character: 14 },
        end: Position { line: 59, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(6) { 'min', 'max', 'gen', 'Random', 'get', 'seq' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 62, character: 6 },
        end: Position { line: 62, character: 39 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'print'
        },
        arguments: [ [ASTCallExpression] ]
      }
    }
  ],
  namespaces: Set(4) { 'Random', 'pool', 'defaultSeed', 'createPool' },
  assignments: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 12 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 7 },
        scope: [Circular *1],
        name: 'Random'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 10 },
        end: Position { line: 1, character: 12 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 17 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 3, character: 7 },
        end: Position { line: 3, character: 14 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'pool'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Random'
        }
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 3, character: 15 },
        end: Position { line: 3, character: 17 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 4, character: 30 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 4, character: 7 },
        end: Position { line: 4, character: 21 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'defaultSeed'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Random'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 4, character: 22 },
        end: Position { line: 4, character: 30 },
        scope: [Circular *1],
        value: 'random',
        raw: '\\"random\\"'
      }
    }
  ],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 4, character: 22 },
      end: Position { line: 4, character: 30 },
      scope: [Circular *1],
      value: 'random',
      raw: '\\"random\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 7, character: 14 },
      end: Position { line: 7, character: 20 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 6, character: 21 },
        end: Position { line: 8, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(4) { 'seed', 'val', 'Random', 'calcSeed' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 'seed',
      raw: '\\"seed\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 7, character: 28 },
      end: Position { line: 7, character: 35 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 6, character: 21 },
        end: Position { line: 8, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(4) { 'seed', 'val', 'Random', 'calcSeed' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 'value',
      raw: '\\"value\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 7, character: 42 },
      end: Position { line: 7, character: 54 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 6, character: 21 },
        end: Position { line: 8, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(4) { 'seed', 'val', 'Random', 'calcSeed' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 'generation',
      raw: '\\"generation\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 7, character: 56 },
      end: Position { line: 7, character: 57 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 6, character: 21 },
        end: Position { line: 8, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(4) { 'seed', 'val', 'Random', 'calcSeed' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 11, character: 15 },
      end: Position { line: 11, character: 16 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 10, character: 19 },
        end: Position { line: 20, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(7) {
          'seed',
          'seedVal',
          'pos',
          'len',
          'code',
          'Random',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 16, character: 21 },
      end: Position { line: 16, character: 22 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 10, character: 19 },
        end: Position { line: 20, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(7) {
          'seed',
          'seedVal',
          'pos',
          'len',
          'code',
          'Random',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NilLiteral',
      start: Position { line: 25, character: 16 },
      end: Position { line: 25, character: 20 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(16) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'val',
          'seedVal',
          'calcSeed',
          'createPool',
          'Random',
          'seq'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      value: null,
      raw: 'null'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 25, character: 33 },
      end: Position { line: 25, character: 37 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(16) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'val',
          'seedVal',
          'calcSeed',
          'createPool',
          'Random',
          'seq'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'NilLiteral',
      start: Position { line: 26, character: 17 },
      end: Position { line: 26, character: 21 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(16) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'val',
          'seedVal',
          'calcSeed',
          'createPool',
          'Random',
          'seq'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      value: null,
      raw: 'null'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 30, character: 41 },
      end: Position { line: 30, character: 42 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(16) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'val',
          'seedVal',
          'calcSeed',
          'createPool',
          'Random',
          'seq'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 46, character: 13 },
      end: Position { line: 46, character: 14 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 44, character: 14 },
        end: Position { line: 55, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(15) {
          'min',
          'max',
          'seed',
          'amount',
          'keepPool',
          'me',
          'index',
          'result',
          'temp',
          'gen',
          'push',
          'pool',
          'remove',
          'Random',
          'get'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 51, character: 25 },
      end: Position { line: 51, character: 26 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 44, character: 14 },
        end: Position { line: 55, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(15) {
          'min',
          'max',
          'seed',
          'amount',
          'keepPool',
          'me',
          'index',
          'result',
          'temp',
          'gen',
          'push',
          'pool',
          'remove',
          'Random',
          'get'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 53, character: 21 },
      end: Position { line: 53, character: 25 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 44, character: 14 },
        end: Position { line: 55, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(15) {
          'min',
          'max',
          'seed',
          'amount',
          'keepPool',
          'me',
          'index',
          'result',
          'temp',
          'gen',
          'push',
          'pool',
          'remove',
          'Random',
          'get'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 61, character: 18 },
      end: Position { line: 61, character: 21 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 57, character: 14 },
        end: Position { line: 59, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(6) { 'min', 'max', 'gen', 'Random', 'get', 'seq' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 100,
      raw: '100'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 61, character: 22 },
      end: Position { line: 61, character: 25 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 57, character: 14 },
        end: Position { line: 59, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(6) { 'min', 'max', 'gen', 'Random', 'get', 'seq' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 500,
      raw: '500'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 62, character: 18 },
      end: Position { line: 62, character: 21 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 57, character: 14 },
        end: Position { line: 59, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(6) { 'min', 'max', 'gen', 'Random', 'get', 'seq' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 100,
      raw: '100'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 62, character: 22 },
      end: Position { line: 62, character: 25 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 57, character: 14 },
        end: Position { line: 59, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(6) { 'min', 'max', 'gen', 'Random', 'get', 'seq' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 500,
      raw: '500'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 62, character: 27 },
      end: Position { line: 62, character: 33 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 57, character: 14 },
        end: Position { line: 59, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(6) { 'min', 'max', 'gen', 'Random', 'get', 'seq' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 'test',
      raw: '\\"test\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 62, character: 35 },
      end: Position { line: 62, character: 37 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 57, character: 14 },
        end: Position { line: 59, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(6) { 'min', 'max', 'gen', 'Random', 'get', 'seq' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 10,
      raw: '10'
    }
  ],
  scopes: [
    <ref *7> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 6, character: 21 },
      end: Position { line: 8, character: 13 },
      scope: [Circular *1],
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *7],
          argument: [ASTMapConstructorExpression]
        }
      ],
      namespaces: Set(4) { 'seed', 'val', 'Random', 'calcSeed' },
      assignments: [
        <ref *2> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *7],
          variable: [ASTMemberExpression],
          init: [Circular *7]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *7],
          name: 'seed'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *7],
          name: 'val'
        }
      ]
    },
    <ref *8> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 10, character: 19 },
      end: Position { line: 20, character: 13 },
      scope: <ref *7> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 6, character: 21 },
        end: Position { line: 8, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(4) { 'seed', 'val', 'Random', 'calcSeed' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *8],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *8],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTForGenericStatement {
          type: 'ForGenericStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *8],
          body: [Array],
          variable: [ASTIdentifier],
          iterator: [ASTIdentifier]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *8],
          argument: [ASTIdentifier]
        }
      ],
      namespaces: Set(7) {
        'seed',
        'seedVal',
        'pos',
        'len',
        'code',
        'Random',
        'gen'
      },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *8],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *8],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *8],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *8],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        <ref *3> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *8],
          variable: [ASTMemberExpression],
          init: [Circular *8]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *8],
          name: 'seed'
        }
      ]
    },
    <ref *9> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 22, character: 14 },
      end: Position { line: 42, character: 13 },
      scope: <ref *8> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 10, character: 19 },
        end: Position { line: 20, character: 13 },
        scope: <ref *7> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(7) {
          'seed',
          'seedVal',
          'pos',
          'len',
          'code',
          'Random',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTIfStatement {
          type: 'IfShortcutStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          clauses: [Array]
        },
        ASTIfStatement {
          type: 'IfShortcutStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          clauses: [Array]
        },
        ASTIfStatement {
          type: 'IfStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          clauses: [Array]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          variable: [ASTIndexExpression],
          init: [ASTCallExpression]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          argument: [ASTIdentifier]
        }
      ],
      namespaces: Set(16) {
        'min',
        'max',
        'seed',
        'inc',
        'me',
        'pool',
        'defaultSeed',
        'ps',
        'value',
        'generation',
        'val',
        'seedVal',
        'calcSeed',
        'createPool',
        'Random',
        'seq'
      },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          variable: [ASTIdentifier],
          init: [ASTIndexExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          variable: [ASTMemberExpression],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          variable: [ASTMemberExpression],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          variable: [ASTIndexExpression],
          init: [ASTCallExpression]
        },
        <ref *4> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          variable: [ASTMemberExpression],
          init: [Circular *9]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          name: 'min'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          name: 'max'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          name: 'seed'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          name: 'inc'
        }
      ]
    },
    <ref *10> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 44, character: 14 },
      end: Position { line: 55, character: 13 },
      scope: <ref *9> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: <ref *8> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(16) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'val',
          'seedVal',
          'calcSeed',
          'createPool',
          'Random',
          'seq'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          variable: [ASTIdentifier],
          init: [ASTListConstructorExpression]
        },
        ASTWhileStatement {
          type: 'WhileStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          body: [Array],
          condition: [ASTEvaluationExpression]
        },
        ASTIfStatement {
          type: 'IfShortcutStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          clauses: [Array]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          argument: [ASTIdentifier]
        }
      ],
      namespaces: Set(15) {
        'min',
        'max',
        'seed',
        'amount',
        'keepPool',
        'me',
        'index',
        'result',
        'temp',
        'gen',
        'push',
        'pool',
        'remove',
        'Random',
        'get'
      },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          variable: [ASTIdentifier],
          init: [ASTListConstructorExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        <ref *5> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          variable: [ASTMemberExpression],
          init: [Circular *10]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          name: 'min'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          name: 'max'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          name: 'seed'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          name: 'amount'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          name: 'keepPool'
        }
      ]
    },
    <ref *11> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 57, character: 14 },
      end: Position { line: 59, character: 13 },
      scope: <ref *10> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 44, character: 14 },
        end: Position { line: 55, character: 13 },
        scope: <ref *9> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(15) {
          'min',
          'max',
          'seed',
          'amount',
          'keepPool',
          'me',
          'index',
          'result',
          'temp',
          'gen',
          'push',
          'pool',
          'remove',
          'Random',
          'get'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(6) { 'min', 'max', 'gen', 'Random', 'get', 'seq' },
      assignments: [
        <ref *6> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          variable: [ASTMemberExpression],
          init: [Circular *11]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          name: 'min'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          name: 'max'
        }
      ]
    }
  ]
}"
`;

exports[`parse default scripts random.src unsafe 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 62, character: 39 },
  scope: null,
  body: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 12 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 7 },
        scope: [Circular *1],
        name: 'Random'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 10 },
        end: Position { line: 1, character: 12 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 17 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 3, character: 7 },
        end: Position { line: 3, character: 14 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'pool'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Random'
        }
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 3, character: 15 },
        end: Position { line: 3, character: 17 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 4, character: 30 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 4, character: 7 },
        end: Position { line: 4, character: 21 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'defaultSeed'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Random'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 4, character: 22 },
        end: Position { line: 4, character: 30 },
        scope: [Circular *1],
        value: 'random',
        raw: '\\"random\\"'
      }
    },
    <ref *2> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 6, character: 1 },
      end: Position { line: 8, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 6, character: 21 },
        end: Position { line: 8, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(4) { 'seed', 'val', 'Random', 'calcSeed' },
        assignments: [ [Circular *2] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 6, character: 7 },
        end: Position { line: 6, character: 20 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'createPool'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Random'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 6, character: 21 },
        end: Position { line: 8, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(4) { 'seed', 'val', 'Random', 'calcSeed' },
        assignments: [ [Circular *2] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    <ref *3> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 10, character: 1 },
      end: Position { line: 20, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 10, character: 19 },
        end: Position { line: 20, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(7) {
          'seed',
          'seedVal',
          'pos',
          'len',
          'code',
          'Random',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *3]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 10, character: 7 },
        end: Position { line: 10, character: 18 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'calcSeed'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'Random'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 10, character: 19 },
        end: Position { line: 20, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(7) {
          'seed',
          'seedVal',
          'pos',
          'len',
          'code',
          'Random',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *3]
        ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    <ref *4> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 22, character: 1 },
      end: Position { line: 42, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(16) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'val',
          'seedVal',
          'calcSeed',
          'createPool',
          'Random',
          'seq'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *4]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 22, character: 7 },
        end: Position { line: 22, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'gen'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'Random'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(16) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'val',
          'seedVal',
          'calcSeed',
          'createPool',
          'Random',
          'seq'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *4]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      }
    },
    <ref *5> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 44, character: 1 },
      end: Position { line: 55, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 44, character: 14 },
        end: Position { line: 55, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(15) {
          'min',
          'max',
          'seed',
          'amount',
          'keepPool',
          'me',
          'index',
          'result',
          'temp',
          'gen',
          'push',
          'pool',
          'remove',
          'Random',
          'get'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *5]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 44, character: 7 },
        end: Position { line: 44, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'seq'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'Random'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 44, character: 14 },
        end: Position { line: 55, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(15) {
          'min',
          'max',
          'seed',
          'amount',
          'keepPool',
          'me',
          'index',
          'result',
          'temp',
          'gen',
          'push',
          'pool',
          'remove',
          'Random',
          'get'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *5]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      }
    },
    <ref *6> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 57, character: 1 },
      end: Position { line: 59, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 57, character: 14 },
        end: Position { line: 59, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(6) { 'min', 'max', 'gen', 'Random', 'get', 'seq' },
        assignments: [ [Circular *6] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 57, character: 7 },
        end: Position { line: 57, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'get'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'Random'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 57, character: 14 },
        end: Position { line: 59, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(6) { 'min', 'max', 'gen', 'Random', 'get', 'seq' },
        assignments: [ [Circular *6] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 61, character: 1 },
      end: Position { line: 61, character: 27 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 57, character: 14 },
        end: Position { line: 59, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(6) { 'min', 'max', 'gen', 'Random', 'get', 'seq' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 61, character: 6 },
        end: Position { line: 61, character: 27 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'print'
        },
        arguments: [ [ASTCallExpression] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 62, character: 1 },
      end: Position { line: 62, character: 39 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 57, character: 14 },
        end: Position { line: 59, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(6) { 'min', 'max', 'gen', 'Random', 'get', 'seq' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 62, character: 6 },
        end: Position { line: 62, character: 39 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'print'
        },
        arguments: [ [ASTCallExpression] ]
      }
    }
  ],
  namespaces: Set(4) { 'Random', 'pool', 'defaultSeed', 'createPool' },
  assignments: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 12 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 7 },
        scope: [Circular *1],
        name: 'Random'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 10 },
        end: Position { line: 1, character: 12 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 17 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 3, character: 7 },
        end: Position { line: 3, character: 14 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'pool'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Random'
        }
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 3, character: 15 },
        end: Position { line: 3, character: 17 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 4, character: 30 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 4, character: 7 },
        end: Position { line: 4, character: 21 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'defaultSeed'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Random'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 4, character: 22 },
        end: Position { line: 4, character: 30 },
        scope: [Circular *1],
        value: 'random',
        raw: '\\"random\\"'
      }
    }
  ],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 4, character: 22 },
      end: Position { line: 4, character: 30 },
      scope: [Circular *1],
      value: 'random',
      raw: '\\"random\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 7, character: 14 },
      end: Position { line: 7, character: 20 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 6, character: 21 },
        end: Position { line: 8, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(4) { 'seed', 'val', 'Random', 'calcSeed' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 'seed',
      raw: '\\"seed\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 7, character: 28 },
      end: Position { line: 7, character: 35 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 6, character: 21 },
        end: Position { line: 8, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(4) { 'seed', 'val', 'Random', 'calcSeed' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 'value',
      raw: '\\"value\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 7, character: 42 },
      end: Position { line: 7, character: 54 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 6, character: 21 },
        end: Position { line: 8, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(4) { 'seed', 'val', 'Random', 'calcSeed' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 'generation',
      raw: '\\"generation\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 7, character: 56 },
      end: Position { line: 7, character: 57 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 6, character: 21 },
        end: Position { line: 8, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(4) { 'seed', 'val', 'Random', 'calcSeed' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 11, character: 15 },
      end: Position { line: 11, character: 16 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 10, character: 19 },
        end: Position { line: 20, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(7) {
          'seed',
          'seedVal',
          'pos',
          'len',
          'code',
          'Random',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 16, character: 21 },
      end: Position { line: 16, character: 22 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 10, character: 19 },
        end: Position { line: 20, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(7) {
          'seed',
          'seedVal',
          'pos',
          'len',
          'code',
          'Random',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NilLiteral',
      start: Position { line: 25, character: 16 },
      end: Position { line: 25, character: 20 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(16) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'val',
          'seedVal',
          'calcSeed',
          'createPool',
          'Random',
          'seq'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      value: null,
      raw: 'null'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 25, character: 33 },
      end: Position { line: 25, character: 37 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(16) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'val',
          'seedVal',
          'calcSeed',
          'createPool',
          'Random',
          'seq'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'NilLiteral',
      start: Position { line: 26, character: 17 },
      end: Position { line: 26, character: 21 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(16) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'val',
          'seedVal',
          'calcSeed',
          'createPool',
          'Random',
          'seq'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      value: null,
      raw: 'null'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 30, character: 41 },
      end: Position { line: 30, character: 42 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(16) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'val',
          'seedVal',
          'calcSeed',
          'createPool',
          'Random',
          'seq'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 46, character: 13 },
      end: Position { line: 46, character: 14 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 44, character: 14 },
        end: Position { line: 55, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(15) {
          'min',
          'max',
          'seed',
          'amount',
          'keepPool',
          'me',
          'index',
          'result',
          'temp',
          'gen',
          'push',
          'pool',
          'remove',
          'Random',
          'get'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 51, character: 25 },
      end: Position { line: 51, character: 26 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 44, character: 14 },
        end: Position { line: 55, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(15) {
          'min',
          'max',
          'seed',
          'amount',
          'keepPool',
          'me',
          'index',
          'result',
          'temp',
          'gen',
          'push',
          'pool',
          'remove',
          'Random',
          'get'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 53, character: 21 },
      end: Position { line: 53, character: 25 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 44, character: 14 },
        end: Position { line: 55, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(15) {
          'min',
          'max',
          'seed',
          'amount',
          'keepPool',
          'me',
          'index',
          'result',
          'temp',
          'gen',
          'push',
          'pool',
          'remove',
          'Random',
          'get'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 61, character: 18 },
      end: Position { line: 61, character: 21 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 57, character: 14 },
        end: Position { line: 59, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(6) { 'min', 'max', 'gen', 'Random', 'get', 'seq' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 100,
      raw: '100'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 61, character: 22 },
      end: Position { line: 61, character: 25 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 57, character: 14 },
        end: Position { line: 59, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(6) { 'min', 'max', 'gen', 'Random', 'get', 'seq' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 500,
      raw: '500'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 62, character: 18 },
      end: Position { line: 62, character: 21 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 57, character: 14 },
        end: Position { line: 59, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(6) { 'min', 'max', 'gen', 'Random', 'get', 'seq' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 100,
      raw: '100'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 62, character: 22 },
      end: Position { line: 62, character: 25 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 57, character: 14 },
        end: Position { line: 59, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(6) { 'min', 'max', 'gen', 'Random', 'get', 'seq' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 500,
      raw: '500'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 62, character: 27 },
      end: Position { line: 62, character: 33 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 57, character: 14 },
        end: Position { line: 59, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(6) { 'min', 'max', 'gen', 'Random', 'get', 'seq' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 'test',
      raw: '\\"test\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 62, character: 35 },
      end: Position { line: 62, character: 37 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 57, character: 14 },
        end: Position { line: 59, character: 13 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(6) { 'min', 'max', 'gen', 'Random', 'get', 'seq' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 10,
      raw: '10'
    }
  ],
  scopes: [
    <ref *7> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 6, character: 21 },
      end: Position { line: 8, character: 13 },
      scope: [Circular *1],
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *7],
          argument: [ASTMapConstructorExpression]
        }
      ],
      namespaces: Set(4) { 'seed', 'val', 'Random', 'calcSeed' },
      assignments: [
        <ref *2> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *7],
          variable: [ASTMemberExpression],
          init: [Circular *7]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *7],
          name: 'seed'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *7],
          name: 'val'
        }
      ]
    },
    <ref *8> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 10, character: 19 },
      end: Position { line: 20, character: 13 },
      scope: <ref *7> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 6, character: 21 },
        end: Position { line: 8, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(4) { 'seed', 'val', 'Random', 'calcSeed' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *8],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *8],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTForGenericStatement {
          type: 'ForGenericStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *8],
          body: [Array],
          variable: [ASTIdentifier],
          iterator: [ASTIdentifier]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *8],
          argument: [ASTIdentifier]
        }
      ],
      namespaces: Set(7) {
        'seed',
        'seedVal',
        'pos',
        'len',
        'code',
        'Random',
        'gen'
      },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *8],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *8],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *8],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *8],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        <ref *3> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *8],
          variable: [ASTMemberExpression],
          init: [Circular *8]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *8],
          name: 'seed'
        }
      ]
    },
    <ref *9> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 22, character: 14 },
      end: Position { line: 42, character: 13 },
      scope: <ref *8> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 10, character: 19 },
        end: Position { line: 20, character: 13 },
        scope: <ref *7> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(7) {
          'seed',
          'seedVal',
          'pos',
          'len',
          'code',
          'Random',
          'gen'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTIfStatement {
          type: 'IfShortcutStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          clauses: [Array]
        },
        ASTIfStatement {
          type: 'IfShortcutStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          clauses: [Array]
        },
        ASTIfStatement {
          type: 'IfStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          clauses: [Array]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          variable: [ASTIndexExpression],
          init: [ASTCallExpression]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          argument: [ASTIdentifier]
        }
      ],
      namespaces: Set(16) {
        'min',
        'max',
        'seed',
        'inc',
        'me',
        'pool',
        'defaultSeed',
        'ps',
        'value',
        'generation',
        'val',
        'seedVal',
        'calcSeed',
        'createPool',
        'Random',
        'seq'
      },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          variable: [ASTIdentifier],
          init: [ASTIndexExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          variable: [ASTMemberExpression],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          variable: [ASTMemberExpression],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          variable: [ASTIndexExpression],
          init: [ASTCallExpression]
        },
        <ref *4> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          variable: [ASTMemberExpression],
          init: [Circular *9]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          name: 'min'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          name: 'max'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          name: 'seed'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          name: 'inc'
        }
      ]
    },
    <ref *10> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 44, character: 14 },
      end: Position { line: 55, character: 13 },
      scope: <ref *9> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: <ref *8> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(16) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'val',
          'seedVal',
          'calcSeed',
          'createPool',
          'Random',
          'seq'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          variable: [ASTIdentifier],
          init: [ASTListConstructorExpression]
        },
        ASTWhileStatement {
          type: 'WhileStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          body: [Array],
          condition: [ASTEvaluationExpression]
        },
        ASTIfStatement {
          type: 'IfShortcutStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          clauses: [Array]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          argument: [ASTIdentifier]
        }
      ],
      namespaces: Set(15) {
        'min',
        'max',
        'seed',
        'amount',
        'keepPool',
        'me',
        'index',
        'result',
        'temp',
        'gen',
        'push',
        'pool',
        'remove',
        'Random',
        'get'
      },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          variable: [ASTIdentifier],
          init: [ASTListConstructorExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        <ref *5> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          variable: [ASTMemberExpression],
          init: [Circular *10]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          name: 'min'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          name: 'max'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          name: 'seed'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          name: 'amount'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          name: 'keepPool'
        }
      ]
    },
    <ref *11> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 57, character: 14 },
      end: Position { line: 59, character: 13 },
      scope: <ref *10> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 44, character: 14 },
        end: Position { line: 55, character: 13 },
        scope: <ref *9> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(15) {
          'min',
          'max',
          'seed',
          'amount',
          'keepPool',
          'me',
          'index',
          'result',
          'temp',
          'gen',
          'push',
          'pool',
          'remove',
          'Random',
          'get'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(6) { 'min', 'max', 'gen', 'Random', 'get', 'seq' },
      assignments: [
        <ref *6> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          variable: [ASTMemberExpression],
          init: [Circular *11]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          name: 'min'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          name: 'max'
        }
      ]
    }
  ]
}"
`;

exports[`parse default scripts scuffed-if-clauses.src 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 28, character: 7 },
  scope: null,
  body: [
    ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 33 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        }
      ]
    },
    ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 5, character: 1 },
      end: Position { line: 6, character: 38 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTIfClause {
          type: 'ElseifShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        }
      ]
    },
    ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 9, character: 1 },
      end: Position { line: 11, character: 38 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTIfClause {
          type: 'ElseifShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTIfClause {
          type: 'ElseifShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        }
      ]
    },
    ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 15, character: 1 },
      end: Position { line: 18, character: 23 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTIfClause {
          type: 'ElseifShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTIfClause {
          type: 'ElseifShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTElseClause {
          type: 'ElseShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array]
        }
      ]
    },
    ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 21, character: 1 },
      end: Position { line: 23, character: 23 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTIfClause {
          type: 'ElseifShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTElseClause {
          type: 'ElseShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array]
        }
      ]
    },
    ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 26, character: 1 },
      end: Position { line: 27, character: 23 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTElseClause {
          type: 'ElseShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array]
        }
      ]
    }
  ],
  namespaces: Set(0) {},
  assignments: [],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 1, character: 5 },
      end: Position { line: 1, character: 9 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 1, character: 22 },
      end: Position { line: 1, character: 32 },
      scope: [Circular *1],
      value: 'true - 1',
      raw: '\\"true - 1\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 5, character: 5 },
      end: Position { line: 5, character: 9 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 5, character: 22 },
      end: Position { line: 5, character: 32 },
      scope: [Circular *1],
      value: 'true - 2',
      raw: '\\"true - 2\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 6, character: 10 },
      end: Position { line: 6, character: 14 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 6, character: 27 },
      end: Position { line: 6, character: 37 },
      scope: [Circular *1],
      value: 'true - 2',
      raw: '\\"true - 2\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 9, character: 5 },
      end: Position { line: 9, character: 9 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 9, character: 22 },
      end: Position { line: 9, character: 32 },
      scope: [Circular *1],
      value: 'true - 3',
      raw: '\\"true - 3\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 10, character: 10 },
      end: Position { line: 10, character: 14 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 10, character: 27 },
      end: Position { line: 10, character: 37 },
      scope: [Circular *1],
      value: 'true - 3',
      raw: '\\"true - 3\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 11, character: 10 },
      end: Position { line: 11, character: 14 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 11, character: 27 },
      end: Position { line: 11, character: 37 },
      scope: [Circular *1],
      value: 'true - 3',
      raw: '\\"true - 3\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 15, character: 5 },
      end: Position { line: 15, character: 9 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 15, character: 22 },
      end: Position { line: 15, character: 32 },
      scope: [Circular *1],
      value: 'true - 4',
      raw: '\\"true - 4\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 16, character: 10 },
      end: Position { line: 16, character: 14 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 16, character: 27 },
      end: Position { line: 16, character: 37 },
      scope: [Circular *1],
      value: 'true - 4',
      raw: '\\"true - 4\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 17, character: 10 },
      end: Position { line: 17, character: 14 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 17, character: 27 },
      end: Position { line: 17, character: 37 },
      scope: [Circular *1],
      value: 'true - 4',
      raw: '\\"true - 4\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 18, character: 12 },
      end: Position { line: 18, character: 22 },
      scope: [Circular *1],
      value: 'true - 4',
      raw: '\\"true - 4\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 21, character: 5 },
      end: Position { line: 21, character: 9 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 21, character: 22 },
      end: Position { line: 21, character: 32 },
      scope: [Circular *1],
      value: 'true - 5',
      raw: '\\"true - 5\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 22, character: 10 },
      end: Position { line: 22, character: 14 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 22, character: 27 },
      end: Position { line: 22, character: 37 },
      scope: [Circular *1],
      value: 'true - 5',
      raw: '\\"true - 5\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 23, character: 12 },
      end: Position { line: 23, character: 22 },
      scope: [Circular *1],
      value: 'true - 5',
      raw: '\\"true - 5\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 26, character: 5 },
      end: Position { line: 26, character: 9 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 26, character: 22 },
      end: Position { line: 26, character: 32 },
      scope: [Circular *1],
      value: 'true - 6',
      raw: '\\"true - 6\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 27, character: 12 },
      end: Position { line: 27, character: 22 },
      scope: [Circular *1],
      value: 'true - 6',
      raw: '\\"true - 6\\"'
    }
  ],
  scopes: []
}"
`;

exports[`parse default scripts scuffed-if-clauses.src unsafe 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 28, character: 7 },
  scope: null,
  body: [
    ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 33 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        }
      ]
    },
    ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 5, character: 1 },
      end: Position { line: 6, character: 38 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTIfClause {
          type: 'ElseifShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        }
      ]
    },
    ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 9, character: 1 },
      end: Position { line: 11, character: 38 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTIfClause {
          type: 'ElseifShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTIfClause {
          type: 'ElseifShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        }
      ]
    },
    ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 15, character: 1 },
      end: Position { line: 18, character: 23 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTIfClause {
          type: 'ElseifShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTIfClause {
          type: 'ElseifShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTElseClause {
          type: 'ElseShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array]
        }
      ]
    },
    ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 21, character: 1 },
      end: Position { line: 23, character: 23 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTIfClause {
          type: 'ElseifShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTElseClause {
          type: 'ElseShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array]
        }
      ]
    },
    ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 26, character: 1 },
      end: Position { line: 27, character: 23 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTElseClause {
          type: 'ElseShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array]
        }
      ]
    }
  ],
  namespaces: Set(0) {},
  assignments: [],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 1, character: 5 },
      end: Position { line: 1, character: 9 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 1, character: 22 },
      end: Position { line: 1, character: 32 },
      scope: [Circular *1],
      value: 'true - 1',
      raw: '\\"true - 1\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 5, character: 5 },
      end: Position { line: 5, character: 9 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 5, character: 22 },
      end: Position { line: 5, character: 32 },
      scope: [Circular *1],
      value: 'true - 2',
      raw: '\\"true - 2\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 6, character: 10 },
      end: Position { line: 6, character: 14 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 6, character: 27 },
      end: Position { line: 6, character: 37 },
      scope: [Circular *1],
      value: 'true - 2',
      raw: '\\"true - 2\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 9, character: 5 },
      end: Position { line: 9, character: 9 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 9, character: 22 },
      end: Position { line: 9, character: 32 },
      scope: [Circular *1],
      value: 'true - 3',
      raw: '\\"true - 3\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 10, character: 10 },
      end: Position { line: 10, character: 14 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 10, character: 27 },
      end: Position { line: 10, character: 37 },
      scope: [Circular *1],
      value: 'true - 3',
      raw: '\\"true - 3\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 11, character: 10 },
      end: Position { line: 11, character: 14 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 11, character: 27 },
      end: Position { line: 11, character: 37 },
      scope: [Circular *1],
      value: 'true - 3',
      raw: '\\"true - 3\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 15, character: 5 },
      end: Position { line: 15, character: 9 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 15, character: 22 },
      end: Position { line: 15, character: 32 },
      scope: [Circular *1],
      value: 'true - 4',
      raw: '\\"true - 4\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 16, character: 10 },
      end: Position { line: 16, character: 14 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 16, character: 27 },
      end: Position { line: 16, character: 37 },
      scope: [Circular *1],
      value: 'true - 4',
      raw: '\\"true - 4\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 17, character: 10 },
      end: Position { line: 17, character: 14 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 17, character: 27 },
      end: Position { line: 17, character: 37 },
      scope: [Circular *1],
      value: 'true - 4',
      raw: '\\"true - 4\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 18, character: 12 },
      end: Position { line: 18, character: 22 },
      scope: [Circular *1],
      value: 'true - 4',
      raw: '\\"true - 4\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 21, character: 5 },
      end: Position { line: 21, character: 9 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 21, character: 22 },
      end: Position { line: 21, character: 32 },
      scope: [Circular *1],
      value: 'true - 5',
      raw: '\\"true - 5\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 22, character: 10 },
      end: Position { line: 22, character: 14 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 22, character: 27 },
      end: Position { line: 22, character: 37 },
      scope: [Circular *1],
      value: 'true - 5',
      raw: '\\"true - 5\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 23, character: 12 },
      end: Position { line: 23, character: 22 },
      scope: [Circular *1],
      value: 'true - 5',
      raw: '\\"true - 5\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 26, character: 5 },
      end: Position { line: 26, character: 9 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 26, character: 22 },
      end: Position { line: 26, character: 32 },
      scope: [Circular *1],
      value: 'true - 6',
      raw: '\\"true - 6\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 27, character: 12 },
      end: Position { line: 27, character: 22 },
      scope: [Circular *1],
      value: 'true - 6',
      raw: '\\"true - 6\\"'
    }
  ],
  scopes: []
}"
`;

exports[`parse default scripts simple-object.src 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 9, character: 18 },
  scope: null,
  body: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 10 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 5 },
        scope: [Circular *1],
        name: 'test'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 8 },
        end: Position { line: 1, character: 10 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 18 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 3, character: 5 },
        end: Position { line: 3, character: 12 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'here'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'test'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 3, character: 13 },
        end: Position { line: 3, character: 18 },
        scope: [Circular *1],
        value: 'was',
        raw: '\\"was\\"'
      }
    },
    <ref *2> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 5, character: 1 },
      end: Position { line: 7, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 5, character: 12 },
        end: Position { line: 7, character: 13 },
        scope: [Circular *1],
        body: [ [ASTCallStatement] ],
        namespaces: Set(3) { 'here', 'test', 'was' },
        assignments: [ [Circular *2] ],
        parameters: []
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 5, character: 5 },
        end: Position { line: 5, character: 11 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'was'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'test'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 5, character: 12 },
        end: Position { line: 7, character: 13 },
        scope: [Circular *1],
        body: [ [ASTCallStatement] ],
        namespaces: Set(3) { 'here', 'test', 'was' },
        assignments: [ [Circular *2] ],
        parameters: []
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 9, character: 1 },
      end: Position { line: 9, character: 18 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 5, character: 12 },
        end: Position { line: 7, character: 13 },
        scope: [Circular *1],
        body: [ [ASTCallStatement] ],
        namespaces: Set(3) { 'here', 'test', 'was' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: []
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 9, character: 6 },
        end: Position { line: 9, character: 18 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'print'
        },
        arguments: [ [ASTCallExpression] ]
      }
    }
  ],
  namespaces: Set(3) { 'test', 'here', 'was' },
  assignments: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 10 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 5 },
        scope: [Circular *1],
        name: 'test'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 8 },
        end: Position { line: 1, character: 10 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 18 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 3, character: 5 },
        end: Position { line: 3, character: 12 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'here'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'test'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 3, character: 13 },
        end: Position { line: 3, character: 18 },
        scope: [Circular *1],
        value: 'was',
        raw: '\\"was\\"'
      }
    }
  ],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 3, character: 13 },
      end: Position { line: 3, character: 18 },
      scope: [Circular *1],
      value: 'was',
      raw: '\\"was\\"'
    }
  ],
  scopes: [
    <ref *3> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 5, character: 12 },
      end: Position { line: 7, character: 13 },
      scope: [Circular *1],
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          expression: [ASTCallExpression]
        }
      ],
      namespaces: Set(3) { 'here', 'test', 'was' },
      assignments: [
        <ref *2> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTMemberExpression],
          init: [Circular *3]
        }
      ],
      parameters: []
    }
  ]
}"
`;

exports[`parse default scripts simple-object.src unsafe 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 9, character: 18 },
  scope: null,
  body: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 10 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 5 },
        scope: [Circular *1],
        name: 'test'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 8 },
        end: Position { line: 1, character: 10 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 18 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 3, character: 5 },
        end: Position { line: 3, character: 12 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'here'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'test'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 3, character: 13 },
        end: Position { line: 3, character: 18 },
        scope: [Circular *1],
        value: 'was',
        raw: '\\"was\\"'
      }
    },
    <ref *2> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 5, character: 1 },
      end: Position { line: 7, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 5, character: 12 },
        end: Position { line: 7, character: 13 },
        scope: [Circular *1],
        body: [ [ASTCallStatement] ],
        namespaces: Set(3) { 'here', 'test', 'was' },
        assignments: [ [Circular *2] ],
        parameters: []
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 5, character: 5 },
        end: Position { line: 5, character: 11 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'was'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'test'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 5, character: 12 },
        end: Position { line: 7, character: 13 },
        scope: [Circular *1],
        body: [ [ASTCallStatement] ],
        namespaces: Set(3) { 'here', 'test', 'was' },
        assignments: [ [Circular *2] ],
        parameters: []
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 9, character: 1 },
      end: Position { line: 9, character: 18 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 5, character: 12 },
        end: Position { line: 7, character: 13 },
        scope: [Circular *1],
        body: [ [ASTCallStatement] ],
        namespaces: Set(3) { 'here', 'test', 'was' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: []
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 9, character: 6 },
        end: Position { line: 9, character: 18 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'print'
        },
        arguments: [ [ASTCallExpression] ]
      }
    }
  ],
  namespaces: Set(3) { 'test', 'here', 'was' },
  assignments: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 10 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 5 },
        scope: [Circular *1],
        name: 'test'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 8 },
        end: Position { line: 1, character: 10 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 18 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 3, character: 5 },
        end: Position { line: 3, character: 12 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'here'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'test'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 3, character: 13 },
        end: Position { line: 3, character: 18 },
        scope: [Circular *1],
        value: 'was',
        raw: '\\"was\\"'
      }
    }
  ],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 3, character: 13 },
      end: Position { line: 3, character: 18 },
      scope: [Circular *1],
      value: 'was',
      raw: '\\"was\\"'
    }
  ],
  scopes: [
    <ref *3> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 5, character: 12 },
      end: Position { line: 7, character: 13 },
      scope: [Circular *1],
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          expression: [ASTCallExpression]
        }
      ],
      namespaces: Set(3) { 'here', 'test', 'was' },
      assignments: [
        <ref *2> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTMemberExpression],
          init: [Circular *3]
        }
      ],
      parameters: []
    }
  ]
}"
`;

exports[`parse default scripts slice.src 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 15, character: 59 },
  scope: null,
  body: [
    <ref *2> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 13, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 16 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(8) {
          'limit',
          'offset',
          'maxLen',
          'len',
          'frags',
          'next',
          'push',
          'divideString'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *2]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 13 },
        scope: [Circular *1],
        name: 'divideString'
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 16 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(8) {
          'limit',
          'offset',
          'maxLen',
          'len',
          'frags',
          'next',
          'push',
          'divideString'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *2]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 15, character: 1 },
      end: Position { line: 15, character: 59 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 16 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(8) {
          'limit',
          'offset',
          'maxLen',
          'len',
          'frags',
          'next',
          'push',
          'divideString'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 15, character: 6 },
        end: Position { line: 15, character: 59 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'print'
        },
        arguments: [ [ASTCallExpression] ]
      }
    }
  ],
  namespaces: Set(1) { 'divideString' },
  assignments: [],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 2, character: 14 },
      end: Position { line: 2, character: 15 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 16 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(8) {
          'limit',
          'offset',
          'maxLen',
          'len',
          'frags',
          'next',
          'push',
          'divideString'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 15, character: 20 },
      end: Position { line: 15, character: 55 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 16 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(8) {
          'limit',
          'offset',
          'maxLen',
          'len',
          'frags',
          'next',
          'push',
          'divideString'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 'blahhblahhblahhblahhblahhblahhgad',
      raw: '\\"blahhblahhblahhblahhblahhblahhgad\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 15, character: 56 },
      end: Position { line: 15, character: 57 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 16 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(8) {
          'limit',
          'offset',
          'maxLen',
          'len',
          'frags',
          'next',
          'push',
          'divideString'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 5,
      raw: '5'
    }
  ],
  scopes: [
    <ref *3> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 1, character: 16 },
      end: Position { line: 13, character: 13 },
      scope: [Circular *1],
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTListConstructorExpression]
        },
        ASTWhileStatement {
          type: 'WhileStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          body: [Array],
          condition: [ASTEvaluationExpression]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          argument: [ASTIdentifier]
        }
      ],
      namespaces: Set(8) {
        'limit',
        'offset',
        'maxLen',
        'len',
        'frags',
        'next',
        'push',
        'divideString'
      },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTListConstructorExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        <ref *2> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [Circular *3]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          name: 'str'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          name: 'limit'
        }
      ]
    }
  ]
}"
`;

exports[`parse default scripts slice.src unsafe 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 15, character: 59 },
  scope: null,
  body: [
    <ref *2> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 13, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 16 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(8) {
          'limit',
          'offset',
          'maxLen',
          'len',
          'frags',
          'next',
          'push',
          'divideString'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *2]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 13 },
        scope: [Circular *1],
        name: 'divideString'
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 16 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(8) {
          'limit',
          'offset',
          'maxLen',
          'len',
          'frags',
          'next',
          'push',
          'divideString'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *2]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 15, character: 1 },
      end: Position { line: 15, character: 59 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 16 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(8) {
          'limit',
          'offset',
          'maxLen',
          'len',
          'frags',
          'next',
          'push',
          'divideString'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 15, character: 6 },
        end: Position { line: 15, character: 59 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'print'
        },
        arguments: [ [ASTCallExpression] ]
      }
    }
  ],
  namespaces: Set(1) { 'divideString' },
  assignments: [],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 2, character: 14 },
      end: Position { line: 2, character: 15 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 16 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(8) {
          'limit',
          'offset',
          'maxLen',
          'len',
          'frags',
          'next',
          'push',
          'divideString'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 15, character: 20 },
      end: Position { line: 15, character: 55 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 16 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(8) {
          'limit',
          'offset',
          'maxLen',
          'len',
          'frags',
          'next',
          'push',
          'divideString'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 'blahhblahhblahhblahhblahhblahhgad',
      raw: '\\"blahhblahhblahhblahhblahhblahhgad\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 15, character: 56 },
      end: Position { line: 15, character: 57 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 16 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(8) {
          'limit',
          'offset',
          'maxLen',
          'len',
          'frags',
          'next',
          'push',
          'divideString'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 5,
      raw: '5'
    }
  ],
  scopes: [
    <ref *3> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 1, character: 16 },
      end: Position { line: 13, character: 13 },
      scope: [Circular *1],
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTListConstructorExpression]
        },
        ASTWhileStatement {
          type: 'WhileStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          body: [Array],
          condition: [ASTEvaluationExpression]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          argument: [ASTIdentifier]
        }
      ],
      namespaces: Set(8) {
        'limit',
        'offset',
        'maxLen',
        'len',
        'frags',
        'next',
        'push',
        'divideString'
      },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTListConstructorExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        <ref *2> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [Circular *3]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          name: 'str'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          name: 'limit'
        }
      ]
    }
  ]
}"
`;

exports[`parse default scripts unary.src 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 11, character: 1 },
  scope: null,
  body: [
    <ref *2> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 3, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'split' },
        assignments: [ [Circular *2] ],
        parameters: []
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 5 },
        scope: [Circular *1],
        name: 'test'
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'split' },
        assignments: [ [Circular *2] ],
        parameters: []
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 5, character: 1 },
      end: Position { line: 5, character: 45 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'split' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: []
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 5, character: 6 },
        end: Position { line: 5, character: 45 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'print'
        },
        arguments: [ [ASTEvaluationExpression] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 6, character: 1 },
      end: Position { line: 6, character: 47 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'split' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: []
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 6, character: 6 },
        end: Position { line: 6, character: 47 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'print'
        },
        arguments: [ [ASTUnaryExpression] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 7, character: 1 },
      end: Position { line: 7, character: 48 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'split' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: []
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 7, character: 6 },
        end: Position { line: 7, character: 48 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'print'
        },
        arguments: [ [ASTEvaluationExpression] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 8, character: 1 },
      end: Position { line: 8, character: 50 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'split' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: []
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 8, character: 6 },
        end: Position { line: 8, character: 50 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'print'
        },
        arguments: [ [ASTUnaryExpression] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 9, character: 1 },
      end: Position { line: 9, character: 14 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'split' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: []
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 9, character: 6 },
        end: Position { line: 9, character: 14 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'print'
        },
        arguments: [ [ASTEvaluationExpression] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 10, character: 1 },
      end: Position { line: 10, character: 16 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'split' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: []
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 10, character: 6 },
        end: Position { line: 10, character: 16 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'print'
        },
        arguments: [ [ASTUnaryExpression] ]
      }
    }
  ],
  namespaces: Set(1) { 'test' },
  assignments: [],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'NilLiteral',
      start: Position { line: 2, character: 12 },
      end: Position { line: 2, character: 16 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'split' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: []
      },
      value: null,
      raw: 'null'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 5, character: 8 },
      end: Position { line: 5, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'split' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: []
      },
      value: 'was',
      raw: '\\"was\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 5, character: 25 },
      end: Position { line: 5, character: 30 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'split' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: []
      },
      value: false,
      raw: 'false'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 5, character: 38 },
      end: Position { line: 5, character: 43 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'split' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: []
      },
      value: false,
      raw: 'false'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 6, character: 9 },
      end: Position { line: 6, character: 14 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'split' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: []
      },
      value: 'was',
      raw: '\\"was\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 6, character: 26 },
      end: Position { line: 6, character: 31 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'split' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: []
      },
      value: false,
      raw: 'false'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 6, character: 39 },
      end: Position { line: 6, character: 44 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'split' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: []
      },
      value: false,
      raw: 'false'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 7, character: 11 },
      end: Position { line: 7, character: 16 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'split' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: []
      },
      value: 'was',
      raw: '\\"was\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 7, character: 28 },
      end: Position { line: 7, character: 33 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'split' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: []
      },
      value: false,
      raw: 'false'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 7, character: 41 },
      end: Position { line: 7, character: 46 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'split' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: []
      },
      value: false,
      raw: 'false'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 8, character: 12 },
      end: Position { line: 8, character: 17 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'split' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: []
      },
      value: 'was',
      raw: '\\"was\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 8, character: 29 },
      end: Position { line: 8, character: 34 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'split' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: []
      },
      value: false,
      raw: 'false'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 8, character: 42 },
      end: Position { line: 8, character: 47 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'split' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: []
      },
      value: false,
      raw: 'false'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 9, character: 8 },
      end: Position { line: 9, character: 9 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'split' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: []
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 9, character: 12 },
      end: Position { line: 9, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'split' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: []
      },
      value: 2,
      raw: '2'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 10, character: 9 },
      end: Position { line: 10, character: 10 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'split' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: []
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 10, character: 13 },
      end: Position { line: 10, character: 14 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'split' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: []
      },
      value: 2,
      raw: '2'
    }
  ],
  scopes: [
    <ref *3> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 1, character: 8 },
      end: Position { line: 3, character: 13 },
      scope: [Circular *1],
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          argument: [ASTLiteral]
        }
      ],
      namespaces: Set(1) { 'split' },
      assignments: [
        <ref *2> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [Circular *3]
        }
      ],
      parameters: []
    }
  ]
}"
`;

exports[`parse default scripts unary.src unsafe 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 11, character: 1 },
  scope: null,
  body: [
    <ref *2> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 3, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'split' },
        assignments: [ [Circular *2] ],
        parameters: []
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 5 },
        scope: [Circular *1],
        name: 'test'
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'split' },
        assignments: [ [Circular *2] ],
        parameters: []
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 5, character: 1 },
      end: Position { line: 5, character: 45 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'split' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: []
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 5, character: 6 },
        end: Position { line: 5, character: 45 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'print'
        },
        arguments: [ [ASTEvaluationExpression] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 6, character: 1 },
      end: Position { line: 6, character: 47 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'split' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: []
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 6, character: 6 },
        end: Position { line: 6, character: 47 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'print'
        },
        arguments: [ [ASTUnaryExpression] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 7, character: 1 },
      end: Position { line: 7, character: 48 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'split' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: []
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 7, character: 6 },
        end: Position { line: 7, character: 48 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'print'
        },
        arguments: [ [ASTEvaluationExpression] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 8, character: 1 },
      end: Position { line: 8, character: 50 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'split' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: []
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 8, character: 6 },
        end: Position { line: 8, character: 50 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'print'
        },
        arguments: [ [ASTUnaryExpression] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 9, character: 1 },
      end: Position { line: 9, character: 14 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'split' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: []
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 9, character: 6 },
        end: Position { line: 9, character: 14 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'print'
        },
        arguments: [ [ASTEvaluationExpression] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 10, character: 1 },
      end: Position { line: 10, character: 16 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'split' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: []
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 10, character: 6 },
        end: Position { line: 10, character: 16 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'print'
        },
        arguments: [ [ASTUnaryExpression] ]
      }
    }
  ],
  namespaces: Set(1) { 'test' },
  assignments: [],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'NilLiteral',
      start: Position { line: 2, character: 12 },
      end: Position { line: 2, character: 16 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'split' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: []
      },
      value: null,
      raw: 'null'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 5, character: 8 },
      end: Position { line: 5, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'split' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: []
      },
      value: 'was',
      raw: '\\"was\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 5, character: 25 },
      end: Position { line: 5, character: 30 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'split' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: []
      },
      value: false,
      raw: 'false'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 5, character: 38 },
      end: Position { line: 5, character: 43 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'split' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: []
      },
      value: false,
      raw: 'false'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 6, character: 9 },
      end: Position { line: 6, character: 14 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'split' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: []
      },
      value: 'was',
      raw: '\\"was\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 6, character: 26 },
      end: Position { line: 6, character: 31 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'split' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: []
      },
      value: false,
      raw: 'false'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 6, character: 39 },
      end: Position { line: 6, character: 44 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'split' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: []
      },
      value: false,
      raw: 'false'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 7, character: 11 },
      end: Position { line: 7, character: 16 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'split' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: []
      },
      value: 'was',
      raw: '\\"was\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 7, character: 28 },
      end: Position { line: 7, character: 33 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'split' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: []
      },
      value: false,
      raw: 'false'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 7, character: 41 },
      end: Position { line: 7, character: 46 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'split' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: []
      },
      value: false,
      raw: 'false'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 8, character: 12 },
      end: Position { line: 8, character: 17 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'split' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: []
      },
      value: 'was',
      raw: '\\"was\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 8, character: 29 },
      end: Position { line: 8, character: 34 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'split' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: []
      },
      value: false,
      raw: 'false'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 8, character: 42 },
      end: Position { line: 8, character: 47 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'split' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: []
      },
      value: false,
      raw: 'false'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 9, character: 8 },
      end: Position { line: 9, character: 9 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'split' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: []
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 9, character: 12 },
      end: Position { line: 9, character: 13 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'split' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: []
      },
      value: 2,
      raw: '2'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 10, character: 9 },
      end: Position { line: 10, character: 10 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'split' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: []
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 10, character: 13 },
      end: Position { line: 10, character: 14 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'split' },
        assignments: [ [ASTAssignmentStatement] ],
        parameters: []
      },
      value: 2,
      raw: '2'
    }
  ],
  scopes: [
    <ref *3> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 1, character: 8 },
      end: Position { line: 3, character: 13 },
      scope: [Circular *1],
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          argument: [ASTLiteral]
        }
      ],
      namespaces: Set(1) { 'split' },
      assignments: [
        <ref *2> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [Circular *3]
        }
      ],
      parameters: []
    }
  ]
}"
`;
