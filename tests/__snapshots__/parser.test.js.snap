// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`parse default scripts ascii.src 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 71, character: 29 },
  scope: null,
  body: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 14 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 9 },
        scope: [Circular *1],
        name: 'AsciiGen'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 12 },
        end: Position { line: 1, character: 14 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 9 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 3, character: 1 },
        end: Position { line: 3, character: 4 },
        scope: [Circular *1],
        name: 'map'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 3, character: 7 },
        end: Position { line: 3, character: 9 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 5, character: 1 },
      end: Position { line: 5, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 5, character: 4 },
        end: Position { line: 5, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 5, character: 9 },
        end: Position { line: 5, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 6, character: 1 },
      end: Position { line: 6, character: 36 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 6, character: 4 },
        end: Position { line: 6, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'b'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 6, character: 9 },
        end: Position { line: 6, character: 36 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 7, character: 1 },
      end: Position { line: 7, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 7, character: 4 },
        end: Position { line: 7, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'c'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 7, character: 9 },
        end: Position { line: 7, character: 33 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 8, character: 1 },
      end: Position { line: 8, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 8, character: 4 },
        end: Position { line: 8, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'd'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 8, character: 9 },
        end: Position { line: 8, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 9, character: 1 },
      end: Position { line: 9, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 9, character: 4 },
        end: Position { line: 9, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'e'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 9, character: 9 },
        end: Position { line: 9, character: 33 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 10, character: 1 },
      end: Position { line: 10, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 10, character: 4 },
        end: Position { line: 10, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'f'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 10, character: 9 },
        end: Position { line: 10, character: 33 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 11, character: 1 },
      end: Position { line: 11, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 11, character: 4 },
        end: Position { line: 11, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'g'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 11, character: 9 },
        end: Position { line: 11, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 12, character: 1 },
      end: Position { line: 12, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 12, character: 4 },
        end: Position { line: 12, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'h'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 12, character: 9 },
        end: Position { line: 12, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 13, character: 1 },
      end: Position { line: 13, character: 30 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 13, character: 4 },
        end: Position { line: 13, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'i'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 13, character: 9 },
        end: Position { line: 13, character: 30 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 14, character: 1 },
      end: Position { line: 14, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 14, character: 4 },
        end: Position { line: 14, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'j'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 14, character: 9 },
        end: Position { line: 14, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 15, character: 1 },
      end: Position { line: 15, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 15, character: 4 },
        end: Position { line: 15, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'k'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 15, character: 9 },
        end: Position { line: 15, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 16, character: 1 },
      end: Position { line: 16, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 16, character: 4 },
        end: Position { line: 16, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'l'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 16, character: 9 },
        end: Position { line: 16, character: 33 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 17, character: 1 },
      end: Position { line: 17, character: 45 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 17, character: 4 },
        end: Position { line: 17, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'm'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 17, character: 9 },
        end: Position { line: 17, character: 45 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 18, character: 1 },
      end: Position { line: 18, character: 45 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 18, character: 4 },
        end: Position { line: 18, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'n'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 18, character: 9 },
        end: Position { line: 18, character: 45 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 19, character: 1 },
      end: Position { line: 19, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 19, character: 4 },
        end: Position { line: 19, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'o'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 19, character: 9 },
        end: Position { line: 19, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 20, character: 1 },
      end: Position { line: 20, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 20, character: 4 },
        end: Position { line: 20, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'p'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 20, character: 9 },
        end: Position { line: 20, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 21, character: 1 },
      end: Position { line: 21, character: 42 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 21, character: 4 },
        end: Position { line: 21, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'q'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 21, character: 9 },
        end: Position { line: 21, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 22, character: 1 },
      end: Position { line: 22, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 22, character: 4 },
        end: Position { line: 22, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'r'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 22, character: 9 },
        end: Position { line: 22, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 23, character: 1 },
      end: Position { line: 23, character: 36 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 23, character: 4 },
        end: Position { line: 23, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 's'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 23, character: 9 },
        end: Position { line: 23, character: 36 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 24, character: 1 },
      end: Position { line: 24, character: 36 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 24, character: 4 },
        end: Position { line: 24, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 't'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 24, character: 9 },
        end: Position { line: 24, character: 36 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 25, character: 1 },
      end: Position { line: 25, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 25, character: 4 },
        end: Position { line: 25, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'u'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 25, character: 9 },
        end: Position { line: 25, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 26, character: 1 },
      end: Position { line: 26, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 26, character: 4 },
        end: Position { line: 26, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'v'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 26, character: 9 },
        end: Position { line: 26, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 27, character: 1 },
      end: Position { line: 27, character: 48 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 27, character: 4 },
        end: Position { line: 27, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'w'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 27, character: 9 },
        end: Position { line: 27, character: 48 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 28, character: 1 },
      end: Position { line: 28, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 28, character: 4 },
        end: Position { line: 28, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'x'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 28, character: 9 },
        end: Position { line: 28, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 29, character: 1 },
      end: Position { line: 29, character: 42 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 29, character: 4 },
        end: Position { line: 29, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'y'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 29, character: 9 },
        end: Position { line: 29, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 30, character: 1 },
      end: Position { line: 30, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 30, character: 4 },
        end: Position { line: 30, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'z'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 30, character: 9 },
        end: Position { line: 30, character: 33 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 31, character: 1 },
      end: Position { line: 31, character: 42 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 31, character: 5 },
        end: Position { line: 31, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '0',
          raw: '\\"0\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 31, character: 12 },
        end: Position { line: 31, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 32, character: 1 },
      end: Position { line: 32, character: 36 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 32, character: 5 },
        end: Position { line: 32, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '1',
          raw: '\\"1\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 32, character: 12 },
        end: Position { line: 32, character: 36 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 33, character: 1 },
      end: Position { line: 33, character: 39 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 33, character: 5 },
        end: Position { line: 33, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '2',
          raw: '\\"2\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 33, character: 12 },
        end: Position { line: 33, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 34, character: 1 },
      end: Position { line: 34, character: 36 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 34, character: 5 },
        end: Position { line: 34, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '3',
          raw: '\\"3\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 34, character: 12 },
        end: Position { line: 34, character: 36 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 35, character: 1 },
      end: Position { line: 35, character: 39 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 35, character: 5 },
        end: Position { line: 35, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '4',
          raw: '\\"4\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 35, character: 12 },
        end: Position { line: 35, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 36, character: 1 },
      end: Position { line: 36, character: 39 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 36, character: 5 },
        end: Position { line: 36, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '5',
          raw: '\\"5\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 36, character: 12 },
        end: Position { line: 36, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 37, character: 1 },
      end: Position { line: 37, character: 42 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 37, character: 5 },
        end: Position { line: 37, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '6',
          raw: '\\"6\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 37, character: 12 },
        end: Position { line: 37, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 38, character: 1 },
      end: Position { line: 38, character: 39 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 38, character: 5 },
        end: Position { line: 38, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '7',
          raw: '\\"7\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 38, character: 12 },
        end: Position { line: 38, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 39, character: 1 },
      end: Position { line: 39, character: 42 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 39, character: 5 },
        end: Position { line: 39, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '8',
          raw: '\\"8\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 39, character: 12 },
        end: Position { line: 39, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 40, character: 1 },
      end: Position { line: 40, character: 42 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 40, character: 5 },
        end: Position { line: 40, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '9',
          raw: '\\"9\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 40, character: 12 },
        end: Position { line: 40, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 41, character: 1 },
      end: Position { line: 41, character: 30 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 41, character: 5 },
        end: Position { line: 41, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: ' ',
          raw: '\\" \\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 41, character: 12 },
        end: Position { line: 41, character: 30 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 43, character: 1 },
      end: Position { line: 43, character: 19 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 43, character: 9 },
        end: Position { line: 43, character: 15 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'MAP'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'AsciiGen'
        }
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 43, character: 16 },
        end: Position { line: 43, character: 19 },
        scope: [Circular *1],
        name: 'map'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 45, character: 1 },
      end: Position { line: 69, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 45, character: 9 },
        end: Position { line: 45, character: 15 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'gen'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'AsciiGen'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 16 },
        end: Position { line: 69, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'colors', 'r', 'signs', 'MAP', 'join' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 71, character: 1 },
      end: Position { line: 71, character: 29 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 71, character: 6 },
        end: Position { line: 71, character: 29 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTCallExpression] ]
      }
    }
  ],
  namespaces: Set(30) {
    'AsciiGen',
    'map',
    'a',
    'b',
    'c',
    'd',
    'e',
    'f',
    'g',
    'h',
    'i',
    'j',
    'k',
    'l',
    'm',
    'n',
    'o',
    'p',
    'q',
    'r',
    's',
    't',
    'u',
    'v',
    'w',
    'x',
    'y',
    'z',
    'MAP',
    'gen'
  },
  assignments: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 14 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 9 },
        scope: [Circular *1],
        name: 'AsciiGen'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 12 },
        end: Position { line: 1, character: 14 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 9 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 3, character: 1 },
        end: Position { line: 3, character: 4 },
        scope: [Circular *1],
        name: 'map'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 3, character: 7 },
        end: Position { line: 3, character: 9 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 5, character: 1 },
      end: Position { line: 5, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 5, character: 4 },
        end: Position { line: 5, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 5, character: 9 },
        end: Position { line: 5, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 6, character: 1 },
      end: Position { line: 6, character: 36 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 6, character: 4 },
        end: Position { line: 6, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'b'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 6, character: 9 },
        end: Position { line: 6, character: 36 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 7, character: 1 },
      end: Position { line: 7, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 7, character: 4 },
        end: Position { line: 7, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'c'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 7, character: 9 },
        end: Position { line: 7, character: 33 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 8, character: 1 },
      end: Position { line: 8, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 8, character: 4 },
        end: Position { line: 8, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'd'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 8, character: 9 },
        end: Position { line: 8, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 9, character: 1 },
      end: Position { line: 9, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 9, character: 4 },
        end: Position { line: 9, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'e'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 9, character: 9 },
        end: Position { line: 9, character: 33 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 10, character: 1 },
      end: Position { line: 10, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 10, character: 4 },
        end: Position { line: 10, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'f'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 10, character: 9 },
        end: Position { line: 10, character: 33 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 11, character: 1 },
      end: Position { line: 11, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 11, character: 4 },
        end: Position { line: 11, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'g'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 11, character: 9 },
        end: Position { line: 11, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 12, character: 1 },
      end: Position { line: 12, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 12, character: 4 },
        end: Position { line: 12, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'h'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 12, character: 9 },
        end: Position { line: 12, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 13, character: 1 },
      end: Position { line: 13, character: 30 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 13, character: 4 },
        end: Position { line: 13, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'i'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 13, character: 9 },
        end: Position { line: 13, character: 30 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 14, character: 1 },
      end: Position { line: 14, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 14, character: 4 },
        end: Position { line: 14, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'j'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 14, character: 9 },
        end: Position { line: 14, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 15, character: 1 },
      end: Position { line: 15, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 15, character: 4 },
        end: Position { line: 15, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'k'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 15, character: 9 },
        end: Position { line: 15, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 16, character: 1 },
      end: Position { line: 16, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 16, character: 4 },
        end: Position { line: 16, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'l'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 16, character: 9 },
        end: Position { line: 16, character: 33 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 17, character: 1 },
      end: Position { line: 17, character: 45 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 17, character: 4 },
        end: Position { line: 17, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'm'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 17, character: 9 },
        end: Position { line: 17, character: 45 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 18, character: 1 },
      end: Position { line: 18, character: 45 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 18, character: 4 },
        end: Position { line: 18, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'n'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 18, character: 9 },
        end: Position { line: 18, character: 45 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 19, character: 1 },
      end: Position { line: 19, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 19, character: 4 },
        end: Position { line: 19, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'o'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 19, character: 9 },
        end: Position { line: 19, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 20, character: 1 },
      end: Position { line: 20, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 20, character: 4 },
        end: Position { line: 20, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'p'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 20, character: 9 },
        end: Position { line: 20, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 21, character: 1 },
      end: Position { line: 21, character: 42 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 21, character: 4 },
        end: Position { line: 21, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'q'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 21, character: 9 },
        end: Position { line: 21, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 22, character: 1 },
      end: Position { line: 22, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 22, character: 4 },
        end: Position { line: 22, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'r'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 22, character: 9 },
        end: Position { line: 22, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 23, character: 1 },
      end: Position { line: 23, character: 36 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 23, character: 4 },
        end: Position { line: 23, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 's'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 23, character: 9 },
        end: Position { line: 23, character: 36 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 24, character: 1 },
      end: Position { line: 24, character: 36 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 24, character: 4 },
        end: Position { line: 24, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 't'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 24, character: 9 },
        end: Position { line: 24, character: 36 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 25, character: 1 },
      end: Position { line: 25, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 25, character: 4 },
        end: Position { line: 25, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'u'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 25, character: 9 },
        end: Position { line: 25, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 26, character: 1 },
      end: Position { line: 26, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 26, character: 4 },
        end: Position { line: 26, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'v'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 26, character: 9 },
        end: Position { line: 26, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 27, character: 1 },
      end: Position { line: 27, character: 48 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 27, character: 4 },
        end: Position { line: 27, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'w'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 27, character: 9 },
        end: Position { line: 27, character: 48 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 28, character: 1 },
      end: Position { line: 28, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 28, character: 4 },
        end: Position { line: 28, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'x'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 28, character: 9 },
        end: Position { line: 28, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 29, character: 1 },
      end: Position { line: 29, character: 42 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 29, character: 4 },
        end: Position { line: 29, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'y'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 29, character: 9 },
        end: Position { line: 29, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 30, character: 1 },
      end: Position { line: 30, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 30, character: 4 },
        end: Position { line: 30, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'z'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 30, character: 9 },
        end: Position { line: 30, character: 33 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 31, character: 1 },
      end: Position { line: 31, character: 42 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 31, character: 5 },
        end: Position { line: 31, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '0',
          raw: '\\"0\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 31, character: 12 },
        end: Position { line: 31, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 32, character: 1 },
      end: Position { line: 32, character: 36 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 32, character: 5 },
        end: Position { line: 32, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '1',
          raw: '\\"1\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 32, character: 12 },
        end: Position { line: 32, character: 36 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 33, character: 1 },
      end: Position { line: 33, character: 39 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 33, character: 5 },
        end: Position { line: 33, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '2',
          raw: '\\"2\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 33, character: 12 },
        end: Position { line: 33, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 34, character: 1 },
      end: Position { line: 34, character: 36 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 34, character: 5 },
        end: Position { line: 34, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '3',
          raw: '\\"3\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 34, character: 12 },
        end: Position { line: 34, character: 36 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 35, character: 1 },
      end: Position { line: 35, character: 39 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 35, character: 5 },
        end: Position { line: 35, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '4',
          raw: '\\"4\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 35, character: 12 },
        end: Position { line: 35, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 36, character: 1 },
      end: Position { line: 36, character: 39 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 36, character: 5 },
        end: Position { line: 36, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '5',
          raw: '\\"5\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 36, character: 12 },
        end: Position { line: 36, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 37, character: 1 },
      end: Position { line: 37, character: 42 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 37, character: 5 },
        end: Position { line: 37, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '6',
          raw: '\\"6\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 37, character: 12 },
        end: Position { line: 37, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 38, character: 1 },
      end: Position { line: 38, character: 39 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 38, character: 5 },
        end: Position { line: 38, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '7',
          raw: '\\"7\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 38, character: 12 },
        end: Position { line: 38, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 39, character: 1 },
      end: Position { line: 39, character: 42 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 39, character: 5 },
        end: Position { line: 39, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '8',
          raw: '\\"8\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 39, character: 12 },
        end: Position { line: 39, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 40, character: 1 },
      end: Position { line: 40, character: 42 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 40, character: 5 },
        end: Position { line: 40, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '9',
          raw: '\\"9\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 40, character: 12 },
        end: Position { line: 40, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 41, character: 1 },
      end: Position { line: 41, character: 30 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 41, character: 5 },
        end: Position { line: 41, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: ' ',
          raw: '\\" \\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 41, character: 12 },
        end: Position { line: 41, character: 30 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 43, character: 1 },
      end: Position { line: 43, character: 19 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 43, character: 9 },
        end: Position { line: 43, character: 15 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'MAP'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'AsciiGen'
        }
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 43, character: 16 },
        end: Position { line: 43, character: 19 },
        scope: [Circular *1],
        name: 'map'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 45, character: 1 },
      end: Position { line: 69, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 45, character: 9 },
        end: Position { line: 45, character: 15 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'gen'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'AsciiGen'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 16 },
        end: Position { line: 69, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'colors', 'r', 'signs', 'MAP', 'join' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    }
  ],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 5, character: 10 },
      end: Position { line: 5, character: 18 },
      scope: [Circular *1],
      value: '||¯|| ',
      raw: '\\"||¯|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 5, character: 20 },
      end: Position { line: 5, character: 28 },
      scope: [Circular *1],
      value: '||_|| ',
      raw: '\\"||_|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 5, character: 30 },
      end: Position { line: 5, character: 38 },
      scope: [Circular *1],
      value: '|| || ',
      raw: '\\"|| || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 6, character: 10 },
      end: Position { line: 6, character: 17 },
      scope: [Circular *1],
      value: '||¯/ ',
      raw: '\\"||¯/ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 6, character: 19 },
      end: Position { line: 6, character: 26 },
      scope: [Circular *1],
      value: '|| \\\\\\\\ ',
      raw: '\\"|| \\\\\\\\ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 6, character: 28 },
      end: Position { line: 6, character: 35 },
      scope: [Circular *1],
      value: '||_/ ',
      raw: '\\"||_/ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 7, character: 10 },
      end: Position { line: 7, character: 16 },
      scope: [Circular *1],
      value: '||¯ ',
      raw: '\\"||¯ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 7, character: 18 },
      end: Position { line: 7, character: 24 },
      scope: [Circular *1],
      value: '||  ',
      raw: '\\"||  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 7, character: 26 },
      end: Position { line: 7, character: 32 },
      scope: [Circular *1],
      value: '||_ ',
      raw: '\\"||_ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 8, character: 10 },
      end: Position { line: 8, character: 18 },
      scope: [Circular *1],
      value: '||¯\\\\\\\\\\\\\\\\ ',
      raw: '\\"||¯\\\\\\\\\\\\\\\\ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 8, character: 20 },
      end: Position { line: 8, character: 28 },
      scope: [Circular *1],
      value: '|| // ',
      raw: '\\"|| // \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 8, character: 30 },
      end: Position { line: 8, character: 38 },
      scope: [Circular *1],
      value: '||//  ',
      raw: '\\"||//  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 9, character: 10 },
      end: Position { line: 9, character: 16 },
      scope: [Circular *1],
      value: '||¯ ',
      raw: '\\"||¯ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 9, character: 18 },
      end: Position { line: 9, character: 24 },
      scope: [Circular *1],
      value: '||- ',
      raw: '\\"||- \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 9, character: 26 },
      end: Position { line: 9, character: 32 },
      scope: [Circular *1],
      value: '||_ ',
      raw: '\\"||_ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 10, character: 10 },
      end: Position { line: 10, character: 16 },
      scope: [Circular *1],
      value: '||¯ ',
      raw: '\\"||¯ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 10, character: 18 },
      end: Position { line: 10, character: 24 },
      scope: [Circular *1],
      value: '||_ ',
      raw: '\\"||_ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 10, character: 26 },
      end: Position { line: 10, character: 32 },
      scope: [Circular *1],
      value: '||  ',
      raw: '\\"||  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 11, character: 10 },
      end: Position { line: 11, character: 18 },
      scope: [Circular *1],
      value: '||¯¯  ',
      raw: '\\"||¯¯  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 11, character: 20 },
      end: Position { line: 11, character: 28 },
      scope: [Circular *1],
      value: '|| \\\\\\\\\\\\\\\\ ',
      raw: '\\"|| \\\\\\\\\\\\\\\\ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 11, character: 30 },
      end: Position { line: 11, character: 38 },
      scope: [Circular *1],
      value: '||_|| ',
      raw: '\\"||_|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 12, character: 10 },
      end: Position { line: 12, character: 18 },
      scope: [Circular *1],
      value: '|| || ',
      raw: '\\"|| || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 12, character: 20 },
      end: Position { line: 12, character: 28 },
      scope: [Circular *1],
      value: '||-|| ',
      raw: '\\"||-|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 12, character: 30 },
      end: Position { line: 12, character: 38 },
      scope: [Circular *1],
      value: '|| || ',
      raw: '\\"|| || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 13, character: 10 },
      end: Position { line: 13, character: 15 },
      scope: [Circular *1],
      value: '|| ',
      raw: '\\"|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 13, character: 17 },
      end: Position { line: 13, character: 22 },
      scope: [Circular *1],
      value: '|| ',
      raw: '\\"|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 13, character: 24 },
      end: Position { line: 13, character: 29 },
      scope: [Circular *1],
      value: '|| ',
      raw: '\\"|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 14, character: 10 },
      end: Position { line: 14, character: 18 },
      scope: [Circular *1],
      value: ' ¯||¯ ',
      raw: '\\" ¯||¯ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 14, character: 20 },
      end: Position { line: 14, character: 28 },
      scope: [Circular *1],
      value: '  ||  ',
      raw: '\\"  ||  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 14, character: 30 },
      end: Position { line: 14, character: 38 },
      scope: [Circular *1],
      value: '|_||  ',
      raw: '\\"|_||  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 15, character: 10 },
      end: Position { line: 15, character: 18 },
      scope: [Circular *1],
      value: '||  / ',
      raw: '\\"||  / \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 15, character: 20 },
      end: Position { line: 15, character: 28 },
      scope: [Circular *1],
      value: '|| /  ',
      raw: '\\"|| /  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 15, character: 30 },
      end: Position { line: 15, character: 38 },
      scope: [Circular *1],
      value: '||¯\\\\\\\\\\\\\\\\ ',
      raw: '\\"||¯\\\\\\\\\\\\\\\\ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 16, character: 10 },
      end: Position { line: 16, character: 16 },
      scope: [Circular *1],
      value: '||  ',
      raw: '\\"||  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 16, character: 18 },
      end: Position { line: 16, character: 24 },
      scope: [Circular *1],
      value: '||  ',
      raw: '\\"||  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 16, character: 26 },
      end: Position { line: 16, character: 32 },
      scope: [Circular *1],
      value: '||_ ',
      raw: '\\"||_ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 17, character: 10 },
      end: Position { line: 17, character: 20 },
      scope: [Circular *1],
      value: '||\\\\\\\\\\\\\\\\/|| ',
      raw: '\\"||\\\\\\\\\\\\\\\\/|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 17, character: 22 },
      end: Position { line: 17, character: 32 },
      scope: [Circular *1],
      value: '||   || ',
      raw: '\\"||   || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 17, character: 34 },
      end: Position { line: 17, character: 44 },
      scope: [Circular *1],
      value: '||   || ',
      raw: '\\"||   || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 18, character: 10 },
      end: Position { line: 18, character: 20 },
      scope: [Circular *1],
      value: '||\\\\\\\\\\\\\\\\ || ',
      raw: '\\"||\\\\\\\\\\\\\\\\ || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 18, character: 22 },
      end: Position { line: 18, character: 32 },
      scope: [Circular *1],
      value: '|| \\\\\\\\\\\\\\\\|| ',
      raw: '\\"|| \\\\\\\\\\\\\\\\|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 18, character: 34 },
      end: Position { line: 18, character: 44 },
      scope: [Circular *1],
      value: '||  \\\\\\\\|| ',
      raw: '\\"||  \\\\\\\\|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 19, character: 10 },
      end: Position { line: 19, character: 18 },
      scope: [Circular *1],
      value: '||¯|| ',
      raw: '\\"||¯|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 19, character: 20 },
      end: Position { line: 19, character: 28 },
      scope: [Circular *1],
      value: '|| || ',
      raw: '\\"|| || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 19, character: 30 },
      end: Position { line: 19, character: 38 },
      scope: [Circular *1],
      value: '||_|| ',
      raw: '\\"||_|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 20, character: 10 },
      end: Position { line: 20, character: 18 },
      scope: [Circular *1],
      value: '||¯|| ',
      raw: '\\"||¯|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 20, character: 20 },
      end: Position { line: 20, character: 28 },
      scope: [Circular *1],
      value: '||_|| ',
      raw: '\\"||_|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 20, character: 30 },
      end: Position { line: 20, character: 38 },
      scope: [Circular *1],
      value: '||    ',
      raw: '\\"||    \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 21, character: 10 },
      end: Position { line: 21, character: 19 },
      scope: [Circular *1],
      value: '||¯||  ',
      raw: '\\"||¯||  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 21, character: 21 },
      end: Position { line: 21, character: 30 },
      scope: [Circular *1],
      value: '|| ||  ',
      raw: '\\"|| ||  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 21, character: 32 },
      end: Position { line: 21, character: 41 },
      scope: [Circular *1],
      value: '||_||¬ ',
      raw: '\\"||_||¬ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 22, character: 10 },
      end: Position { line: 22, character: 18 },
      scope: [Circular *1],
      value: '||¯|| ',
      raw: '\\"||¯|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 22, character: 20 },
      end: Position { line: 22, character: 28 },
      scope: [Circular *1],
      value: '||¯\\\\\\\\\\\\\\\\ ',
      raw: '\\"||¯\\\\\\\\\\\\\\\\ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 22, character: 30 },
      end: Position { line: 22, character: 38 },
      scope: [Circular *1],
      value: '|| || ',
      raw: '\\"|| || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 23, character: 10 },
      end: Position { line: 23, character: 17 },
      scope: [Circular *1],
      value: '||¯¯ ',
      raw: '\\"||¯¯ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 23, character: 19 },
      end: Position { line: 23, character: 26 },
      scope: [Circular *1],
      value: ' \\\\\\\\\\\\\\\\  ',
      raw: '\\" \\\\\\\\\\\\\\\\  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 23, character: 28 },
      end: Position { line: 23, character: 35 },
      scope: [Circular *1],
      value: '__|| ',
      raw: '\\"__|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 24, character: 10 },
      end: Position { line: 24, character: 17 },
      scope: [Circular *1],
      value: '¯||¯ ',
      raw: '\\"¯||¯ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 24, character: 19 },
      end: Position { line: 24, character: 26 },
      scope: [Circular *1],
      value: ' ||  ',
      raw: '\\" ||  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 24, character: 28 },
      end: Position { line: 24, character: 35 },
      scope: [Circular *1],
      value: ' ||  ',
      raw: '\\" ||  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 25, character: 10 },
      end: Position { line: 25, character: 18 },
      scope: [Circular *1],
      value: '|| || ',
      raw: '\\"|| || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 25, character: 20 },
      end: Position { line: 25, character: 28 },
      scope: [Circular *1],
      value: '|| || ',
      raw: '\\"|| || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 25, character: 30 },
      end: Position { line: 25, character: 38 },
      scope: [Circular *1],
      value: '||_|| ',
      raw: '\\"||_|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 26, character: 10 },
      end: Position { line: 26, character: 18 },
      scope: [Circular *1],
      value: '\\\\\\\\\\\\\\\\ || ',
      raw: '\\"\\\\\\\\\\\\\\\\ || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 26, character: 20 },
      end: Position { line: 26, character: 28 },
      scope: [Circular *1],
      value: ' \\\\\\\\\\\\\\\\|| ',
      raw: '\\" \\\\\\\\\\\\\\\\|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 26, character: 30 },
      end: Position { line: 26, character: 38 },
      scope: [Circular *1],
      value: '  \\\\\\\\\\\\\\\\| ',
      raw: '\\"  \\\\\\\\\\\\\\\\| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 27, character: 10 },
      end: Position { line: 27, character: 21 },
      scope: [Circular *1],
      value: '\\\\\\\\\\\\\\\\ |\\\\\\\\\\\\\\\\ | ',
      raw: '\\"\\\\\\\\\\\\\\\\ |\\\\\\\\\\\\\\\\ | \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 27, character: 23 },
      end: Position { line: 27, character: 34 },
      scope: [Circular *1],
      value: ' \\\\\\\\\\\\\\\\| \\\\\\\\\\\\\\\\| ',
      raw: '\\" \\\\\\\\\\\\\\\\| \\\\\\\\\\\\\\\\| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 27, character: 36 },
      end: Position { line: 27, character: 47 },
      scope: [Circular *1],
      value: '  \\\\\\\\\\\\\\\\  \\\\\\\\\\\\\\\\ ',
      raw: '\\"  \\\\\\\\\\\\\\\\  \\\\\\\\\\\\\\\\ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 28, character: 10 },
      end: Position { line: 28, character: 18 },
      scope: [Circular *1],
      value: '\\\\\\\\\\\\\\\\  / ',
      raw: '\\"\\\\\\\\\\\\\\\\  / \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 28, character: 20 },
      end: Position { line: 28, character: 28 },
      scope: [Circular *1],
      value: ' \\\\\\\\\\\\\\\\/  ',
      raw: '\\" \\\\\\\\\\\\\\\\/  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 28, character: 30 },
      end: Position { line: 28, character: 38 },
      scope: [Circular *1],
      value: ' //\\\\\\\\  ',
      raw: '\\" //\\\\\\\\  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 29, character: 10 },
      end: Position { line: 29, character: 19 },
      scope: [Circular *1],
      value: '\\\\\\\\\\\\\\\\  // ',
      raw: '\\"\\\\\\\\\\\\\\\\  // \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 29, character: 21 },
      end: Position { line: 29, character: 30 },
      scope: [Circular *1],
      value: ' \\\\\\\\\\\\\\\\//  ',
      raw: '\\" \\\\\\\\\\\\\\\\//  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 29, character: 32 },
      end: Position { line: 29, character: 41 },
      scope: [Circular *1],
      value: '  ||   ',
      raw: '\\"  ||   \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 30, character: 10 },
      end: Position { line: 30, character: 16 },
      scope: [Circular *1],
      value: '¯// ',
      raw: '\\"¯// \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 30, character: 18 },
      end: Position { line: 30, character: 24 },
      scope: [Circular *1],
      value: '//  ',
      raw: '\\"//  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 30, character: 26 },
      end: Position { line: 30, character: 32 },
      scope: [Circular *1],
      value: '||_ ',
      raw: '\\"||_ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 31, character: 5 },
      end: Position { line: 31, character: 8 },
      scope: [Circular *1],
      value: '0',
      raw: '\\"0\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 31, character: 13 },
      end: Position { line: 31, character: 21 },
      scope: [Circular *1],
      value: '||¯|| ',
      raw: '\\"||¯|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 31, character: 23 },
      end: Position { line: 31, character: 31 },
      scope: [Circular *1],
      value: '||x|| ',
      raw: '\\"||x|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 31, character: 33 },
      end: Position { line: 31, character: 41 },
      scope: [Circular *1],
      value: '||_|| ',
      raw: '\\"||_|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 32, character: 5 },
      end: Position { line: 32, character: 8 },
      scope: [Circular *1],
      value: '1',
      raw: '\\"1\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 32, character: 13 },
      end: Position { line: 32, character: 19 },
      scope: [Circular *1],
      value: \\"'|| \\",
      raw: \`\\"'|| \\"\`
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 32, character: 21 },
      end: Position { line: 32, character: 27 },
      scope: [Circular *1],
      value: ' || ',
      raw: '\\" || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 32, character: 29 },
      end: Position { line: 32, character: 35 },
      scope: [Circular *1],
      value: ' || ',
      raw: '\\" || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 33, character: 5 },
      end: Position { line: 33, character: 8 },
      scope: [Circular *1],
      value: '2',
      raw: '\\"2\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 33, character: 13 },
      end: Position { line: 33, character: 20 },
      scope: [Circular *1],
      value: '¯¯|| ',
      raw: '\\"¯¯|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 33, character: 22 },
      end: Position { line: 33, character: 29 },
      scope: [Circular *1],
      value: '||¯  ',
      raw: '\\"||¯  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 33, character: 31 },
      end: Position { line: 33, character: 38 },
      scope: [Circular *1],
      value: '||_  ',
      raw: '\\"||_  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 34, character: 5 },
      end: Position { line: 34, character: 8 },
      scope: [Circular *1],
      value: '3',
      raw: '\\"3\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 34, character: 13 },
      end: Position { line: 34, character: 19 },
      scope: [Circular *1],
      value: '¯|| ',
      raw: '\\"¯|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 34, character: 21 },
      end: Position { line: 34, character: 27 },
      scope: [Circular *1],
      value: '-|| ',
      raw: '\\"-|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 34, character: 29 },
      end: Position { line: 34, character: 35 },
      scope: [Circular *1],
      value: '_|| ',
      raw: '\\"_|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 35, character: 5 },
      end: Position { line: 35, character: 8 },
      scope: [Circular *1],
      value: '4',
      raw: '\\"4\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 35, character: 13 },
      end: Position { line: 35, character: 20 },
      scope: [Circular *1],
      value: ' /|| ',
      raw: '\\" /|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 35, character: 22 },
      end: Position { line: 35, character: 29 },
      scope: [Circular *1],
      value: '/_|| ',
      raw: '\\"/_|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 35, character: 31 },
      end: Position { line: 35, character: 38 },
      scope: [Circular *1],
      value: '  || ',
      raw: '\\"  || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 36, character: 5 },
      end: Position { line: 36, character: 8 },
      scope: [Circular *1],
      value: '5',
      raw: '\\"5\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 36, character: 13 },
      end: Position { line: 36, character: 20 },
      scope: [Circular *1],
      value: '||¯¯ ',
      raw: '\\"||¯¯ \\"'
    },
    ... 71 more items
  ],
  scopes: [
    <ref *2> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 45, character: 16 },
      end: Position { line: 69, character: 13 },
      scope: [Circular *1],
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTIdentifier],
          init: [ASTListConstructorExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTForGenericStatement {
          type: 'ForGenericStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          body: [Array],
          variable: [ASTIdentifier],
          iterator: [ASTIdentifier]
        },
        ASTIfStatement {
          type: 'IfStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          clauses: [Array]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(5) { 'colors', 'r', 'signs', 'MAP', 'join' },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTIdentifier],
          init: [ASTListConstructorExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTIndexExpression],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTIndexExpression],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTIndexExpression],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTIndexExpression],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTIndexExpression],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTIndexExpression],
          init: [ASTEvaluationExpression]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          name: 'str'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          name: 'colors'
        }
      ]
    }
  ],
  lines: Map(58) {
    1 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 14 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 9 },
        scope: [Circular *1],
        name: 'AsciiGen'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 12 },
        end: Position { line: 1, character: 14 },
        scope: [Circular *1],
        fields: []
      }
    },
    3 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 9 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 3, character: 1 },
        end: Position { line: 3, character: 4 },
        scope: [Circular *1],
        name: 'map'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 3, character: 7 },
        end: Position { line: 3, character: 9 },
        scope: [Circular *1],
        fields: []
      }
    },
    5 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 5, character: 1 },
      end: Position { line: 5, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 5, character: 4 },
        end: Position { line: 5, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 5, character: 9 },
        end: Position { line: 5, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    6 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 6, character: 1 },
      end: Position { line: 6, character: 36 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 6, character: 4 },
        end: Position { line: 6, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'b'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 6, character: 9 },
        end: Position { line: 6, character: 36 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    7 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 7, character: 1 },
      end: Position { line: 7, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 7, character: 4 },
        end: Position { line: 7, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'c'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 7, character: 9 },
        end: Position { line: 7, character: 33 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    8 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 8, character: 1 },
      end: Position { line: 8, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 8, character: 4 },
        end: Position { line: 8, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'd'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 8, character: 9 },
        end: Position { line: 8, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    9 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 9, character: 1 },
      end: Position { line: 9, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 9, character: 4 },
        end: Position { line: 9, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'e'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 9, character: 9 },
        end: Position { line: 9, character: 33 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    10 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 10, character: 1 },
      end: Position { line: 10, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 10, character: 4 },
        end: Position { line: 10, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'f'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 10, character: 9 },
        end: Position { line: 10, character: 33 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    11 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 11, character: 1 },
      end: Position { line: 11, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 11, character: 4 },
        end: Position { line: 11, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'g'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 11, character: 9 },
        end: Position { line: 11, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    12 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 12, character: 1 },
      end: Position { line: 12, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 12, character: 4 },
        end: Position { line: 12, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'h'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 12, character: 9 },
        end: Position { line: 12, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    13 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 13, character: 1 },
      end: Position { line: 13, character: 30 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 13, character: 4 },
        end: Position { line: 13, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'i'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 13, character: 9 },
        end: Position { line: 13, character: 30 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    14 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 14, character: 1 },
      end: Position { line: 14, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 14, character: 4 },
        end: Position { line: 14, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'j'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 14, character: 9 },
        end: Position { line: 14, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    15 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 15, character: 1 },
      end: Position { line: 15, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 15, character: 4 },
        end: Position { line: 15, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'k'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 15, character: 9 },
        end: Position { line: 15, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    16 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 16, character: 1 },
      end: Position { line: 16, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 16, character: 4 },
        end: Position { line: 16, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'l'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 16, character: 9 },
        end: Position { line: 16, character: 33 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    17 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 17, character: 1 },
      end: Position { line: 17, character: 45 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 17, character: 4 },
        end: Position { line: 17, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'm'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 17, character: 9 },
        end: Position { line: 17, character: 45 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    18 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 18, character: 1 },
      end: Position { line: 18, character: 45 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 18, character: 4 },
        end: Position { line: 18, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'n'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 18, character: 9 },
        end: Position { line: 18, character: 45 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    19 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 19, character: 1 },
      end: Position { line: 19, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 19, character: 4 },
        end: Position { line: 19, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'o'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 19, character: 9 },
        end: Position { line: 19, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    20 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 20, character: 1 },
      end: Position { line: 20, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 20, character: 4 },
        end: Position { line: 20, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'p'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 20, character: 9 },
        end: Position { line: 20, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    21 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 21, character: 1 },
      end: Position { line: 21, character: 42 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 21, character: 4 },
        end: Position { line: 21, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'q'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 21, character: 9 },
        end: Position { line: 21, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    22 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 22, character: 1 },
      end: Position { line: 22, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 22, character: 4 },
        end: Position { line: 22, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'r'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 22, character: 9 },
        end: Position { line: 22, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    23 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 23, character: 1 },
      end: Position { line: 23, character: 36 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 23, character: 4 },
        end: Position { line: 23, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 's'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 23, character: 9 },
        end: Position { line: 23, character: 36 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    24 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 24, character: 1 },
      end: Position { line: 24, character: 36 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 24, character: 4 },
        end: Position { line: 24, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 't'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 24, character: 9 },
        end: Position { line: 24, character: 36 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    25 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 25, character: 1 },
      end: Position { line: 25, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 25, character: 4 },
        end: Position { line: 25, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'u'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 25, character: 9 },
        end: Position { line: 25, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    26 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 26, character: 1 },
      end: Position { line: 26, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 26, character: 4 },
        end: Position { line: 26, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'v'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 26, character: 9 },
        end: Position { line: 26, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    27 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 27, character: 1 },
      end: Position { line: 27, character: 48 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 27, character: 4 },
        end: Position { line: 27, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'w'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 27, character: 9 },
        end: Position { line: 27, character: 48 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    28 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 28, character: 1 },
      end: Position { line: 28, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 28, character: 4 },
        end: Position { line: 28, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'x'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 28, character: 9 },
        end: Position { line: 28, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    29 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 29, character: 1 },
      end: Position { line: 29, character: 42 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 29, character: 4 },
        end: Position { line: 29, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'y'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 29, character: 9 },
        end: Position { line: 29, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    30 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 30, character: 1 },
      end: Position { line: 30, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 30, character: 4 },
        end: Position { line: 30, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'z'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 30, character: 9 },
        end: Position { line: 30, character: 33 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    31 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 31, character: 1 },
      end: Position { line: 31, character: 42 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 31, character: 5 },
        end: Position { line: 31, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '0',
          raw: '\\"0\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 31, character: 12 },
        end: Position { line: 31, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    32 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 32, character: 1 },
      end: Position { line: 32, character: 36 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 32, character: 5 },
        end: Position { line: 32, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '1',
          raw: '\\"1\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 32, character: 12 },
        end: Position { line: 32, character: 36 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    33 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 33, character: 1 },
      end: Position { line: 33, character: 39 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 33, character: 5 },
        end: Position { line: 33, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '2',
          raw: '\\"2\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 33, character: 12 },
        end: Position { line: 33, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    34 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 34, character: 1 },
      end: Position { line: 34, character: 36 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 34, character: 5 },
        end: Position { line: 34, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '3',
          raw: '\\"3\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 34, character: 12 },
        end: Position { line: 34, character: 36 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    35 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 35, character: 1 },
      end: Position { line: 35, character: 39 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 35, character: 5 },
        end: Position { line: 35, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '4',
          raw: '\\"4\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 35, character: 12 },
        end: Position { line: 35, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    36 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 36, character: 1 },
      end: Position { line: 36, character: 39 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 36, character: 5 },
        end: Position { line: 36, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '5',
          raw: '\\"5\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 36, character: 12 },
        end: Position { line: 36, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    37 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 37, character: 1 },
      end: Position { line: 37, character: 42 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 37, character: 5 },
        end: Position { line: 37, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '6',
          raw: '\\"6\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 37, character: 12 },
        end: Position { line: 37, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    38 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 38, character: 1 },
      end: Position { line: 38, character: 39 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 38, character: 5 },
        end: Position { line: 38, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '7',
          raw: '\\"7\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 38, character: 12 },
        end: Position { line: 38, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    39 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 39, character: 1 },
      end: Position { line: 39, character: 42 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 39, character: 5 },
        end: Position { line: 39, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '8',
          raw: '\\"8\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 39, character: 12 },
        end: Position { line: 39, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    40 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 40, character: 1 },
      end: Position { line: 40, character: 42 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 40, character: 5 },
        end: Position { line: 40, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '9',
          raw: '\\"9\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 40, character: 12 },
        end: Position { line: 40, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    41 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 41, character: 1 },
      end: Position { line: 41, character: 30 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 41, character: 5 },
        end: Position { line: 41, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: ' ',
          raw: '\\" \\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 41, character: 12 },
        end: Position { line: 41, character: 30 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    43 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 43, character: 1 },
      end: Position { line: 43, character: 19 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 43, character: 9 },
        end: Position { line: 43, character: 15 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'MAP'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'AsciiGen'
        }
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 43, character: 16 },
        end: Position { line: 43, character: 19 },
        scope: [Circular *1],
        name: 'map'
      }
    },
    46 => <ref *3> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 46, character: 5 },
      end: Position { line: 46, character: 21 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 16 },
        end: Position { line: 69, character: 13 },
        scope: [Circular *1],
        body: [
          [Circular *3],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'colors', 'r', 'signs', 'MAP', 'join' },
        assignments: [
          [Circular *3],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 46, character: 5 },
        end: Position { line: 46, character: 6 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'r'
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 46, character: 9 },
        end: Position { line: 46, character: 21 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    47 => <ref *4> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 47, character: 5 },
      end: Position { line: 47, character: 21 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 16 },
        end: Position { line: 69, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [Circular *4],
          [ASTForGenericStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'colors', 'r', 'signs', 'MAP', 'join' },
        assignments: [
          [ASTAssignmentStatement],
          [Circular *4],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 47, character: 5 },
        end: Position { line: 47, character: 10 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'signs'
      },
      init: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 47, character: 17 },
        end: Position { line: 47, character: 21 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'MAP'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'self'
        }
      }
    },
    50 => <ref *5> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 50, character: 9 },
      end: Position { line: 50, character: 26 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 16 },
        end: Position { line: 69, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'colors', 'r', 'signs', 'MAP', 'join' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *5],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 50, character: 9 },
        end: Position { line: 50, character: 13 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'char'
      },
      init: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 50, character: 20 },
        end: Position { line: 50, character: 26 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'lower'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'char'
        }
      }
    },
    52 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 52, character: 13 },
      end: Position { line: 52, character: 38 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 16 },
        end: Position { line: 69, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'colors', 'r', 'signs', 'MAP', 'join' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 52, character: 22 },
        end: Position { line: 52, character: 38 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIndexExpression]
        },
        arguments: [ [ASTIndexExpression] ]
      }
    },
    53 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 53, character: 13 },
      end: Position { line: 53, character: 38 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 16 },
        end: Position { line: 69, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'colors', 'r', 'signs', 'MAP', 'join' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 53, character: 22 },
        end: Position { line: 53, character: 38 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIndexExpression]
        },
        arguments: [ [ASTIndexExpression] ]
      }
    },
    54 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 54, character: 13 },
      end: Position { line: 54, character: 38 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 16 },
        end: Position { line: 69, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'colors', 'r', 'signs', 'MAP', 'join' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 54, character: 22 },
        end: Position { line: 54, character: 38 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIndexExpression]
        },
        arguments: [ [ASTIndexExpression] ]
      }
    },
    51 => ASTIfStatement {
      type: 'IfStatement',
      start: Position { line: 51, character: 9 },
      end: Position { line: 55, character: 15 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 16 },
        end: Position { line: 69, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'colors', 'r', 'signs', 'MAP', 'join' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      clauses: [
        ASTIfClause {
          type: 'IfClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTCallExpression]
        }
      ]
    },
    49 => <ref *6> ASTForGenericStatement {
      type: 'ForGenericStatement',
      start: Position { line: 49, character: 5 },
      end: Position { line: 56, character: 12 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 16 },
        end: Position { line: 69, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *6],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'colors', 'r', 'signs', 'MAP', 'join' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      body: [
        <ref *5> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTIfStatement {
          type: 'IfStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          clauses: [Array]
        }
      ],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 49, character: 9 },
        end: Position { line: 49, character: 13 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'char'
      },
      iterator: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 49, character: 17 },
        end: Position { line: 49, character: 20 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'str'
      }
    },
    59 => <ref *7> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 59, character: 9 },
      end: Position { line: 59, character: 65 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 16 },
        end: Position { line: 69, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'colors', 'r', 'signs', 'MAP', 'join' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *7],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 59, character: 11 },
        end: Position { line: 59, character: 15 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'r'
        },
        index: ASTLiteral {
          type: 'NumericLiteral',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          value: 0,
          raw: '0'
        }
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 59, character: 44 },
        end: Position { line: 59, character: 65 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '+',
        left: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          operator: '+',
          left: [ASTListConstructorExpression],
          right: [ASTIndexExpression]
        },
        right: ASTListConstructorExpression {
          type: 'ListConstructorExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          fields: [Array]
        }
      }
    },
    60 => <ref *8> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 60, character: 9 },
      end: Position { line: 60, character: 65 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 16 },
        end: Position { line: 69, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'colors', 'r', 'signs', 'MAP', 'join' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *8],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 60, character: 11 },
        end: Position { line: 60, character: 15 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'r'
        },
        index: ASTLiteral {
          type: 'NumericLiteral',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          value: 1,
          raw: '1'
        }
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 60, character: 44 },
        end: Position { line: 60, character: 65 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '+',
        left: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          operator: '+',
          left: [ASTListConstructorExpression],
          right: [ASTIndexExpression]
        },
        right: ASTListConstructorExpression {
          type: 'ListConstructorExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          fields: [Array]
        }
      }
    },
    61 => <ref *9> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 61, character: 9 },
      end: Position { line: 61, character: 65 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 16 },
        end: Position { line: 69, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'colors', 'r', 'signs', 'MAP', 'join' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *9],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 61, character: 11 },
        end: Position { line: 61, character: 15 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'r'
        },
        index: ASTLiteral {
          type: 'NumericLiteral',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          value: 2,
          raw: '2'
        }
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 61, character: 44 },
        end: Position { line: 61, character: 65 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '+',
        left: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          operator: '+',
          left: [ASTListConstructorExpression],
          right: [ASTIndexExpression]
        },
        right: ASTListConstructorExpression {
          type: 'ListConstructorExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          fields: [Array]
        }
      }
    },
    63 => <ref *10> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 63, character: 9 },
      end: Position { line: 63, character: 68 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 16 },
        end: Position { line: 69, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'colors', 'r', 'signs', 'MAP', 'join' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *10],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 63, character: 11 },
        end: Position { line: 63, character: 15 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'r'
        },
        index: ASTLiteral {
          type: 'NumericLiteral',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          value: 0,
          raw: '0'
        }
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 63, character: 47 },
        end: Position { line: 63, character: 68 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '+',
        left: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          operator: '+',
          left: [ASTListConstructorExpression],
          right: [ASTIndexExpression]
        },
        right: ASTListConstructorExpression {
          type: 'ListConstructorExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          fields: [Array]
        }
      }
    },
    64 => <ref *11> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 64, character: 9 },
      end: Position { line: 64, character: 68 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 16 },
        end: Position { line: 69, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'colors', 'r', 'signs', 'MAP', 'join' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *11],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 64, character: 11 },
        end: Position { line: 64, character: 15 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'r'
        },
        index: ASTLiteral {
          type: 'NumericLiteral',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          value: 1,
          raw: '1'
        }
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 64, character: 47 },
        end: Position { line: 64, character: 68 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '+',
        left: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          operator: '+',
          left: [ASTListConstructorExpression],
          right: [ASTIndexExpression]
        },
        right: ASTListConstructorExpression {
          type: 'ListConstructorExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          fields: [Array]
        }
      }
    },
    65 => <ref *12> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 65, character: 9 },
      end: Position { line: 65, character: 68 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 16 },
        end: Position { line: 69, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'colors', 'r', 'signs', 'MAP', 'join' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *12]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 65, character: 11 },
        end: Position { line: 65, character: 15 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'r'
        },
        index: ASTLiteral {
          type: 'NumericLiteral',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          value: 2,
          raw: '2'
        }
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 65, character: 47 },
        end: Position { line: 65, character: 68 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '+',
        left: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          operator: '+',
          left: [ASTListConstructorExpression],
          right: [ASTIndexExpression]
        },
        right: ASTListConstructorExpression {
          type: 'ListConstructorExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          fields: [Array]
        }
      }
    },
    58 => <ref *13> ASTIfStatement {
      type: 'IfStatement',
      start: Position { line: 58, character: 5 },
      end: Position { line: 66, character: 11 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 16 },
        end: Position { line: 69, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [Circular *13],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'colors', 'r', 'signs', 'MAP', 'join' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      clauses: [
        ASTIfClause {
          type: 'IfClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTEvaluationExpression]
        },
        ASTIfClause {
          type: 'ElseifClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTEvaluationExpression]
        }
      ]
    },
    68 => <ref *14> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 68, character: 5 },
      end: Position { line: 68, character: 68 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 16 },
        end: Position { line: 69, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTIfStatement],
          [Circular *14]
        ],
        namespaces: Set(5) { 'colors', 'r', 'signs', 'MAP', 'join' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      argument: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 68, character: 62 },
        end: Position { line: 68, character: 68 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTListConstructorExpression]
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    45 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 45, character: 1 },
      end: Position { line: 69, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 45, character: 9 },
        end: Position { line: 45, character: 15 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'gen'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'AsciiGen'
        }
      },
      init: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 16 },
        end: Position { line: 69, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'colors', 'r', 'signs', 'MAP', 'join' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    71 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 71, character: 1 },
      end: Position { line: 71, character: 29 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 71, character: 6 },
        end: Position { line: 71, character: 29 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTCallExpression] ]
      }
    }
  }
}"
`;

exports[`parse default scripts ascii.src unsafe 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 71, character: 29 },
  scope: null,
  body: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 14 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 9 },
        scope: [Circular *1],
        name: 'AsciiGen'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 12 },
        end: Position { line: 1, character: 14 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 9 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 3, character: 1 },
        end: Position { line: 3, character: 4 },
        scope: [Circular *1],
        name: 'map'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 3, character: 7 },
        end: Position { line: 3, character: 9 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 5, character: 1 },
      end: Position { line: 5, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 5, character: 4 },
        end: Position { line: 5, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 5, character: 9 },
        end: Position { line: 5, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 6, character: 1 },
      end: Position { line: 6, character: 36 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 6, character: 4 },
        end: Position { line: 6, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'b'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 6, character: 9 },
        end: Position { line: 6, character: 36 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 7, character: 1 },
      end: Position { line: 7, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 7, character: 4 },
        end: Position { line: 7, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'c'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 7, character: 9 },
        end: Position { line: 7, character: 33 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 8, character: 1 },
      end: Position { line: 8, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 8, character: 4 },
        end: Position { line: 8, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'd'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 8, character: 9 },
        end: Position { line: 8, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 9, character: 1 },
      end: Position { line: 9, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 9, character: 4 },
        end: Position { line: 9, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'e'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 9, character: 9 },
        end: Position { line: 9, character: 33 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 10, character: 1 },
      end: Position { line: 10, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 10, character: 4 },
        end: Position { line: 10, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'f'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 10, character: 9 },
        end: Position { line: 10, character: 33 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 11, character: 1 },
      end: Position { line: 11, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 11, character: 4 },
        end: Position { line: 11, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'g'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 11, character: 9 },
        end: Position { line: 11, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 12, character: 1 },
      end: Position { line: 12, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 12, character: 4 },
        end: Position { line: 12, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'h'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 12, character: 9 },
        end: Position { line: 12, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 13, character: 1 },
      end: Position { line: 13, character: 30 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 13, character: 4 },
        end: Position { line: 13, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'i'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 13, character: 9 },
        end: Position { line: 13, character: 30 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 14, character: 1 },
      end: Position { line: 14, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 14, character: 4 },
        end: Position { line: 14, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'j'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 14, character: 9 },
        end: Position { line: 14, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 15, character: 1 },
      end: Position { line: 15, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 15, character: 4 },
        end: Position { line: 15, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'k'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 15, character: 9 },
        end: Position { line: 15, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 16, character: 1 },
      end: Position { line: 16, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 16, character: 4 },
        end: Position { line: 16, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'l'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 16, character: 9 },
        end: Position { line: 16, character: 33 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 17, character: 1 },
      end: Position { line: 17, character: 45 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 17, character: 4 },
        end: Position { line: 17, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'm'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 17, character: 9 },
        end: Position { line: 17, character: 45 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 18, character: 1 },
      end: Position { line: 18, character: 45 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 18, character: 4 },
        end: Position { line: 18, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'n'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 18, character: 9 },
        end: Position { line: 18, character: 45 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 19, character: 1 },
      end: Position { line: 19, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 19, character: 4 },
        end: Position { line: 19, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'o'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 19, character: 9 },
        end: Position { line: 19, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 20, character: 1 },
      end: Position { line: 20, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 20, character: 4 },
        end: Position { line: 20, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'p'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 20, character: 9 },
        end: Position { line: 20, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 21, character: 1 },
      end: Position { line: 21, character: 42 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 21, character: 4 },
        end: Position { line: 21, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'q'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 21, character: 9 },
        end: Position { line: 21, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 22, character: 1 },
      end: Position { line: 22, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 22, character: 4 },
        end: Position { line: 22, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'r'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 22, character: 9 },
        end: Position { line: 22, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 23, character: 1 },
      end: Position { line: 23, character: 36 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 23, character: 4 },
        end: Position { line: 23, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 's'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 23, character: 9 },
        end: Position { line: 23, character: 36 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 24, character: 1 },
      end: Position { line: 24, character: 36 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 24, character: 4 },
        end: Position { line: 24, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 't'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 24, character: 9 },
        end: Position { line: 24, character: 36 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 25, character: 1 },
      end: Position { line: 25, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 25, character: 4 },
        end: Position { line: 25, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'u'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 25, character: 9 },
        end: Position { line: 25, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 26, character: 1 },
      end: Position { line: 26, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 26, character: 4 },
        end: Position { line: 26, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'v'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 26, character: 9 },
        end: Position { line: 26, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 27, character: 1 },
      end: Position { line: 27, character: 48 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 27, character: 4 },
        end: Position { line: 27, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'w'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 27, character: 9 },
        end: Position { line: 27, character: 48 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 28, character: 1 },
      end: Position { line: 28, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 28, character: 4 },
        end: Position { line: 28, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'x'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 28, character: 9 },
        end: Position { line: 28, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 29, character: 1 },
      end: Position { line: 29, character: 42 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 29, character: 4 },
        end: Position { line: 29, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'y'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 29, character: 9 },
        end: Position { line: 29, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 30, character: 1 },
      end: Position { line: 30, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 30, character: 4 },
        end: Position { line: 30, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'z'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 30, character: 9 },
        end: Position { line: 30, character: 33 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 31, character: 1 },
      end: Position { line: 31, character: 42 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 31, character: 5 },
        end: Position { line: 31, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '0',
          raw: '\\"0\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 31, character: 12 },
        end: Position { line: 31, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 32, character: 1 },
      end: Position { line: 32, character: 36 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 32, character: 5 },
        end: Position { line: 32, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '1',
          raw: '\\"1\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 32, character: 12 },
        end: Position { line: 32, character: 36 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 33, character: 1 },
      end: Position { line: 33, character: 39 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 33, character: 5 },
        end: Position { line: 33, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '2',
          raw: '\\"2\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 33, character: 12 },
        end: Position { line: 33, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 34, character: 1 },
      end: Position { line: 34, character: 36 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 34, character: 5 },
        end: Position { line: 34, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '3',
          raw: '\\"3\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 34, character: 12 },
        end: Position { line: 34, character: 36 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 35, character: 1 },
      end: Position { line: 35, character: 39 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 35, character: 5 },
        end: Position { line: 35, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '4',
          raw: '\\"4\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 35, character: 12 },
        end: Position { line: 35, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 36, character: 1 },
      end: Position { line: 36, character: 39 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 36, character: 5 },
        end: Position { line: 36, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '5',
          raw: '\\"5\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 36, character: 12 },
        end: Position { line: 36, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 37, character: 1 },
      end: Position { line: 37, character: 42 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 37, character: 5 },
        end: Position { line: 37, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '6',
          raw: '\\"6\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 37, character: 12 },
        end: Position { line: 37, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 38, character: 1 },
      end: Position { line: 38, character: 39 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 38, character: 5 },
        end: Position { line: 38, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '7',
          raw: '\\"7\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 38, character: 12 },
        end: Position { line: 38, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 39, character: 1 },
      end: Position { line: 39, character: 42 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 39, character: 5 },
        end: Position { line: 39, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '8',
          raw: '\\"8\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 39, character: 12 },
        end: Position { line: 39, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 40, character: 1 },
      end: Position { line: 40, character: 42 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 40, character: 5 },
        end: Position { line: 40, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '9',
          raw: '\\"9\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 40, character: 12 },
        end: Position { line: 40, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 41, character: 1 },
      end: Position { line: 41, character: 30 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 41, character: 5 },
        end: Position { line: 41, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: ' ',
          raw: '\\" \\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 41, character: 12 },
        end: Position { line: 41, character: 30 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 43, character: 1 },
      end: Position { line: 43, character: 19 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 43, character: 9 },
        end: Position { line: 43, character: 15 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'MAP'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'AsciiGen'
        }
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 43, character: 16 },
        end: Position { line: 43, character: 19 },
        scope: [Circular *1],
        name: 'map'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 45, character: 1 },
      end: Position { line: 69, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 45, character: 9 },
        end: Position { line: 45, character: 15 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'gen'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'AsciiGen'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 16 },
        end: Position { line: 69, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'colors', 'r', 'signs', 'MAP', 'join' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 71, character: 1 },
      end: Position { line: 71, character: 29 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 71, character: 6 },
        end: Position { line: 71, character: 29 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTCallExpression] ]
      }
    }
  ],
  namespaces: Set(30) {
    'AsciiGen',
    'map',
    'a',
    'b',
    'c',
    'd',
    'e',
    'f',
    'g',
    'h',
    'i',
    'j',
    'k',
    'l',
    'm',
    'n',
    'o',
    'p',
    'q',
    'r',
    's',
    't',
    'u',
    'v',
    'w',
    'x',
    'y',
    'z',
    'MAP',
    'gen'
  },
  assignments: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 14 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 9 },
        scope: [Circular *1],
        name: 'AsciiGen'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 12 },
        end: Position { line: 1, character: 14 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 9 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 3, character: 1 },
        end: Position { line: 3, character: 4 },
        scope: [Circular *1],
        name: 'map'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 3, character: 7 },
        end: Position { line: 3, character: 9 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 5, character: 1 },
      end: Position { line: 5, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 5, character: 4 },
        end: Position { line: 5, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 5, character: 9 },
        end: Position { line: 5, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 6, character: 1 },
      end: Position { line: 6, character: 36 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 6, character: 4 },
        end: Position { line: 6, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'b'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 6, character: 9 },
        end: Position { line: 6, character: 36 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 7, character: 1 },
      end: Position { line: 7, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 7, character: 4 },
        end: Position { line: 7, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'c'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 7, character: 9 },
        end: Position { line: 7, character: 33 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 8, character: 1 },
      end: Position { line: 8, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 8, character: 4 },
        end: Position { line: 8, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'd'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 8, character: 9 },
        end: Position { line: 8, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 9, character: 1 },
      end: Position { line: 9, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 9, character: 4 },
        end: Position { line: 9, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'e'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 9, character: 9 },
        end: Position { line: 9, character: 33 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 10, character: 1 },
      end: Position { line: 10, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 10, character: 4 },
        end: Position { line: 10, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'f'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 10, character: 9 },
        end: Position { line: 10, character: 33 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 11, character: 1 },
      end: Position { line: 11, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 11, character: 4 },
        end: Position { line: 11, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'g'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 11, character: 9 },
        end: Position { line: 11, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 12, character: 1 },
      end: Position { line: 12, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 12, character: 4 },
        end: Position { line: 12, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'h'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 12, character: 9 },
        end: Position { line: 12, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 13, character: 1 },
      end: Position { line: 13, character: 30 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 13, character: 4 },
        end: Position { line: 13, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'i'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 13, character: 9 },
        end: Position { line: 13, character: 30 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 14, character: 1 },
      end: Position { line: 14, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 14, character: 4 },
        end: Position { line: 14, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'j'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 14, character: 9 },
        end: Position { line: 14, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 15, character: 1 },
      end: Position { line: 15, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 15, character: 4 },
        end: Position { line: 15, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'k'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 15, character: 9 },
        end: Position { line: 15, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 16, character: 1 },
      end: Position { line: 16, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 16, character: 4 },
        end: Position { line: 16, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'l'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 16, character: 9 },
        end: Position { line: 16, character: 33 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 17, character: 1 },
      end: Position { line: 17, character: 45 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 17, character: 4 },
        end: Position { line: 17, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'm'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 17, character: 9 },
        end: Position { line: 17, character: 45 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 18, character: 1 },
      end: Position { line: 18, character: 45 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 18, character: 4 },
        end: Position { line: 18, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'n'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 18, character: 9 },
        end: Position { line: 18, character: 45 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 19, character: 1 },
      end: Position { line: 19, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 19, character: 4 },
        end: Position { line: 19, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'o'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 19, character: 9 },
        end: Position { line: 19, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 20, character: 1 },
      end: Position { line: 20, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 20, character: 4 },
        end: Position { line: 20, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'p'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 20, character: 9 },
        end: Position { line: 20, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 21, character: 1 },
      end: Position { line: 21, character: 42 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 21, character: 4 },
        end: Position { line: 21, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'q'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 21, character: 9 },
        end: Position { line: 21, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 22, character: 1 },
      end: Position { line: 22, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 22, character: 4 },
        end: Position { line: 22, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'r'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 22, character: 9 },
        end: Position { line: 22, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 23, character: 1 },
      end: Position { line: 23, character: 36 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 23, character: 4 },
        end: Position { line: 23, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 's'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 23, character: 9 },
        end: Position { line: 23, character: 36 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 24, character: 1 },
      end: Position { line: 24, character: 36 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 24, character: 4 },
        end: Position { line: 24, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 't'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 24, character: 9 },
        end: Position { line: 24, character: 36 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 25, character: 1 },
      end: Position { line: 25, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 25, character: 4 },
        end: Position { line: 25, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'u'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 25, character: 9 },
        end: Position { line: 25, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 26, character: 1 },
      end: Position { line: 26, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 26, character: 4 },
        end: Position { line: 26, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'v'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 26, character: 9 },
        end: Position { line: 26, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 27, character: 1 },
      end: Position { line: 27, character: 48 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 27, character: 4 },
        end: Position { line: 27, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'w'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 27, character: 9 },
        end: Position { line: 27, character: 48 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 28, character: 1 },
      end: Position { line: 28, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 28, character: 4 },
        end: Position { line: 28, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'x'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 28, character: 9 },
        end: Position { line: 28, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 29, character: 1 },
      end: Position { line: 29, character: 42 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 29, character: 4 },
        end: Position { line: 29, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'y'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 29, character: 9 },
        end: Position { line: 29, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 30, character: 1 },
      end: Position { line: 30, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 30, character: 4 },
        end: Position { line: 30, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'z'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 30, character: 9 },
        end: Position { line: 30, character: 33 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 31, character: 1 },
      end: Position { line: 31, character: 42 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 31, character: 5 },
        end: Position { line: 31, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '0',
          raw: '\\"0\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 31, character: 12 },
        end: Position { line: 31, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 32, character: 1 },
      end: Position { line: 32, character: 36 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 32, character: 5 },
        end: Position { line: 32, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '1',
          raw: '\\"1\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 32, character: 12 },
        end: Position { line: 32, character: 36 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 33, character: 1 },
      end: Position { line: 33, character: 39 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 33, character: 5 },
        end: Position { line: 33, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '2',
          raw: '\\"2\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 33, character: 12 },
        end: Position { line: 33, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 34, character: 1 },
      end: Position { line: 34, character: 36 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 34, character: 5 },
        end: Position { line: 34, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '3',
          raw: '\\"3\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 34, character: 12 },
        end: Position { line: 34, character: 36 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 35, character: 1 },
      end: Position { line: 35, character: 39 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 35, character: 5 },
        end: Position { line: 35, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '4',
          raw: '\\"4\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 35, character: 12 },
        end: Position { line: 35, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 36, character: 1 },
      end: Position { line: 36, character: 39 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 36, character: 5 },
        end: Position { line: 36, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '5',
          raw: '\\"5\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 36, character: 12 },
        end: Position { line: 36, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 37, character: 1 },
      end: Position { line: 37, character: 42 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 37, character: 5 },
        end: Position { line: 37, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '6',
          raw: '\\"6\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 37, character: 12 },
        end: Position { line: 37, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 38, character: 1 },
      end: Position { line: 38, character: 39 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 38, character: 5 },
        end: Position { line: 38, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '7',
          raw: '\\"7\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 38, character: 12 },
        end: Position { line: 38, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 39, character: 1 },
      end: Position { line: 39, character: 42 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 39, character: 5 },
        end: Position { line: 39, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '8',
          raw: '\\"8\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 39, character: 12 },
        end: Position { line: 39, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 40, character: 1 },
      end: Position { line: 40, character: 42 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 40, character: 5 },
        end: Position { line: 40, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '9',
          raw: '\\"9\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 40, character: 12 },
        end: Position { line: 40, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 41, character: 1 },
      end: Position { line: 41, character: 30 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 41, character: 5 },
        end: Position { line: 41, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: ' ',
          raw: '\\" \\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 41, character: 12 },
        end: Position { line: 41, character: 30 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 43, character: 1 },
      end: Position { line: 43, character: 19 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 43, character: 9 },
        end: Position { line: 43, character: 15 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'MAP'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'AsciiGen'
        }
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 43, character: 16 },
        end: Position { line: 43, character: 19 },
        scope: [Circular *1],
        name: 'map'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 45, character: 1 },
      end: Position { line: 69, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 45, character: 9 },
        end: Position { line: 45, character: 15 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'gen'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'AsciiGen'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 16 },
        end: Position { line: 69, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'colors', 'r', 'signs', 'MAP', 'join' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    }
  ],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 5, character: 10 },
      end: Position { line: 5, character: 18 },
      scope: [Circular *1],
      value: '||¯|| ',
      raw: '\\"||¯|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 5, character: 20 },
      end: Position { line: 5, character: 28 },
      scope: [Circular *1],
      value: '||_|| ',
      raw: '\\"||_|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 5, character: 30 },
      end: Position { line: 5, character: 38 },
      scope: [Circular *1],
      value: '|| || ',
      raw: '\\"|| || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 6, character: 10 },
      end: Position { line: 6, character: 17 },
      scope: [Circular *1],
      value: '||¯/ ',
      raw: '\\"||¯/ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 6, character: 19 },
      end: Position { line: 6, character: 26 },
      scope: [Circular *1],
      value: '|| \\\\\\\\ ',
      raw: '\\"|| \\\\\\\\ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 6, character: 28 },
      end: Position { line: 6, character: 35 },
      scope: [Circular *1],
      value: '||_/ ',
      raw: '\\"||_/ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 7, character: 10 },
      end: Position { line: 7, character: 16 },
      scope: [Circular *1],
      value: '||¯ ',
      raw: '\\"||¯ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 7, character: 18 },
      end: Position { line: 7, character: 24 },
      scope: [Circular *1],
      value: '||  ',
      raw: '\\"||  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 7, character: 26 },
      end: Position { line: 7, character: 32 },
      scope: [Circular *1],
      value: '||_ ',
      raw: '\\"||_ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 8, character: 10 },
      end: Position { line: 8, character: 18 },
      scope: [Circular *1],
      value: '||¯\\\\\\\\\\\\\\\\ ',
      raw: '\\"||¯\\\\\\\\\\\\\\\\ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 8, character: 20 },
      end: Position { line: 8, character: 28 },
      scope: [Circular *1],
      value: '|| // ',
      raw: '\\"|| // \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 8, character: 30 },
      end: Position { line: 8, character: 38 },
      scope: [Circular *1],
      value: '||//  ',
      raw: '\\"||//  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 9, character: 10 },
      end: Position { line: 9, character: 16 },
      scope: [Circular *1],
      value: '||¯ ',
      raw: '\\"||¯ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 9, character: 18 },
      end: Position { line: 9, character: 24 },
      scope: [Circular *1],
      value: '||- ',
      raw: '\\"||- \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 9, character: 26 },
      end: Position { line: 9, character: 32 },
      scope: [Circular *1],
      value: '||_ ',
      raw: '\\"||_ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 10, character: 10 },
      end: Position { line: 10, character: 16 },
      scope: [Circular *1],
      value: '||¯ ',
      raw: '\\"||¯ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 10, character: 18 },
      end: Position { line: 10, character: 24 },
      scope: [Circular *1],
      value: '||_ ',
      raw: '\\"||_ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 10, character: 26 },
      end: Position { line: 10, character: 32 },
      scope: [Circular *1],
      value: '||  ',
      raw: '\\"||  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 11, character: 10 },
      end: Position { line: 11, character: 18 },
      scope: [Circular *1],
      value: '||¯¯  ',
      raw: '\\"||¯¯  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 11, character: 20 },
      end: Position { line: 11, character: 28 },
      scope: [Circular *1],
      value: '|| \\\\\\\\\\\\\\\\ ',
      raw: '\\"|| \\\\\\\\\\\\\\\\ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 11, character: 30 },
      end: Position { line: 11, character: 38 },
      scope: [Circular *1],
      value: '||_|| ',
      raw: '\\"||_|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 12, character: 10 },
      end: Position { line: 12, character: 18 },
      scope: [Circular *1],
      value: '|| || ',
      raw: '\\"|| || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 12, character: 20 },
      end: Position { line: 12, character: 28 },
      scope: [Circular *1],
      value: '||-|| ',
      raw: '\\"||-|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 12, character: 30 },
      end: Position { line: 12, character: 38 },
      scope: [Circular *1],
      value: '|| || ',
      raw: '\\"|| || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 13, character: 10 },
      end: Position { line: 13, character: 15 },
      scope: [Circular *1],
      value: '|| ',
      raw: '\\"|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 13, character: 17 },
      end: Position { line: 13, character: 22 },
      scope: [Circular *1],
      value: '|| ',
      raw: '\\"|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 13, character: 24 },
      end: Position { line: 13, character: 29 },
      scope: [Circular *1],
      value: '|| ',
      raw: '\\"|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 14, character: 10 },
      end: Position { line: 14, character: 18 },
      scope: [Circular *1],
      value: ' ¯||¯ ',
      raw: '\\" ¯||¯ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 14, character: 20 },
      end: Position { line: 14, character: 28 },
      scope: [Circular *1],
      value: '  ||  ',
      raw: '\\"  ||  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 14, character: 30 },
      end: Position { line: 14, character: 38 },
      scope: [Circular *1],
      value: '|_||  ',
      raw: '\\"|_||  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 15, character: 10 },
      end: Position { line: 15, character: 18 },
      scope: [Circular *1],
      value: '||  / ',
      raw: '\\"||  / \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 15, character: 20 },
      end: Position { line: 15, character: 28 },
      scope: [Circular *1],
      value: '|| /  ',
      raw: '\\"|| /  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 15, character: 30 },
      end: Position { line: 15, character: 38 },
      scope: [Circular *1],
      value: '||¯\\\\\\\\\\\\\\\\ ',
      raw: '\\"||¯\\\\\\\\\\\\\\\\ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 16, character: 10 },
      end: Position { line: 16, character: 16 },
      scope: [Circular *1],
      value: '||  ',
      raw: '\\"||  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 16, character: 18 },
      end: Position { line: 16, character: 24 },
      scope: [Circular *1],
      value: '||  ',
      raw: '\\"||  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 16, character: 26 },
      end: Position { line: 16, character: 32 },
      scope: [Circular *1],
      value: '||_ ',
      raw: '\\"||_ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 17, character: 10 },
      end: Position { line: 17, character: 20 },
      scope: [Circular *1],
      value: '||\\\\\\\\\\\\\\\\/|| ',
      raw: '\\"||\\\\\\\\\\\\\\\\/|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 17, character: 22 },
      end: Position { line: 17, character: 32 },
      scope: [Circular *1],
      value: '||   || ',
      raw: '\\"||   || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 17, character: 34 },
      end: Position { line: 17, character: 44 },
      scope: [Circular *1],
      value: '||   || ',
      raw: '\\"||   || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 18, character: 10 },
      end: Position { line: 18, character: 20 },
      scope: [Circular *1],
      value: '||\\\\\\\\\\\\\\\\ || ',
      raw: '\\"||\\\\\\\\\\\\\\\\ || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 18, character: 22 },
      end: Position { line: 18, character: 32 },
      scope: [Circular *1],
      value: '|| \\\\\\\\\\\\\\\\|| ',
      raw: '\\"|| \\\\\\\\\\\\\\\\|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 18, character: 34 },
      end: Position { line: 18, character: 44 },
      scope: [Circular *1],
      value: '||  \\\\\\\\|| ',
      raw: '\\"||  \\\\\\\\|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 19, character: 10 },
      end: Position { line: 19, character: 18 },
      scope: [Circular *1],
      value: '||¯|| ',
      raw: '\\"||¯|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 19, character: 20 },
      end: Position { line: 19, character: 28 },
      scope: [Circular *1],
      value: '|| || ',
      raw: '\\"|| || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 19, character: 30 },
      end: Position { line: 19, character: 38 },
      scope: [Circular *1],
      value: '||_|| ',
      raw: '\\"||_|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 20, character: 10 },
      end: Position { line: 20, character: 18 },
      scope: [Circular *1],
      value: '||¯|| ',
      raw: '\\"||¯|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 20, character: 20 },
      end: Position { line: 20, character: 28 },
      scope: [Circular *1],
      value: '||_|| ',
      raw: '\\"||_|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 20, character: 30 },
      end: Position { line: 20, character: 38 },
      scope: [Circular *1],
      value: '||    ',
      raw: '\\"||    \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 21, character: 10 },
      end: Position { line: 21, character: 19 },
      scope: [Circular *1],
      value: '||¯||  ',
      raw: '\\"||¯||  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 21, character: 21 },
      end: Position { line: 21, character: 30 },
      scope: [Circular *1],
      value: '|| ||  ',
      raw: '\\"|| ||  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 21, character: 32 },
      end: Position { line: 21, character: 41 },
      scope: [Circular *1],
      value: '||_||¬ ',
      raw: '\\"||_||¬ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 22, character: 10 },
      end: Position { line: 22, character: 18 },
      scope: [Circular *1],
      value: '||¯|| ',
      raw: '\\"||¯|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 22, character: 20 },
      end: Position { line: 22, character: 28 },
      scope: [Circular *1],
      value: '||¯\\\\\\\\\\\\\\\\ ',
      raw: '\\"||¯\\\\\\\\\\\\\\\\ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 22, character: 30 },
      end: Position { line: 22, character: 38 },
      scope: [Circular *1],
      value: '|| || ',
      raw: '\\"|| || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 23, character: 10 },
      end: Position { line: 23, character: 17 },
      scope: [Circular *1],
      value: '||¯¯ ',
      raw: '\\"||¯¯ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 23, character: 19 },
      end: Position { line: 23, character: 26 },
      scope: [Circular *1],
      value: ' \\\\\\\\\\\\\\\\  ',
      raw: '\\" \\\\\\\\\\\\\\\\  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 23, character: 28 },
      end: Position { line: 23, character: 35 },
      scope: [Circular *1],
      value: '__|| ',
      raw: '\\"__|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 24, character: 10 },
      end: Position { line: 24, character: 17 },
      scope: [Circular *1],
      value: '¯||¯ ',
      raw: '\\"¯||¯ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 24, character: 19 },
      end: Position { line: 24, character: 26 },
      scope: [Circular *1],
      value: ' ||  ',
      raw: '\\" ||  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 24, character: 28 },
      end: Position { line: 24, character: 35 },
      scope: [Circular *1],
      value: ' ||  ',
      raw: '\\" ||  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 25, character: 10 },
      end: Position { line: 25, character: 18 },
      scope: [Circular *1],
      value: '|| || ',
      raw: '\\"|| || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 25, character: 20 },
      end: Position { line: 25, character: 28 },
      scope: [Circular *1],
      value: '|| || ',
      raw: '\\"|| || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 25, character: 30 },
      end: Position { line: 25, character: 38 },
      scope: [Circular *1],
      value: '||_|| ',
      raw: '\\"||_|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 26, character: 10 },
      end: Position { line: 26, character: 18 },
      scope: [Circular *1],
      value: '\\\\\\\\\\\\\\\\ || ',
      raw: '\\"\\\\\\\\\\\\\\\\ || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 26, character: 20 },
      end: Position { line: 26, character: 28 },
      scope: [Circular *1],
      value: ' \\\\\\\\\\\\\\\\|| ',
      raw: '\\" \\\\\\\\\\\\\\\\|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 26, character: 30 },
      end: Position { line: 26, character: 38 },
      scope: [Circular *1],
      value: '  \\\\\\\\\\\\\\\\| ',
      raw: '\\"  \\\\\\\\\\\\\\\\| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 27, character: 10 },
      end: Position { line: 27, character: 21 },
      scope: [Circular *1],
      value: '\\\\\\\\\\\\\\\\ |\\\\\\\\\\\\\\\\ | ',
      raw: '\\"\\\\\\\\\\\\\\\\ |\\\\\\\\\\\\\\\\ | \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 27, character: 23 },
      end: Position { line: 27, character: 34 },
      scope: [Circular *1],
      value: ' \\\\\\\\\\\\\\\\| \\\\\\\\\\\\\\\\| ',
      raw: '\\" \\\\\\\\\\\\\\\\| \\\\\\\\\\\\\\\\| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 27, character: 36 },
      end: Position { line: 27, character: 47 },
      scope: [Circular *1],
      value: '  \\\\\\\\\\\\\\\\  \\\\\\\\\\\\\\\\ ',
      raw: '\\"  \\\\\\\\\\\\\\\\  \\\\\\\\\\\\\\\\ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 28, character: 10 },
      end: Position { line: 28, character: 18 },
      scope: [Circular *1],
      value: '\\\\\\\\\\\\\\\\  / ',
      raw: '\\"\\\\\\\\\\\\\\\\  / \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 28, character: 20 },
      end: Position { line: 28, character: 28 },
      scope: [Circular *1],
      value: ' \\\\\\\\\\\\\\\\/  ',
      raw: '\\" \\\\\\\\\\\\\\\\/  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 28, character: 30 },
      end: Position { line: 28, character: 38 },
      scope: [Circular *1],
      value: ' //\\\\\\\\  ',
      raw: '\\" //\\\\\\\\  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 29, character: 10 },
      end: Position { line: 29, character: 19 },
      scope: [Circular *1],
      value: '\\\\\\\\\\\\\\\\  // ',
      raw: '\\"\\\\\\\\\\\\\\\\  // \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 29, character: 21 },
      end: Position { line: 29, character: 30 },
      scope: [Circular *1],
      value: ' \\\\\\\\\\\\\\\\//  ',
      raw: '\\" \\\\\\\\\\\\\\\\//  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 29, character: 32 },
      end: Position { line: 29, character: 41 },
      scope: [Circular *1],
      value: '  ||   ',
      raw: '\\"  ||   \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 30, character: 10 },
      end: Position { line: 30, character: 16 },
      scope: [Circular *1],
      value: '¯// ',
      raw: '\\"¯// \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 30, character: 18 },
      end: Position { line: 30, character: 24 },
      scope: [Circular *1],
      value: '//  ',
      raw: '\\"//  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 30, character: 26 },
      end: Position { line: 30, character: 32 },
      scope: [Circular *1],
      value: '||_ ',
      raw: '\\"||_ \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 31, character: 5 },
      end: Position { line: 31, character: 8 },
      scope: [Circular *1],
      value: '0',
      raw: '\\"0\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 31, character: 13 },
      end: Position { line: 31, character: 21 },
      scope: [Circular *1],
      value: '||¯|| ',
      raw: '\\"||¯|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 31, character: 23 },
      end: Position { line: 31, character: 31 },
      scope: [Circular *1],
      value: '||x|| ',
      raw: '\\"||x|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 31, character: 33 },
      end: Position { line: 31, character: 41 },
      scope: [Circular *1],
      value: '||_|| ',
      raw: '\\"||_|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 32, character: 5 },
      end: Position { line: 32, character: 8 },
      scope: [Circular *1],
      value: '1',
      raw: '\\"1\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 32, character: 13 },
      end: Position { line: 32, character: 19 },
      scope: [Circular *1],
      value: \\"'|| \\",
      raw: \`\\"'|| \\"\`
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 32, character: 21 },
      end: Position { line: 32, character: 27 },
      scope: [Circular *1],
      value: ' || ',
      raw: '\\" || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 32, character: 29 },
      end: Position { line: 32, character: 35 },
      scope: [Circular *1],
      value: ' || ',
      raw: '\\" || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 33, character: 5 },
      end: Position { line: 33, character: 8 },
      scope: [Circular *1],
      value: '2',
      raw: '\\"2\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 33, character: 13 },
      end: Position { line: 33, character: 20 },
      scope: [Circular *1],
      value: '¯¯|| ',
      raw: '\\"¯¯|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 33, character: 22 },
      end: Position { line: 33, character: 29 },
      scope: [Circular *1],
      value: '||¯  ',
      raw: '\\"||¯  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 33, character: 31 },
      end: Position { line: 33, character: 38 },
      scope: [Circular *1],
      value: '||_  ',
      raw: '\\"||_  \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 34, character: 5 },
      end: Position { line: 34, character: 8 },
      scope: [Circular *1],
      value: '3',
      raw: '\\"3\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 34, character: 13 },
      end: Position { line: 34, character: 19 },
      scope: [Circular *1],
      value: '¯|| ',
      raw: '\\"¯|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 34, character: 21 },
      end: Position { line: 34, character: 27 },
      scope: [Circular *1],
      value: '-|| ',
      raw: '\\"-|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 34, character: 29 },
      end: Position { line: 34, character: 35 },
      scope: [Circular *1],
      value: '_|| ',
      raw: '\\"_|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 35, character: 5 },
      end: Position { line: 35, character: 8 },
      scope: [Circular *1],
      value: '4',
      raw: '\\"4\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 35, character: 13 },
      end: Position { line: 35, character: 20 },
      scope: [Circular *1],
      value: ' /|| ',
      raw: '\\" /|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 35, character: 22 },
      end: Position { line: 35, character: 29 },
      scope: [Circular *1],
      value: '/_|| ',
      raw: '\\"/_|| \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 35, character: 31 },
      end: Position { line: 35, character: 38 },
      scope: [Circular *1],
      value: '  || ',
      raw: '\\"  || \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 36, character: 5 },
      end: Position { line: 36, character: 8 },
      scope: [Circular *1],
      value: '5',
      raw: '\\"5\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 36, character: 13 },
      end: Position { line: 36, character: 20 },
      scope: [Circular *1],
      value: '||¯¯ ',
      raw: '\\"||¯¯ \\"'
    },
    ... 71 more items
  ],
  scopes: [
    <ref *2> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 45, character: 16 },
      end: Position { line: 69, character: 13 },
      scope: [Circular *1],
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTIdentifier],
          init: [ASTListConstructorExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTForGenericStatement {
          type: 'ForGenericStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          body: [Array],
          variable: [ASTIdentifier],
          iterator: [ASTIdentifier]
        },
        ASTIfStatement {
          type: 'IfStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          clauses: [Array]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(5) { 'colors', 'r', 'signs', 'MAP', 'join' },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTIdentifier],
          init: [ASTListConstructorExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTIndexExpression],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTIndexExpression],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTIndexExpression],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTIndexExpression],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTIndexExpression],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTIndexExpression],
          init: [ASTEvaluationExpression]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          name: 'str'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          name: 'colors'
        }
      ]
    }
  ],
  lines: Map(58) {
    1 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 14 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 9 },
        scope: [Circular *1],
        name: 'AsciiGen'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 12 },
        end: Position { line: 1, character: 14 },
        scope: [Circular *1],
        fields: []
      }
    },
    3 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 9 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 3, character: 1 },
        end: Position { line: 3, character: 4 },
        scope: [Circular *1],
        name: 'map'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 3, character: 7 },
        end: Position { line: 3, character: 9 },
        scope: [Circular *1],
        fields: []
      }
    },
    5 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 5, character: 1 },
      end: Position { line: 5, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 5, character: 4 },
        end: Position { line: 5, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 5, character: 9 },
        end: Position { line: 5, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    6 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 6, character: 1 },
      end: Position { line: 6, character: 36 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 6, character: 4 },
        end: Position { line: 6, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'b'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 6, character: 9 },
        end: Position { line: 6, character: 36 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    7 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 7, character: 1 },
      end: Position { line: 7, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 7, character: 4 },
        end: Position { line: 7, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'c'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 7, character: 9 },
        end: Position { line: 7, character: 33 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    8 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 8, character: 1 },
      end: Position { line: 8, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 8, character: 4 },
        end: Position { line: 8, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'd'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 8, character: 9 },
        end: Position { line: 8, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    9 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 9, character: 1 },
      end: Position { line: 9, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 9, character: 4 },
        end: Position { line: 9, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'e'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 9, character: 9 },
        end: Position { line: 9, character: 33 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    10 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 10, character: 1 },
      end: Position { line: 10, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 10, character: 4 },
        end: Position { line: 10, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'f'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 10, character: 9 },
        end: Position { line: 10, character: 33 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    11 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 11, character: 1 },
      end: Position { line: 11, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 11, character: 4 },
        end: Position { line: 11, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'g'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 11, character: 9 },
        end: Position { line: 11, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    12 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 12, character: 1 },
      end: Position { line: 12, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 12, character: 4 },
        end: Position { line: 12, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'h'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 12, character: 9 },
        end: Position { line: 12, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    13 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 13, character: 1 },
      end: Position { line: 13, character: 30 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 13, character: 4 },
        end: Position { line: 13, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'i'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 13, character: 9 },
        end: Position { line: 13, character: 30 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    14 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 14, character: 1 },
      end: Position { line: 14, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 14, character: 4 },
        end: Position { line: 14, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'j'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 14, character: 9 },
        end: Position { line: 14, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    15 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 15, character: 1 },
      end: Position { line: 15, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 15, character: 4 },
        end: Position { line: 15, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'k'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 15, character: 9 },
        end: Position { line: 15, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    16 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 16, character: 1 },
      end: Position { line: 16, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 16, character: 4 },
        end: Position { line: 16, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'l'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 16, character: 9 },
        end: Position { line: 16, character: 33 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    17 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 17, character: 1 },
      end: Position { line: 17, character: 45 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 17, character: 4 },
        end: Position { line: 17, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'm'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 17, character: 9 },
        end: Position { line: 17, character: 45 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    18 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 18, character: 1 },
      end: Position { line: 18, character: 45 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 18, character: 4 },
        end: Position { line: 18, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'n'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 18, character: 9 },
        end: Position { line: 18, character: 45 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    19 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 19, character: 1 },
      end: Position { line: 19, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 19, character: 4 },
        end: Position { line: 19, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'o'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 19, character: 9 },
        end: Position { line: 19, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    20 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 20, character: 1 },
      end: Position { line: 20, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 20, character: 4 },
        end: Position { line: 20, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'p'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 20, character: 9 },
        end: Position { line: 20, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    21 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 21, character: 1 },
      end: Position { line: 21, character: 42 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 21, character: 4 },
        end: Position { line: 21, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'q'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 21, character: 9 },
        end: Position { line: 21, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    22 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 22, character: 1 },
      end: Position { line: 22, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 22, character: 4 },
        end: Position { line: 22, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'r'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 22, character: 9 },
        end: Position { line: 22, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    23 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 23, character: 1 },
      end: Position { line: 23, character: 36 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 23, character: 4 },
        end: Position { line: 23, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 's'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 23, character: 9 },
        end: Position { line: 23, character: 36 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    24 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 24, character: 1 },
      end: Position { line: 24, character: 36 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 24, character: 4 },
        end: Position { line: 24, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 't'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 24, character: 9 },
        end: Position { line: 24, character: 36 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    25 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 25, character: 1 },
      end: Position { line: 25, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 25, character: 4 },
        end: Position { line: 25, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'u'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 25, character: 9 },
        end: Position { line: 25, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    26 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 26, character: 1 },
      end: Position { line: 26, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 26, character: 4 },
        end: Position { line: 26, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'v'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 26, character: 9 },
        end: Position { line: 26, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    27 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 27, character: 1 },
      end: Position { line: 27, character: 48 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 27, character: 4 },
        end: Position { line: 27, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'w'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 27, character: 9 },
        end: Position { line: 27, character: 48 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    28 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 28, character: 1 },
      end: Position { line: 28, character: 39 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 28, character: 4 },
        end: Position { line: 28, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'x'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 28, character: 9 },
        end: Position { line: 28, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    29 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 29, character: 1 },
      end: Position { line: 29, character: 42 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 29, character: 4 },
        end: Position { line: 29, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'y'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 29, character: 9 },
        end: Position { line: 29, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    30 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 30, character: 1 },
      end: Position { line: 30, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 30, character: 4 },
        end: Position { line: 30, character: 8 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'z'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 30, character: 9 },
        end: Position { line: 30, character: 33 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    31 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 31, character: 1 },
      end: Position { line: 31, character: 42 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 31, character: 5 },
        end: Position { line: 31, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '0',
          raw: '\\"0\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 31, character: 12 },
        end: Position { line: 31, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    32 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 32, character: 1 },
      end: Position { line: 32, character: 36 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 32, character: 5 },
        end: Position { line: 32, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '1',
          raw: '\\"1\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 32, character: 12 },
        end: Position { line: 32, character: 36 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    33 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 33, character: 1 },
      end: Position { line: 33, character: 39 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 33, character: 5 },
        end: Position { line: 33, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '2',
          raw: '\\"2\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 33, character: 12 },
        end: Position { line: 33, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    34 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 34, character: 1 },
      end: Position { line: 34, character: 36 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 34, character: 5 },
        end: Position { line: 34, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '3',
          raw: '\\"3\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 34, character: 12 },
        end: Position { line: 34, character: 36 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    35 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 35, character: 1 },
      end: Position { line: 35, character: 39 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 35, character: 5 },
        end: Position { line: 35, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '4',
          raw: '\\"4\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 35, character: 12 },
        end: Position { line: 35, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    36 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 36, character: 1 },
      end: Position { line: 36, character: 39 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 36, character: 5 },
        end: Position { line: 36, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '5',
          raw: '\\"5\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 36, character: 12 },
        end: Position { line: 36, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    37 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 37, character: 1 },
      end: Position { line: 37, character: 42 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 37, character: 5 },
        end: Position { line: 37, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '6',
          raw: '\\"6\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 37, character: 12 },
        end: Position { line: 37, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    38 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 38, character: 1 },
      end: Position { line: 38, character: 39 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 38, character: 5 },
        end: Position { line: 38, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '7',
          raw: '\\"7\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 38, character: 12 },
        end: Position { line: 38, character: 39 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    39 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 39, character: 1 },
      end: Position { line: 39, character: 42 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 39, character: 5 },
        end: Position { line: 39, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '8',
          raw: '\\"8\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 39, character: 12 },
        end: Position { line: 39, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    40 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 40, character: 1 },
      end: Position { line: 40, character: 42 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 40, character: 5 },
        end: Position { line: 40, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '9',
          raw: '\\"9\\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 40, character: 12 },
        end: Position { line: 40, character: 42 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    41 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 41, character: 1 },
      end: Position { line: 41, character: 30 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 41, character: 5 },
        end: Position { line: 41, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'map'
        },
        index: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: ' ',
          raw: '\\" \\"'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 41, character: 12 },
        end: Position { line: 41, character: 30 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    43 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 43, character: 1 },
      end: Position { line: 43, character: 19 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 43, character: 9 },
        end: Position { line: 43, character: 15 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'MAP'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'AsciiGen'
        }
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 43, character: 16 },
        end: Position { line: 43, character: 19 },
        scope: [Circular *1],
        name: 'map'
      }
    },
    46 => <ref *3> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 46, character: 5 },
      end: Position { line: 46, character: 21 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 16 },
        end: Position { line: 69, character: 13 },
        scope: [Circular *1],
        body: [
          [Circular *3],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'colors', 'r', 'signs', 'MAP', 'join' },
        assignments: [
          [Circular *3],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 46, character: 5 },
        end: Position { line: 46, character: 6 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'r'
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 46, character: 9 },
        end: Position { line: 46, character: 21 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    47 => <ref *4> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 47, character: 5 },
      end: Position { line: 47, character: 21 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 16 },
        end: Position { line: 69, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [Circular *4],
          [ASTForGenericStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'colors', 'r', 'signs', 'MAP', 'join' },
        assignments: [
          [ASTAssignmentStatement],
          [Circular *4],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 47, character: 5 },
        end: Position { line: 47, character: 10 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'signs'
      },
      init: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 47, character: 17 },
        end: Position { line: 47, character: 21 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'MAP'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'self'
        }
      }
    },
    50 => <ref *5> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 50, character: 9 },
      end: Position { line: 50, character: 26 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 16 },
        end: Position { line: 69, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'colors', 'r', 'signs', 'MAP', 'join' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *5],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 50, character: 9 },
        end: Position { line: 50, character: 13 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'char'
      },
      init: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 50, character: 20 },
        end: Position { line: 50, character: 26 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'lower'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'char'
        }
      }
    },
    52 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 52, character: 13 },
      end: Position { line: 52, character: 38 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 16 },
        end: Position { line: 69, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'colors', 'r', 'signs', 'MAP', 'join' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 52, character: 22 },
        end: Position { line: 52, character: 38 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIndexExpression]
        },
        arguments: [ [ASTIndexExpression] ]
      }
    },
    53 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 53, character: 13 },
      end: Position { line: 53, character: 38 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 16 },
        end: Position { line: 69, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'colors', 'r', 'signs', 'MAP', 'join' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 53, character: 22 },
        end: Position { line: 53, character: 38 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIndexExpression]
        },
        arguments: [ [ASTIndexExpression] ]
      }
    },
    54 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 54, character: 13 },
      end: Position { line: 54, character: 38 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 16 },
        end: Position { line: 69, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'colors', 'r', 'signs', 'MAP', 'join' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 54, character: 22 },
        end: Position { line: 54, character: 38 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIndexExpression]
        },
        arguments: [ [ASTIndexExpression] ]
      }
    },
    51 => ASTIfStatement {
      type: 'IfStatement',
      start: Position { line: 51, character: 9 },
      end: Position { line: 55, character: 15 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 16 },
        end: Position { line: 69, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'colors', 'r', 'signs', 'MAP', 'join' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      clauses: [
        ASTIfClause {
          type: 'IfClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTCallExpression]
        }
      ]
    },
    49 => <ref *6> ASTForGenericStatement {
      type: 'ForGenericStatement',
      start: Position { line: 49, character: 5 },
      end: Position { line: 56, character: 12 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 16 },
        end: Position { line: 69, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *6],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'colors', 'r', 'signs', 'MAP', 'join' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      body: [
        <ref *5> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTIfStatement {
          type: 'IfStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          clauses: [Array]
        }
      ],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 49, character: 9 },
        end: Position { line: 49, character: 13 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'char'
      },
      iterator: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 49, character: 17 },
        end: Position { line: 49, character: 20 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'str'
      }
    },
    59 => <ref *7> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 59, character: 9 },
      end: Position { line: 59, character: 65 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 16 },
        end: Position { line: 69, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'colors', 'r', 'signs', 'MAP', 'join' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *7],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 59, character: 11 },
        end: Position { line: 59, character: 15 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'r'
        },
        index: ASTLiteral {
          type: 'NumericLiteral',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          value: 0,
          raw: '0'
        }
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 59, character: 44 },
        end: Position { line: 59, character: 65 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '+',
        left: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          operator: '+',
          left: [ASTListConstructorExpression],
          right: [ASTIndexExpression]
        },
        right: ASTListConstructorExpression {
          type: 'ListConstructorExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          fields: [Array]
        }
      }
    },
    60 => <ref *8> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 60, character: 9 },
      end: Position { line: 60, character: 65 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 16 },
        end: Position { line: 69, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'colors', 'r', 'signs', 'MAP', 'join' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *8],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 60, character: 11 },
        end: Position { line: 60, character: 15 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'r'
        },
        index: ASTLiteral {
          type: 'NumericLiteral',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          value: 1,
          raw: '1'
        }
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 60, character: 44 },
        end: Position { line: 60, character: 65 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '+',
        left: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          operator: '+',
          left: [ASTListConstructorExpression],
          right: [ASTIndexExpression]
        },
        right: ASTListConstructorExpression {
          type: 'ListConstructorExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          fields: [Array]
        }
      }
    },
    61 => <ref *9> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 61, character: 9 },
      end: Position { line: 61, character: 65 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 16 },
        end: Position { line: 69, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'colors', 'r', 'signs', 'MAP', 'join' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *9],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 61, character: 11 },
        end: Position { line: 61, character: 15 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'r'
        },
        index: ASTLiteral {
          type: 'NumericLiteral',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          value: 2,
          raw: '2'
        }
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 61, character: 44 },
        end: Position { line: 61, character: 65 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '+',
        left: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          operator: '+',
          left: [ASTListConstructorExpression],
          right: [ASTIndexExpression]
        },
        right: ASTListConstructorExpression {
          type: 'ListConstructorExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          fields: [Array]
        }
      }
    },
    63 => <ref *10> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 63, character: 9 },
      end: Position { line: 63, character: 68 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 16 },
        end: Position { line: 69, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'colors', 'r', 'signs', 'MAP', 'join' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *10],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 63, character: 11 },
        end: Position { line: 63, character: 15 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'r'
        },
        index: ASTLiteral {
          type: 'NumericLiteral',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          value: 0,
          raw: '0'
        }
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 63, character: 47 },
        end: Position { line: 63, character: 68 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '+',
        left: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          operator: '+',
          left: [ASTListConstructorExpression],
          right: [ASTIndexExpression]
        },
        right: ASTListConstructorExpression {
          type: 'ListConstructorExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          fields: [Array]
        }
      }
    },
    64 => <ref *11> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 64, character: 9 },
      end: Position { line: 64, character: 68 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 16 },
        end: Position { line: 69, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'colors', 'r', 'signs', 'MAP', 'join' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *11],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 64, character: 11 },
        end: Position { line: 64, character: 15 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'r'
        },
        index: ASTLiteral {
          type: 'NumericLiteral',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          value: 1,
          raw: '1'
        }
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 64, character: 47 },
        end: Position { line: 64, character: 68 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '+',
        left: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          operator: '+',
          left: [ASTListConstructorExpression],
          right: [ASTIndexExpression]
        },
        right: ASTListConstructorExpression {
          type: 'ListConstructorExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          fields: [Array]
        }
      }
    },
    65 => <ref *12> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 65, character: 9 },
      end: Position { line: 65, character: 68 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 16 },
        end: Position { line: 69, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'colors', 'r', 'signs', 'MAP', 'join' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *12]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 65, character: 11 },
        end: Position { line: 65, character: 15 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'r'
        },
        index: ASTLiteral {
          type: 'NumericLiteral',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          value: 2,
          raw: '2'
        }
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 65, character: 47 },
        end: Position { line: 65, character: 68 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '+',
        left: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          operator: '+',
          left: [ASTListConstructorExpression],
          right: [ASTIndexExpression]
        },
        right: ASTListConstructorExpression {
          type: 'ListConstructorExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          fields: [Array]
        }
      }
    },
    58 => <ref *13> ASTIfStatement {
      type: 'IfStatement',
      start: Position { line: 58, character: 5 },
      end: Position { line: 66, character: 11 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 16 },
        end: Position { line: 69, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [Circular *13],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'colors', 'r', 'signs', 'MAP', 'join' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      clauses: [
        ASTIfClause {
          type: 'IfClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTEvaluationExpression]
        },
        ASTIfClause {
          type: 'ElseifClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTEvaluationExpression]
        }
      ]
    },
    68 => <ref *14> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 68, character: 5 },
      end: Position { line: 68, character: 68 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 16 },
        end: Position { line: 69, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTIfStatement],
          [Circular *14]
        ],
        namespaces: Set(5) { 'colors', 'r', 'signs', 'MAP', 'join' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      argument: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 68, character: 62 },
        end: Position { line: 68, character: 68 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTListConstructorExpression]
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    45 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 45, character: 1 },
      end: Position { line: 69, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 45, character: 9 },
        end: Position { line: 45, character: 15 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'gen'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'AsciiGen'
        }
      },
      init: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 16 },
        end: Position { line: 69, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'colors', 'r', 'signs', 'MAP', 'join' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    71 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 71, character: 1 },
      end: Position { line: 71, character: 29 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 71, character: 6 },
        end: Position { line: 71, character: 29 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTCallExpression] ]
      }
    }
  }
}"
`;

exports[`parse default scripts binary-expressions.src 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 12, character: 7 },
  scope: null,
  body: [
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 7 },
      scope: [Circular *1],
      expression: ASTAssignmentStatement {
        type: 'AssignmentStatement',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 7 },
        scope: [Circular *1],
        variable: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        },
        init: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '/',
          left: [ASTIdentifier],
          right: [ASTIdentifier]
        }
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 2, character: 1 },
      end: Position { line: 2, character: 7 },
      scope: [Circular *1],
      expression: ASTAssignmentStatement {
        type: 'AssignmentStatement',
        start: Position { line: 2, character: 1 },
        end: Position { line: 2, character: 7 },
        scope: [Circular *1],
        variable: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        },
        init: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '*',
          left: [ASTIdentifier],
          right: [ASTIdentifier]
        }
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 7 },
      scope: [Circular *1],
      expression: ASTAssignmentStatement {
        type: 'AssignmentStatement',
        start: Position { line: 3, character: 1 },
        end: Position { line: 3, character: 7 },
        scope: [Circular *1],
        variable: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        },
        init: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '-',
          left: [ASTIdentifier],
          right: [ASTIdentifier]
        }
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 4, character: 7 },
      scope: [Circular *1],
      expression: ASTAssignmentStatement {
        type: 'AssignmentStatement',
        start: Position { line: 4, character: 1 },
        end: Position { line: 4, character: 7 },
        scope: [Circular *1],
        variable: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        },
        init: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '+',
          left: [ASTIdentifier],
          right: [ASTIdentifier]
        }
      }
    },
    ASTEvaluationExpression {
      type: 'BinaryExpression',
      start: Position { line: 5, character: 3 },
      end: Position { line: 5, character: 7 },
      scope: [Circular *1],
      operator: '<<',
      left: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 5, character: 1 },
        end: Position { line: 5, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      right: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 5, character: 6 },
        end: Position { line: 5, character: 7 },
        scope: [Circular *1],
        name: 'b'
      }
    },
    ASTEvaluationExpression {
      type: 'BinaryExpression',
      start: Position { line: 6, character: 3 },
      end: Position { line: 6, character: 7 },
      scope: [Circular *1],
      operator: '>>',
      left: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 6, character: 1 },
        end: Position { line: 6, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      right: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 6, character: 6 },
        end: Position { line: 6, character: 7 },
        scope: [Circular *1],
        name: 'b'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 7, character: 1 },
      end: Position { line: 7, character: 24 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 7, character: 1 },
        end: Position { line: 7, character: 2 },
        scope: [Circular *1],
        name: 'w'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 7, character: 7 },
        end: Position { line: 7, character: 24 },
        scope: [Circular *1],
        operator: '>>',
        left: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '>>>',
          left: [ASTIdentifier],
          right: [ASTEvaluationExpression]
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        }
      }
    },
    ASTEvaluationExpression {
      type: 'BinaryExpression',
      start: Position { line: 8, character: 3 },
      end: Position { line: 8, character: 6 },
      scope: [Circular *1],
      operator: '|',
      left: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 8, character: 1 },
        end: Position { line: 8, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      right: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 8, character: 5 },
        end: Position { line: 8, character: 6 },
        scope: [Circular *1],
        name: 'b'
      }
    },
    ASTEvaluationExpression {
      type: 'BinaryExpression',
      start: Position { line: 9, character: 3 },
      end: Position { line: 9, character: 6 },
      scope: [Circular *1],
      operator: '&',
      left: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 9, character: 1 },
        end: Position { line: 9, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      right: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 9, character: 5 },
        end: Position { line: 9, character: 6 },
        scope: [Circular *1],
        name: 'b'
      }
    },
    ASTEvaluationExpression {
      type: 'BinaryExpression',
      start: Position { line: 10, character: 3 },
      end: Position { line: 10, character: 6 },
      scope: [Circular *1],
      operator: '^',
      left: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 10, character: 1 },
        end: Position { line: 10, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      right: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 10, character: 5 },
        end: Position { line: 10, character: 6 },
        scope: [Circular *1],
        name: 'b'
      }
    },
    ASTEvaluationExpression {
      type: 'LogicalExpression',
      start: Position { line: 11, character: 3 },
      end: Position { line: 11, character: 8 },
      scope: [Circular *1],
      operator: 'and',
      left: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 11, character: 1 },
        end: Position { line: 11, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      right: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 11, character: 7 },
        end: Position { line: 11, character: 8 },
        scope: [Circular *1],
        name: 'b'
      }
    },
    ASTEvaluationExpression {
      type: 'LogicalExpression',
      start: Position { line: 12, character: 3 },
      end: Position { line: 12, character: 7 },
      scope: [Circular *1],
      operator: 'or',
      left: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 12, character: 1 },
        end: Position { line: 12, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      right: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 12, character: 6 },
        end: Position { line: 12, character: 7 },
        scope: [Circular *1],
        name: 'b'
      }
    }
  ],
  namespaces: Set(4) { 'a', 'b', 'w', 'c' },
  assignments: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 7 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 1, character: 6 },
        end: Position { line: 1, character: 7 },
        scope: [Circular *1],
        operator: '/',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'b'
        }
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 2, character: 1 },
      end: Position { line: 2, character: 7 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 2, character: 1 },
        end: Position { line: 2, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 2, character: 6 },
        end: Position { line: 2, character: 7 },
        scope: [Circular *1],
        operator: '*',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'b'
        }
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 7 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 3, character: 1 },
        end: Position { line: 3, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 3, character: 6 },
        end: Position { line: 3, character: 7 },
        scope: [Circular *1],
        operator: '-',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'b'
        }
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 4, character: 7 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 4, character: 1 },
        end: Position { line: 4, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 4, character: 6 },
        end: Position { line: 4, character: 7 },
        scope: [Circular *1],
        operator: '+',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'b'
        }
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 7, character: 1 },
      end: Position { line: 7, character: 24 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 7, character: 1 },
        end: Position { line: 7, character: 2 },
        scope: [Circular *1],
        name: 'w'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 7, character: 7 },
        end: Position { line: 7, character: 24 },
        scope: [Circular *1],
        operator: '>>',
        left: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '>>>',
          left: [ASTIdentifier],
          right: [ASTEvaluationExpression]
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        }
      }
    }
  ],
  nativeImports: [],
  literals: [],
  scopes: [],
  lines: Map(12) {
    1 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 7 },
      scope: [Circular *1],
      expression: ASTAssignmentStatement {
        type: 'AssignmentStatement',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 7 },
        scope: [Circular *1],
        variable: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        },
        init: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '/',
          left: [ASTIdentifier],
          right: [ASTIdentifier]
        }
      }
    },
    2 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 2, character: 1 },
      end: Position { line: 2, character: 7 },
      scope: [Circular *1],
      expression: ASTAssignmentStatement {
        type: 'AssignmentStatement',
        start: Position { line: 2, character: 1 },
        end: Position { line: 2, character: 7 },
        scope: [Circular *1],
        variable: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        },
        init: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '*',
          left: [ASTIdentifier],
          right: [ASTIdentifier]
        }
      }
    },
    3 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 7 },
      scope: [Circular *1],
      expression: ASTAssignmentStatement {
        type: 'AssignmentStatement',
        start: Position { line: 3, character: 1 },
        end: Position { line: 3, character: 7 },
        scope: [Circular *1],
        variable: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        },
        init: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '-',
          left: [ASTIdentifier],
          right: [ASTIdentifier]
        }
      }
    },
    4 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 4, character: 7 },
      scope: [Circular *1],
      expression: ASTAssignmentStatement {
        type: 'AssignmentStatement',
        start: Position { line: 4, character: 1 },
        end: Position { line: 4, character: 7 },
        scope: [Circular *1],
        variable: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        },
        init: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '+',
          left: [ASTIdentifier],
          right: [ASTIdentifier]
        }
      }
    },
    5 => ASTEvaluationExpression {
      type: 'BinaryExpression',
      start: Position { line: 5, character: 3 },
      end: Position { line: 5, character: 7 },
      scope: [Circular *1],
      operator: '<<',
      left: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 5, character: 1 },
        end: Position { line: 5, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      right: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 5, character: 6 },
        end: Position { line: 5, character: 7 },
        scope: [Circular *1],
        name: 'b'
      }
    },
    6 => ASTEvaluationExpression {
      type: 'BinaryExpression',
      start: Position { line: 6, character: 3 },
      end: Position { line: 6, character: 7 },
      scope: [Circular *1],
      operator: '>>',
      left: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 6, character: 1 },
        end: Position { line: 6, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      right: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 6, character: 6 },
        end: Position { line: 6, character: 7 },
        scope: [Circular *1],
        name: 'b'
      }
    },
    7 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 7, character: 1 },
      end: Position { line: 7, character: 24 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 7, character: 1 },
        end: Position { line: 7, character: 2 },
        scope: [Circular *1],
        name: 'w'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 7, character: 7 },
        end: Position { line: 7, character: 24 },
        scope: [Circular *1],
        operator: '>>',
        left: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '>>>',
          left: [ASTIdentifier],
          right: [ASTEvaluationExpression]
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        }
      }
    },
    8 => ASTEvaluationExpression {
      type: 'BinaryExpression',
      start: Position { line: 8, character: 3 },
      end: Position { line: 8, character: 6 },
      scope: [Circular *1],
      operator: '|',
      left: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 8, character: 1 },
        end: Position { line: 8, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      right: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 8, character: 5 },
        end: Position { line: 8, character: 6 },
        scope: [Circular *1],
        name: 'b'
      }
    },
    9 => ASTEvaluationExpression {
      type: 'BinaryExpression',
      start: Position { line: 9, character: 3 },
      end: Position { line: 9, character: 6 },
      scope: [Circular *1],
      operator: '&',
      left: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 9, character: 1 },
        end: Position { line: 9, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      right: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 9, character: 5 },
        end: Position { line: 9, character: 6 },
        scope: [Circular *1],
        name: 'b'
      }
    },
    10 => ASTEvaluationExpression {
      type: 'BinaryExpression',
      start: Position { line: 10, character: 3 },
      end: Position { line: 10, character: 6 },
      scope: [Circular *1],
      operator: '^',
      left: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 10, character: 1 },
        end: Position { line: 10, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      right: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 10, character: 5 },
        end: Position { line: 10, character: 6 },
        scope: [Circular *1],
        name: 'b'
      }
    },
    11 => ASTEvaluationExpression {
      type: 'LogicalExpression',
      start: Position { line: 11, character: 3 },
      end: Position { line: 11, character: 8 },
      scope: [Circular *1],
      operator: 'and',
      left: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 11, character: 1 },
        end: Position { line: 11, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      right: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 11, character: 7 },
        end: Position { line: 11, character: 8 },
        scope: [Circular *1],
        name: 'b'
      }
    },
    12 => ASTEvaluationExpression {
      type: 'LogicalExpression',
      start: Position { line: 12, character: 3 },
      end: Position { line: 12, character: 7 },
      scope: [Circular *1],
      operator: 'or',
      left: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 12, character: 1 },
        end: Position { line: 12, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      right: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 12, character: 6 },
        end: Position { line: 12, character: 7 },
        scope: [Circular *1],
        name: 'b'
      }
    }
  }
}"
`;

exports[`parse default scripts binary-expressions.src unsafe 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 12, character: 7 },
  scope: null,
  body: [
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 7 },
      scope: [Circular *1],
      expression: ASTAssignmentStatement {
        type: 'AssignmentStatement',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 7 },
        scope: [Circular *1],
        variable: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        },
        init: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '/',
          left: [ASTIdentifier],
          right: [ASTIdentifier]
        }
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 2, character: 1 },
      end: Position { line: 2, character: 7 },
      scope: [Circular *1],
      expression: ASTAssignmentStatement {
        type: 'AssignmentStatement',
        start: Position { line: 2, character: 1 },
        end: Position { line: 2, character: 7 },
        scope: [Circular *1],
        variable: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        },
        init: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '*',
          left: [ASTIdentifier],
          right: [ASTIdentifier]
        }
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 7 },
      scope: [Circular *1],
      expression: ASTAssignmentStatement {
        type: 'AssignmentStatement',
        start: Position { line: 3, character: 1 },
        end: Position { line: 3, character: 7 },
        scope: [Circular *1],
        variable: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        },
        init: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '-',
          left: [ASTIdentifier],
          right: [ASTIdentifier]
        }
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 4, character: 7 },
      scope: [Circular *1],
      expression: ASTAssignmentStatement {
        type: 'AssignmentStatement',
        start: Position { line: 4, character: 1 },
        end: Position { line: 4, character: 7 },
        scope: [Circular *1],
        variable: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        },
        init: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '+',
          left: [ASTIdentifier],
          right: [ASTIdentifier]
        }
      }
    },
    ASTEvaluationExpression {
      type: 'BinaryExpression',
      start: Position { line: 5, character: 3 },
      end: Position { line: 5, character: 7 },
      scope: [Circular *1],
      operator: '<<',
      left: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 5, character: 1 },
        end: Position { line: 5, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      right: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 5, character: 6 },
        end: Position { line: 5, character: 7 },
        scope: [Circular *1],
        name: 'b'
      }
    },
    ASTEvaluationExpression {
      type: 'BinaryExpression',
      start: Position { line: 6, character: 3 },
      end: Position { line: 6, character: 7 },
      scope: [Circular *1],
      operator: '>>',
      left: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 6, character: 1 },
        end: Position { line: 6, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      right: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 6, character: 6 },
        end: Position { line: 6, character: 7 },
        scope: [Circular *1],
        name: 'b'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 7, character: 1 },
      end: Position { line: 7, character: 24 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 7, character: 1 },
        end: Position { line: 7, character: 2 },
        scope: [Circular *1],
        name: 'w'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 7, character: 7 },
        end: Position { line: 7, character: 24 },
        scope: [Circular *1],
        operator: '>>',
        left: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '>>>',
          left: [ASTIdentifier],
          right: [ASTEvaluationExpression]
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        }
      }
    },
    ASTEvaluationExpression {
      type: 'BinaryExpression',
      start: Position { line: 8, character: 3 },
      end: Position { line: 8, character: 6 },
      scope: [Circular *1],
      operator: '|',
      left: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 8, character: 1 },
        end: Position { line: 8, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      right: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 8, character: 5 },
        end: Position { line: 8, character: 6 },
        scope: [Circular *1],
        name: 'b'
      }
    },
    ASTEvaluationExpression {
      type: 'BinaryExpression',
      start: Position { line: 9, character: 3 },
      end: Position { line: 9, character: 6 },
      scope: [Circular *1],
      operator: '&',
      left: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 9, character: 1 },
        end: Position { line: 9, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      right: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 9, character: 5 },
        end: Position { line: 9, character: 6 },
        scope: [Circular *1],
        name: 'b'
      }
    },
    ASTEvaluationExpression {
      type: 'BinaryExpression',
      start: Position { line: 10, character: 3 },
      end: Position { line: 10, character: 6 },
      scope: [Circular *1],
      operator: '^',
      left: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 10, character: 1 },
        end: Position { line: 10, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      right: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 10, character: 5 },
        end: Position { line: 10, character: 6 },
        scope: [Circular *1],
        name: 'b'
      }
    },
    ASTEvaluationExpression {
      type: 'LogicalExpression',
      start: Position { line: 11, character: 3 },
      end: Position { line: 11, character: 8 },
      scope: [Circular *1],
      operator: 'and',
      left: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 11, character: 1 },
        end: Position { line: 11, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      right: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 11, character: 7 },
        end: Position { line: 11, character: 8 },
        scope: [Circular *1],
        name: 'b'
      }
    },
    ASTEvaluationExpression {
      type: 'LogicalExpression',
      start: Position { line: 12, character: 3 },
      end: Position { line: 12, character: 7 },
      scope: [Circular *1],
      operator: 'or',
      left: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 12, character: 1 },
        end: Position { line: 12, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      right: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 12, character: 6 },
        end: Position { line: 12, character: 7 },
        scope: [Circular *1],
        name: 'b'
      }
    }
  ],
  namespaces: Set(4) { 'a', 'b', 'w', 'c' },
  assignments: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 7 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 1, character: 6 },
        end: Position { line: 1, character: 7 },
        scope: [Circular *1],
        operator: '/',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'b'
        }
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 2, character: 1 },
      end: Position { line: 2, character: 7 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 2, character: 1 },
        end: Position { line: 2, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 2, character: 6 },
        end: Position { line: 2, character: 7 },
        scope: [Circular *1],
        operator: '*',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'b'
        }
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 7 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 3, character: 1 },
        end: Position { line: 3, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 3, character: 6 },
        end: Position { line: 3, character: 7 },
        scope: [Circular *1],
        operator: '-',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'b'
        }
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 4, character: 7 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 4, character: 1 },
        end: Position { line: 4, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 4, character: 6 },
        end: Position { line: 4, character: 7 },
        scope: [Circular *1],
        operator: '+',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'b'
        }
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 7, character: 1 },
      end: Position { line: 7, character: 24 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 7, character: 1 },
        end: Position { line: 7, character: 2 },
        scope: [Circular *1],
        name: 'w'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 7, character: 7 },
        end: Position { line: 7, character: 24 },
        scope: [Circular *1],
        operator: '>>',
        left: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '>>>',
          left: [ASTIdentifier],
          right: [ASTEvaluationExpression]
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        }
      }
    }
  ],
  nativeImports: [],
  literals: [],
  scopes: [],
  lines: Map(12) {
    1 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 7 },
      scope: [Circular *1],
      expression: ASTAssignmentStatement {
        type: 'AssignmentStatement',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 7 },
        scope: [Circular *1],
        variable: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        },
        init: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '/',
          left: [ASTIdentifier],
          right: [ASTIdentifier]
        }
      }
    },
    2 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 2, character: 1 },
      end: Position { line: 2, character: 7 },
      scope: [Circular *1],
      expression: ASTAssignmentStatement {
        type: 'AssignmentStatement',
        start: Position { line: 2, character: 1 },
        end: Position { line: 2, character: 7 },
        scope: [Circular *1],
        variable: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        },
        init: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '*',
          left: [ASTIdentifier],
          right: [ASTIdentifier]
        }
      }
    },
    3 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 7 },
      scope: [Circular *1],
      expression: ASTAssignmentStatement {
        type: 'AssignmentStatement',
        start: Position { line: 3, character: 1 },
        end: Position { line: 3, character: 7 },
        scope: [Circular *1],
        variable: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        },
        init: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '-',
          left: [ASTIdentifier],
          right: [ASTIdentifier]
        }
      }
    },
    4 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 4, character: 7 },
      scope: [Circular *1],
      expression: ASTAssignmentStatement {
        type: 'AssignmentStatement',
        start: Position { line: 4, character: 1 },
        end: Position { line: 4, character: 7 },
        scope: [Circular *1],
        variable: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        },
        init: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '+',
          left: [ASTIdentifier],
          right: [ASTIdentifier]
        }
      }
    },
    5 => ASTEvaluationExpression {
      type: 'BinaryExpression',
      start: Position { line: 5, character: 3 },
      end: Position { line: 5, character: 7 },
      scope: [Circular *1],
      operator: '<<',
      left: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 5, character: 1 },
        end: Position { line: 5, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      right: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 5, character: 6 },
        end: Position { line: 5, character: 7 },
        scope: [Circular *1],
        name: 'b'
      }
    },
    6 => ASTEvaluationExpression {
      type: 'BinaryExpression',
      start: Position { line: 6, character: 3 },
      end: Position { line: 6, character: 7 },
      scope: [Circular *1],
      operator: '>>',
      left: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 6, character: 1 },
        end: Position { line: 6, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      right: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 6, character: 6 },
        end: Position { line: 6, character: 7 },
        scope: [Circular *1],
        name: 'b'
      }
    },
    7 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 7, character: 1 },
      end: Position { line: 7, character: 24 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 7, character: 1 },
        end: Position { line: 7, character: 2 },
        scope: [Circular *1],
        name: 'w'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 7, character: 7 },
        end: Position { line: 7, character: 24 },
        scope: [Circular *1],
        operator: '>>',
        left: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '>>>',
          left: [ASTIdentifier],
          right: [ASTEvaluationExpression]
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'a'
        }
      }
    },
    8 => ASTEvaluationExpression {
      type: 'BinaryExpression',
      start: Position { line: 8, character: 3 },
      end: Position { line: 8, character: 6 },
      scope: [Circular *1],
      operator: '|',
      left: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 8, character: 1 },
        end: Position { line: 8, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      right: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 8, character: 5 },
        end: Position { line: 8, character: 6 },
        scope: [Circular *1],
        name: 'b'
      }
    },
    9 => ASTEvaluationExpression {
      type: 'BinaryExpression',
      start: Position { line: 9, character: 3 },
      end: Position { line: 9, character: 6 },
      scope: [Circular *1],
      operator: '&',
      left: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 9, character: 1 },
        end: Position { line: 9, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      right: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 9, character: 5 },
        end: Position { line: 9, character: 6 },
        scope: [Circular *1],
        name: 'b'
      }
    },
    10 => ASTEvaluationExpression {
      type: 'BinaryExpression',
      start: Position { line: 10, character: 3 },
      end: Position { line: 10, character: 6 },
      scope: [Circular *1],
      operator: '^',
      left: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 10, character: 1 },
        end: Position { line: 10, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      right: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 10, character: 5 },
        end: Position { line: 10, character: 6 },
        scope: [Circular *1],
        name: 'b'
      }
    },
    11 => ASTEvaluationExpression {
      type: 'LogicalExpression',
      start: Position { line: 11, character: 3 },
      end: Position { line: 11, character: 8 },
      scope: [Circular *1],
      operator: 'and',
      left: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 11, character: 1 },
        end: Position { line: 11, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      right: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 11, character: 7 },
        end: Position { line: 11, character: 8 },
        scope: [Circular *1],
        name: 'b'
      }
    },
    12 => ASTEvaluationExpression {
      type: 'LogicalExpression',
      start: Position { line: 12, character: 3 },
      end: Position { line: 12, character: 7 },
      scope: [Circular *1],
      operator: 'or',
      left: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 12, character: 1 },
        end: Position { line: 12, character: 2 },
        scope: [Circular *1],
        name: 'a'
      },
      right: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 12, character: 6 },
        end: Position { line: 12, character: 7 },
        scope: [Circular *1],
        name: 'b'
      }
    }
  }
}"
`;

exports[`parse default scripts eol.src 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 13, character: 9 },
  scope: null,
  body: [
    ASTIfStatement {
      type: 'IfStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 5, character: 7 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTElseClause {
          type: 'ElseClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array]
        }
      ]
    },
    ASTWhileStatement {
      type: 'WhileStatement',
      start: Position { line: 7, character: 1 },
      end: Position { line: 9, character: 10 },
      scope: [Circular *1],
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          expression: [ASTCallExpression]
        }
      ],
      condition: ASTLiteral {
        type: 'BooleanLiteral',
        start: Position { line: 7, character: 8 },
        end: Position { line: 7, character: 13 },
        scope: [Circular *1],
        value: false,
        raw: 'false'
      }
    },
    ASTForGenericStatement {
      type: 'ForGenericStatement',
      start: Position { line: 11, character: 1 },
      end: Position { line: 13, character: 8 },
      scope: [Circular *1],
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          expression: [ASTCallExpression]
        }
      ],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 11, character: 6 },
        end: Position { line: 11, character: 9 },
        scope: [Circular *1],
        name: 'foo'
      },
      iterator: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 11, character: 13 },
        end: Position { line: 11, character: 15 },
        scope: [Circular *1],
        fields: []
      }
    }
  ],
  namespaces: Set(1) { 'foo' },
  assignments: [],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 1, character: 5 },
      end: Position { line: 1, character: 9 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 2, character: 11 },
      end: Position { line: 2, character: 17 },
      scope: [Circular *1],
      value: 'true',
      raw: '\\"true\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 4, character: 11 },
      end: Position { line: 4, character: 18 },
      scope: [Circular *1],
      value: 'false',
      raw: '\\"false\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 7, character: 8 },
      end: Position { line: 7, character: 13 },
      scope: [Circular *1],
      value: false,
      raw: 'false'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 8, character: 11 },
      end: Position { line: 8, character: 16 },
      scope: [Circular *1],
      value: 'foo',
      raw: '\\"foo\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 12, character: 11 },
      end: Position { line: 12, character: 16 },
      scope: [Circular *1],
      value: 'foo',
      raw: '\\"foo\\"'
    }
  ],
  scopes: [],
  lines: Map(7) {
    2 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 2, character: 5 },
      end: Position { line: 2, character: 18 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 2, character: 10 },
        end: Position { line: 2, character: 18 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    4 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 4, character: 5 },
      end: Position { line: 4, character: 19 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 4, character: 10 },
        end: Position { line: 4, character: 19 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    1 => ASTIfStatement {
      type: 'IfStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 5, character: 7 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTElseClause {
          type: 'ElseClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array]
        }
      ]
    },
    8 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 8, character: 5 },
      end: Position { line: 8, character: 17 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 8, character: 10 },
        end: Position { line: 8, character: 17 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    7 => ASTWhileStatement {
      type: 'WhileStatement',
      start: Position { line: 7, character: 1 },
      end: Position { line: 9, character: 10 },
      scope: [Circular *1],
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          expression: [ASTCallExpression]
        }
      ],
      condition: ASTLiteral {
        type: 'BooleanLiteral',
        start: Position { line: 7, character: 8 },
        end: Position { line: 7, character: 13 },
        scope: [Circular *1],
        value: false,
        raw: 'false'
      }
    },
    12 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 12, character: 5 },
      end: Position { line: 12, character: 17 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 12, character: 10 },
        end: Position { line: 12, character: 17 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    11 => ASTForGenericStatement {
      type: 'ForGenericStatement',
      start: Position { line: 11, character: 1 },
      end: Position { line: 13, character: 8 },
      scope: [Circular *1],
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          expression: [ASTCallExpression]
        }
      ],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 11, character: 6 },
        end: Position { line: 11, character: 9 },
        scope: [Circular *1],
        name: 'foo'
      },
      iterator: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 11, character: 13 },
        end: Position { line: 11, character: 15 },
        scope: [Circular *1],
        fields: []
      }
    }
  }
}"
`;

exports[`parse default scripts eol.src unsafe 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 13, character: 9 },
  scope: null,
  body: [
    ASTIfStatement {
      type: 'IfStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 5, character: 7 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTElseClause {
          type: 'ElseClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array]
        }
      ]
    },
    ASTWhileStatement {
      type: 'WhileStatement',
      start: Position { line: 7, character: 1 },
      end: Position { line: 9, character: 10 },
      scope: [Circular *1],
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          expression: [ASTCallExpression]
        }
      ],
      condition: ASTLiteral {
        type: 'BooleanLiteral',
        start: Position { line: 7, character: 8 },
        end: Position { line: 7, character: 13 },
        scope: [Circular *1],
        value: false,
        raw: 'false'
      }
    },
    ASTForGenericStatement {
      type: 'ForGenericStatement',
      start: Position { line: 11, character: 1 },
      end: Position { line: 13, character: 8 },
      scope: [Circular *1],
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          expression: [ASTCallExpression]
        }
      ],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 11, character: 6 },
        end: Position { line: 11, character: 9 },
        scope: [Circular *1],
        name: 'foo'
      },
      iterator: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 11, character: 13 },
        end: Position { line: 11, character: 15 },
        scope: [Circular *1],
        fields: []
      }
    }
  ],
  namespaces: Set(1) { 'foo' },
  assignments: [],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 1, character: 5 },
      end: Position { line: 1, character: 9 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 2, character: 11 },
      end: Position { line: 2, character: 17 },
      scope: [Circular *1],
      value: 'true',
      raw: '\\"true\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 4, character: 11 },
      end: Position { line: 4, character: 18 },
      scope: [Circular *1],
      value: 'false',
      raw: '\\"false\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 7, character: 8 },
      end: Position { line: 7, character: 13 },
      scope: [Circular *1],
      value: false,
      raw: 'false'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 8, character: 11 },
      end: Position { line: 8, character: 16 },
      scope: [Circular *1],
      value: 'foo',
      raw: '\\"foo\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 12, character: 11 },
      end: Position { line: 12, character: 16 },
      scope: [Circular *1],
      value: 'foo',
      raw: '\\"foo\\"'
    }
  ],
  scopes: [],
  lines: Map(7) {
    2 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 2, character: 5 },
      end: Position { line: 2, character: 18 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 2, character: 10 },
        end: Position { line: 2, character: 18 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    4 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 4, character: 5 },
      end: Position { line: 4, character: 19 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 4, character: 10 },
        end: Position { line: 4, character: 19 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    1 => ASTIfStatement {
      type: 'IfStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 5, character: 7 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTElseClause {
          type: 'ElseClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array]
        }
      ]
    },
    8 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 8, character: 5 },
      end: Position { line: 8, character: 17 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 8, character: 10 },
        end: Position { line: 8, character: 17 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    7 => ASTWhileStatement {
      type: 'WhileStatement',
      start: Position { line: 7, character: 1 },
      end: Position { line: 9, character: 10 },
      scope: [Circular *1],
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          expression: [ASTCallExpression]
        }
      ],
      condition: ASTLiteral {
        type: 'BooleanLiteral',
        start: Position { line: 7, character: 8 },
        end: Position { line: 7, character: 13 },
        scope: [Circular *1],
        value: false,
        raw: 'false'
      }
    },
    12 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 12, character: 5 },
      end: Position { line: 12, character: 17 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 12, character: 10 },
        end: Position { line: 12, character: 17 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    11 => ASTForGenericStatement {
      type: 'ForGenericStatement',
      start: Position { line: 11, character: 1 },
      end: Position { line: 13, character: 8 },
      scope: [Circular *1],
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          expression: [ASTCallExpression]
        }
      ],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 11, character: 6 },
        end: Position { line: 11, character: 9 },
        scope: [Circular *1],
        name: 'foo'
      },
      iterator: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 11, character: 13 },
        end: Position { line: 11, character: 15 },
        scope: [Circular *1],
        fields: []
      }
    }
  }
}"
`;

exports[`parse default scripts if-clause.src 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 4, character: 75 },
  scope: null,
  body: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 40 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 7 },
        scope: [Circular *1],
        name: 'params'
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 1, character: 10 },
        end: Position { line: 1, character: 40 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 69 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 3, character: 6 },
        end: Position { line: 3, character: 69 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTEvaluationExpression] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 4, character: 75 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 4, character: 6 },
        end: Position { line: 4, character: 75 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTEvaluationExpression] ]
      }
    }
  ],
  namespaces: Set(0) {},
  assignments: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 40 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 7 },
        scope: [Circular *1],
        name: 'params'
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 1, character: 10 },
        end: Position { line: 1, character: 40 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue] ]
      }
    }
  ],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 1, character: 11 },
      end: Position { line: 1, character: 23 },
      scope: [Circular *1],
      value: '/home/test',
      raw: '\\"/home/test\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 1, character: 25 },
      end: Position { line: 1, character: 39 },
      scope: [Circular *1],
      value: 'myTestFolder',
      raw: '\\"myTestFolder\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 3, character: 21 },
      end: Position { line: 3, character: 22 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 3, character: 33 },
      end: Position { line: 3, character: 34 },
      scope: [Circular *1],
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 3, character: 39 },
      end: Position { line: 3, character: 43 },
      scope: [Circular *1],
      value: '-h',
      raw: '\\"-h\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 3, character: 54 },
      end: Position { line: 3, character: 55 },
      scope: [Circular *1],
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 3, character: 60 },
      end: Position { line: 3, character: 68 },
      scope: [Circular *1],
      value: '--help',
      raw: '\\"--help\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 4, character: 22 },
      end: Position { line: 4, character: 23 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 4, character: 36 },
      end: Position { line: 4, character: 37 },
      scope: [Circular *1],
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 4, character: 42 },
      end: Position { line: 4, character: 46 },
      scope: [Circular *1],
      value: '-h',
      raw: '\\"-h\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 4, character: 59 },
      end: Position { line: 4, character: 60 },
      scope: [Circular *1],
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 4, character: 65 },
      end: Position { line: 4, character: 73 },
      scope: [Circular *1],
      value: '--help',
      raw: '\\"--help\\"'
    }
  ],
  scopes: [],
  lines: Map(3) {
    1 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 40 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 7 },
        scope: [Circular *1],
        name: 'params'
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 1, character: 10 },
        end: Position { line: 1, character: 40 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue] ]
      }
    },
    3 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 69 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 3, character: 6 },
        end: Position { line: 3, character: 69 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTEvaluationExpression] ]
      }
    },
    4 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 4, character: 75 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 4, character: 6 },
        end: Position { line: 4, character: 75 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTEvaluationExpression] ]
      }
    }
  }
}"
`;

exports[`parse default scripts if-clause.src unsafe 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 4, character: 75 },
  scope: null,
  body: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 40 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 7 },
        scope: [Circular *1],
        name: 'params'
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 1, character: 10 },
        end: Position { line: 1, character: 40 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 69 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 3, character: 6 },
        end: Position { line: 3, character: 69 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTEvaluationExpression] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 4, character: 75 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 4, character: 6 },
        end: Position { line: 4, character: 75 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTEvaluationExpression] ]
      }
    }
  ],
  namespaces: Set(0) {},
  assignments: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 40 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 7 },
        scope: [Circular *1],
        name: 'params'
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 1, character: 10 },
        end: Position { line: 1, character: 40 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue] ]
      }
    }
  ],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 1, character: 11 },
      end: Position { line: 1, character: 23 },
      scope: [Circular *1],
      value: '/home/test',
      raw: '\\"/home/test\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 1, character: 25 },
      end: Position { line: 1, character: 39 },
      scope: [Circular *1],
      value: 'myTestFolder',
      raw: '\\"myTestFolder\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 3, character: 21 },
      end: Position { line: 3, character: 22 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 3, character: 33 },
      end: Position { line: 3, character: 34 },
      scope: [Circular *1],
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 3, character: 39 },
      end: Position { line: 3, character: 43 },
      scope: [Circular *1],
      value: '-h',
      raw: '\\"-h\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 3, character: 54 },
      end: Position { line: 3, character: 55 },
      scope: [Circular *1],
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 3, character: 60 },
      end: Position { line: 3, character: 68 },
      scope: [Circular *1],
      value: '--help',
      raw: '\\"--help\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 4, character: 22 },
      end: Position { line: 4, character: 23 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 4, character: 36 },
      end: Position { line: 4, character: 37 },
      scope: [Circular *1],
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 4, character: 42 },
      end: Position { line: 4, character: 46 },
      scope: [Circular *1],
      value: '-h',
      raw: '\\"-h\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 4, character: 59 },
      end: Position { line: 4, character: 60 },
      scope: [Circular *1],
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 4, character: 65 },
      end: Position { line: 4, character: 73 },
      scope: [Circular *1],
      value: '--help',
      raw: '\\"--help\\"'
    }
  ],
  scopes: [],
  lines: Map(3) {
    1 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 40 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 7 },
        scope: [Circular *1],
        name: 'params'
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 1, character: 10 },
        end: Position { line: 1, character: 40 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue] ]
      }
    },
    3 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 69 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 3, character: 6 },
        end: Position { line: 3, character: 69 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTEvaluationExpression] ]
      }
    },
    4 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 4, character: 75 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 4, character: 6 },
        end: Position { line: 4, character: 75 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTEvaluationExpression] ]
      }
    }
  }
}"
`;

exports[`parse default scripts if-shorthand.src 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 28, character: 13 },
  scope: null,
  body: [
    ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 29 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        }
      ]
    },
    ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 2, character: 1 },
      end: Position { line: 2, character: 49 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTElseClause {
          type: 'ElseShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array]
        }
      ]
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 13 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 3, character: 6 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    ASTIfStatement {
      type: 'IfStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 8, character: 7 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTElseClause {
          type: 'ElseClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array]
        }
      ]
    },
    ASTForGenericStatement {
      type: 'ForGenericStatement',
      start: Position { line: 10, character: 1 },
      end: Position { line: 10, character: 23 },
      scope: [Circular *1],
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          expression: [ASTCallExpression]
        }
      ],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 10, character: 6 },
        end: Position { line: 10, character: 7 },
        scope: [Circular *1],
        name: 'i'
      },
      iterator: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 10, character: 11 },
        end: Position { line: 10, character: 13 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTForGenericStatement {
      type: 'ForGenericStatement',
      start: Position { line: 11, character: 1 },
      end: Position { line: 13, character: 8 },
      scope: [Circular *1],
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          expression: [ASTCallExpression]
        }
      ],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 11, character: 6 },
        end: Position { line: 11, character: 7 },
        scope: [Circular *1],
        name: 'b'
      },
      iterator: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 11, character: 11 },
        end: Position { line: 11, character: 13 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTWhileStatement {
      type: 'WhileStatement',
      start: Position { line: 14, character: 1 },
      end: Position { line: 14, character: 21 },
      scope: [Circular *1],
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          expression: [ASTAssignmentStatement]
        }
      ],
      condition: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 14, character: 10 },
        end: Position { line: 14, character: 14 },
        scope: [Circular *1],
        operator: '<',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'i'
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'b'
        }
      }
    },
    ASTWhileStatement {
      type: 'WhileStatement',
      start: Position { line: 15, character: 1 },
      end: Position { line: 17, character: 10 },
      scope: [Circular *1],
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          expression: [ASTAssignmentStatement]
        }
      ],
      condition: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 15, character: 10 },
        end: Position { line: 15, character: 14 },
        scope: [Circular *1],
        operator: '<',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'b'
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'i'
        }
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 18, character: 1 },
      end: Position { line: 19, character: 14 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 18, character: 1 },
        end: Position { line: 18, character: 11 },
        scope: [Circular *1],
        name: 'myFunction'
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 18, character: 14 },
        end: Position { line: 18, character: 34 },
        scope: [Circular *1],
        body: [ [ASTCallStatement] ],
        namespaces: Set(1) { 'v' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 19, character: 1 },
      end: Position { line: 21, character: 13 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 19, character: 1 },
        end: Position { line: 19, character: 14 },
        scope: [Circular *1],
        name: 'otherFunction'
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 19, character: 17 },
        end: Position { line: 21, character: 13 },
        scope: [Circular *1],
        body: [ [ASTCallStatement] ],
        namespaces: Set(1) { 'n' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      }
    },
    <ref *2> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 23, character: 1 },
      end: Position { line: 23, character: 25 },
      scope: [Circular *1],
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          argument: [ASTLiteral]
        }
      ],
      namespaces: Set(1) { 'm' },
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          name: 'm'
        }
      ]
    },
    <ref *3> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 26, character: 1 },
      end: Position { line: 28, character: 13 },
      scope: [Circular *1],
      body: [
        ASTIfStatement {
          type: 'IfShortcutStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          clauses: [Array]
        }
      ],
      namespaces: Set(2) { 'b', 'a' },
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          name: 'b'
        }
      ]
    }
  ],
  namespaces: Set(4) { 'i', 'b', 'myFunction', 'otherFunction' },
  assignments: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 14, character: 15 },
      end: Position { line: 14, character: 21 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 14, character: 15 },
        end: Position { line: 14, character: 16 },
        scope: [Circular *1],
        name: 'i'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 14, character: 20 },
        end: Position { line: 14, character: 21 },
        scope: [Circular *1],
        operator: '+',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'i'
        },
        right: ASTLiteral {
          type: 'NumericLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: 1,
          raw: '1'
        }
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 16, character: 5 },
      end: Position { line: 16, character: 11 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 16, character: 5 },
        end: Position { line: 16, character: 6 },
        scope: [Circular *1],
        name: 'b'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 16, character: 10 },
        end: Position { line: 16, character: 11 },
        scope: [Circular *1],
        operator: '+',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'b'
        },
        right: ASTLiteral {
          type: 'NumericLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: 1,
          raw: '1'
        }
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 18, character: 1 },
      end: Position { line: 19, character: 14 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 18, character: 1 },
        end: Position { line: 18, character: 11 },
        scope: [Circular *1],
        name: 'myFunction'
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 18, character: 14 },
        end: Position { line: 18, character: 34 },
        scope: [Circular *1],
        body: [ [ASTCallStatement] ],
        namespaces: Set(1) { 'v' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 19, character: 1 },
      end: Position { line: 21, character: 13 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 19, character: 1 },
        end: Position { line: 19, character: 14 },
        scope: [Circular *1],
        name: 'otherFunction'
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 19, character: 17 },
        end: Position { line: 21, character: 13 },
        scope: [Circular *1],
        body: [ [ASTCallStatement] ],
        namespaces: Set(1) { 'n' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      }
    }
  ],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 1, character: 5 },
      end: Position { line: 1, character: 9 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 1, character: 22 },
      end: Position { line: 1, character: 28 },
      scope: [Circular *1],
      value: 'true',
      raw: '\\"true\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 2, character: 5 },
      end: Position { line: 2, character: 10 },
      scope: [Circular *1],
      value: false,
      raw: 'false'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 2, character: 23 },
      end: Position { line: 2, character: 29 },
      scope: [Circular *1],
      value: 'true',
      raw: '\\"true\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 2, character: 42 },
      end: Position { line: 2, character: 48 },
      scope: [Circular *1],
      value: 'true',
      raw: '\\"true\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 3, character: 7 },
      end: Position { line: 3, character: 12 },
      scope: [Circular *1],
      value: 'was',
      raw: '\\"was\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 4, character: 5 },
      end: Position { line: 4, character: 10 },
      scope: [Circular *1],
      value: false,
      raw: 'false'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 5, character: 11 },
      end: Position { line: 5, character: 16 },
      scope: [Circular *1],
      value: false,
      raw: 'false'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 7, character: 11 },
      end: Position { line: 7, character: 15 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 14, character: 20 },
      end: Position { line: 14, character: 21 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 16, character: 10 },
      end: Position { line: 16, character: 11 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 23, character: 20 },
      end: Position { line: 23, character: 25 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 23, character: 1 },
        end: Position { line: 23, character: 25 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'm' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      },
      value: 'was',
      raw: '\\"was\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 27, character: 24 },
      end: Position { line: 27, character: 29 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 26, character: 1 },
        end: Position { line: 28, character: 13 },
        scope: [Circular *1],
        body: [ [ASTIfStatement] ],
        namespaces: Set(2) { 'b', 'a' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      },
      value: 'foo',
      raw: '\\"foo\\"'
    }
  ],
  scopes: [
    <ref *4> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 18, character: 14 },
      end: Position { line: 18, character: 34 },
      scope: [Circular *1],
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          expression: [ASTCallExpression]
        }
      ],
      namespaces: Set(1) { 'v' },
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          name: 'v'
        }
      ]
    },
    <ref *5> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 19, character: 17 },
      end: Position { line: 21, character: 13 },
      scope: [Circular *1],
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *5],
          expression: [ASTCallExpression]
        }
      ],
      namespaces: Set(1) { 'n' },
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *5],
          name: 'n'
        }
      ]
    },
    <ref *2> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 23, character: 1 },
      end: Position { line: 23, character: 25 },
      scope: [Circular *1],
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          argument: [ASTLiteral]
        }
      ],
      namespaces: Set(1) { 'm' },
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          name: 'm'
        }
      ]
    },
    <ref *3> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 26, character: 1 },
      end: Position { line: 28, character: 13 },
      scope: [Circular *1],
      body: [
        ASTIfStatement {
          type: 'IfShortcutStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          clauses: [Array]
        }
      ],
      namespaces: Set(2) { 'b', 'a' },
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          name: 'b'
        }
      ]
    }
  ],
  lines: Map(18) {
    1 => ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 29 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        }
      ]
    },
    2 => ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 2, character: 1 },
      end: Position { line: 2, character: 49 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTElseClause {
          type: 'ElseShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array]
        }
      ]
    },
    3 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 13 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 3, character: 6 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    5 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 5, character: 5 },
      end: Position { line: 5, character: 17 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 5, character: 10 },
        end: Position { line: 5, character: 17 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    7 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 7, character: 5 },
      end: Position { line: 7, character: 16 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 7, character: 10 },
        end: Position { line: 7, character: 16 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    4 => ASTIfStatement {
      type: 'IfStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 8, character: 7 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTElseClause {
          type: 'ElseClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array]
        }
      ]
    },
    10 => ASTForGenericStatement {
      type: 'ForGenericStatement',
      start: Position { line: 10, character: 1 },
      end: Position { line: 10, character: 23 },
      scope: [Circular *1],
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          expression: [ASTCallExpression]
        }
      ],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 10, character: 6 },
        end: Position { line: 10, character: 7 },
        scope: [Circular *1],
        name: 'i'
      },
      iterator: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 10, character: 11 },
        end: Position { line: 10, character: 13 },
        scope: [Circular *1],
        fields: []
      }
    },
    12 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 12, character: 5 },
      end: Position { line: 12, character: 13 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 12, character: 10 },
        end: Position { line: 12, character: 13 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTIdentifier] ]
      }
    },
    11 => ASTForGenericStatement {
      type: 'ForGenericStatement',
      start: Position { line: 11, character: 1 },
      end: Position { line: 13, character: 8 },
      scope: [Circular *1],
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          expression: [ASTCallExpression]
        }
      ],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 11, character: 6 },
        end: Position { line: 11, character: 7 },
        scope: [Circular *1],
        name: 'b'
      },
      iterator: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 11, character: 11 },
        end: Position { line: 11, character: 13 },
        scope: [Circular *1],
        fields: []
      }
    },
    14 => ASTWhileStatement {
      type: 'WhileStatement',
      start: Position { line: 14, character: 1 },
      end: Position { line: 14, character: 21 },
      scope: [Circular *1],
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          expression: [ASTAssignmentStatement]
        }
      ],
      condition: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 14, character: 10 },
        end: Position { line: 14, character: 14 },
        scope: [Circular *1],
        operator: '<',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'i'
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'b'
        }
      }
    },
    16 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 16, character: 5 },
      end: Position { line: 16, character: 11 },
      scope: [Circular *1],
      expression: ASTAssignmentStatement {
        type: 'AssignmentStatement',
        start: Position { line: 16, character: 5 },
        end: Position { line: 16, character: 11 },
        scope: [Circular *1],
        variable: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'b'
        },
        init: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '+',
          left: [ASTIdentifier],
          right: [ASTLiteral]
        }
      }
    },
    15 => ASTWhileStatement {
      type: 'WhileStatement',
      start: Position { line: 15, character: 1 },
      end: Position { line: 17, character: 10 },
      scope: [Circular *1],
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          expression: [ASTAssignmentStatement]
        }
      ],
      condition: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 15, character: 10 },
        end: Position { line: 15, character: 14 },
        scope: [Circular *1],
        operator: '<',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'b'
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'i'
        }
      }
    },
    18 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 18, character: 1 },
      end: Position { line: 19, character: 14 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 18, character: 1 },
        end: Position { line: 18, character: 11 },
        scope: [Circular *1],
        name: 'myFunction'
      },
      init: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 18, character: 14 },
        end: Position { line: 18, character: 34 },
        scope: [Circular *1],
        body: [ [ASTCallStatement] ],
        namespaces: Set(1) { 'v' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      }
    },
    20 => <ref *6> ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 20, character: 5 },
      end: Position { line: 20, character: 13 },
      scope: <ref *5> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 19, character: 17 },
        end: Position { line: 21, character: 13 },
        scope: [Circular *1],
        body: [ [Circular *6] ],
        namespaces: Set(1) { 'n' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 20, character: 10 },
        end: Position { line: 20, character: 13 },
        scope: <ref *5> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'print'
        },
        arguments: [ [ASTIdentifier] ]
      }
    },
    19 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 19, character: 1 },
      end: Position { line: 21, character: 13 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 19, character: 1 },
        end: Position { line: 19, character: 14 },
        scope: [Circular *1],
        name: 'otherFunction'
      },
      init: <ref *5> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 19, character: 17 },
        end: Position { line: 21, character: 13 },
        scope: [Circular *1],
        body: [ [ASTCallStatement] ],
        namespaces: Set(1) { 'n' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      }
    },
    23 => <ref *2> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 23, character: 1 },
      end: Position { line: 23, character: 25 },
      scope: [Circular *1],
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          argument: [ASTLiteral]
        }
      ],
      namespaces: Set(1) { 'm' },
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          name: 'm'
        }
      ]
    },
    27 => <ref *7> ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 27, character: 5 },
      end: Position { line: 27, character: 29 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 26, character: 1 },
        end: Position { line: 28, character: 13 },
        scope: [Circular *1],
        body: [ [Circular *7] ],
        namespaces: Set(2) { 'b', 'a' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      },
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTIdentifier]
        }
      ]
    },
    26 => <ref *3> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 26, character: 1 },
      end: Position { line: 28, character: 13 },
      scope: [Circular *1],
      body: [
        <ref *7> ASTIfStatement {
          type: 'IfShortcutStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          clauses: [Array]
        }
      ],
      namespaces: Set(2) { 'b', 'a' },
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          name: 'b'
        }
      ]
    }
  }
}"
`;

exports[`parse default scripts if-shorthand.src unsafe 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 28, character: 13 },
  scope: null,
  body: [
    ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 29 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        }
      ]
    },
    ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 2, character: 1 },
      end: Position { line: 2, character: 49 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTElseClause {
          type: 'ElseShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array]
        }
      ]
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 13 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 3, character: 6 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    ASTIfStatement {
      type: 'IfStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 8, character: 7 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTElseClause {
          type: 'ElseClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array]
        }
      ]
    },
    ASTForGenericStatement {
      type: 'ForGenericStatement',
      start: Position { line: 10, character: 1 },
      end: Position { line: 10, character: 23 },
      scope: [Circular *1],
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          expression: [ASTCallExpression]
        }
      ],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 10, character: 6 },
        end: Position { line: 10, character: 7 },
        scope: [Circular *1],
        name: 'i'
      },
      iterator: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 10, character: 11 },
        end: Position { line: 10, character: 13 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTForGenericStatement {
      type: 'ForGenericStatement',
      start: Position { line: 11, character: 1 },
      end: Position { line: 13, character: 8 },
      scope: [Circular *1],
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          expression: [ASTCallExpression]
        }
      ],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 11, character: 6 },
        end: Position { line: 11, character: 7 },
        scope: [Circular *1],
        name: 'b'
      },
      iterator: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 11, character: 11 },
        end: Position { line: 11, character: 13 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTWhileStatement {
      type: 'WhileStatement',
      start: Position { line: 14, character: 1 },
      end: Position { line: 14, character: 21 },
      scope: [Circular *1],
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          expression: [ASTAssignmentStatement]
        }
      ],
      condition: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 14, character: 10 },
        end: Position { line: 14, character: 14 },
        scope: [Circular *1],
        operator: '<',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'i'
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'b'
        }
      }
    },
    ASTWhileStatement {
      type: 'WhileStatement',
      start: Position { line: 15, character: 1 },
      end: Position { line: 17, character: 10 },
      scope: [Circular *1],
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          expression: [ASTAssignmentStatement]
        }
      ],
      condition: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 15, character: 10 },
        end: Position { line: 15, character: 14 },
        scope: [Circular *1],
        operator: '<',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'b'
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'i'
        }
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 18, character: 1 },
      end: Position { line: 19, character: 14 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 18, character: 1 },
        end: Position { line: 18, character: 11 },
        scope: [Circular *1],
        name: 'myFunction'
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 18, character: 14 },
        end: Position { line: 18, character: 34 },
        scope: [Circular *1],
        body: [ [ASTCallStatement] ],
        namespaces: Set(1) { 'v' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 19, character: 1 },
      end: Position { line: 21, character: 13 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 19, character: 1 },
        end: Position { line: 19, character: 14 },
        scope: [Circular *1],
        name: 'otherFunction'
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 19, character: 17 },
        end: Position { line: 21, character: 13 },
        scope: [Circular *1],
        body: [ [ASTCallStatement] ],
        namespaces: Set(1) { 'n' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      }
    },
    <ref *2> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 23, character: 1 },
      end: Position { line: 23, character: 25 },
      scope: [Circular *1],
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          argument: [ASTLiteral]
        }
      ],
      namespaces: Set(1) { 'm' },
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          name: 'm'
        }
      ]
    },
    <ref *3> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 26, character: 1 },
      end: Position { line: 28, character: 13 },
      scope: [Circular *1],
      body: [
        ASTIfStatement {
          type: 'IfShortcutStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          clauses: [Array]
        }
      ],
      namespaces: Set(2) { 'b', 'a' },
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          name: 'b'
        }
      ]
    }
  ],
  namespaces: Set(4) { 'i', 'b', 'myFunction', 'otherFunction' },
  assignments: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 14, character: 15 },
      end: Position { line: 14, character: 21 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 14, character: 15 },
        end: Position { line: 14, character: 16 },
        scope: [Circular *1],
        name: 'i'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 14, character: 20 },
        end: Position { line: 14, character: 21 },
        scope: [Circular *1],
        operator: '+',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'i'
        },
        right: ASTLiteral {
          type: 'NumericLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: 1,
          raw: '1'
        }
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 16, character: 5 },
      end: Position { line: 16, character: 11 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 16, character: 5 },
        end: Position { line: 16, character: 6 },
        scope: [Circular *1],
        name: 'b'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 16, character: 10 },
        end: Position { line: 16, character: 11 },
        scope: [Circular *1],
        operator: '+',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'b'
        },
        right: ASTLiteral {
          type: 'NumericLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: 1,
          raw: '1'
        }
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 18, character: 1 },
      end: Position { line: 19, character: 14 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 18, character: 1 },
        end: Position { line: 18, character: 11 },
        scope: [Circular *1],
        name: 'myFunction'
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 18, character: 14 },
        end: Position { line: 18, character: 34 },
        scope: [Circular *1],
        body: [ [ASTCallStatement] ],
        namespaces: Set(1) { 'v' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 19, character: 1 },
      end: Position { line: 21, character: 13 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 19, character: 1 },
        end: Position { line: 19, character: 14 },
        scope: [Circular *1],
        name: 'otherFunction'
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 19, character: 17 },
        end: Position { line: 21, character: 13 },
        scope: [Circular *1],
        body: [ [ASTCallStatement] ],
        namespaces: Set(1) { 'n' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      }
    }
  ],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 1, character: 5 },
      end: Position { line: 1, character: 9 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 1, character: 22 },
      end: Position { line: 1, character: 28 },
      scope: [Circular *1],
      value: 'true',
      raw: '\\"true\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 2, character: 5 },
      end: Position { line: 2, character: 10 },
      scope: [Circular *1],
      value: false,
      raw: 'false'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 2, character: 23 },
      end: Position { line: 2, character: 29 },
      scope: [Circular *1],
      value: 'true',
      raw: '\\"true\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 2, character: 42 },
      end: Position { line: 2, character: 48 },
      scope: [Circular *1],
      value: 'true',
      raw: '\\"true\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 3, character: 7 },
      end: Position { line: 3, character: 12 },
      scope: [Circular *1],
      value: 'was',
      raw: '\\"was\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 4, character: 5 },
      end: Position { line: 4, character: 10 },
      scope: [Circular *1],
      value: false,
      raw: 'false'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 5, character: 11 },
      end: Position { line: 5, character: 16 },
      scope: [Circular *1],
      value: false,
      raw: 'false'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 7, character: 11 },
      end: Position { line: 7, character: 15 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 14, character: 20 },
      end: Position { line: 14, character: 21 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 16, character: 10 },
      end: Position { line: 16, character: 11 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 23, character: 20 },
      end: Position { line: 23, character: 25 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 23, character: 1 },
        end: Position { line: 23, character: 25 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'm' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      },
      value: 'was',
      raw: '\\"was\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 27, character: 24 },
      end: Position { line: 27, character: 29 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 26, character: 1 },
        end: Position { line: 28, character: 13 },
        scope: [Circular *1],
        body: [ [ASTIfStatement] ],
        namespaces: Set(2) { 'b', 'a' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      },
      value: 'foo',
      raw: '\\"foo\\"'
    }
  ],
  scopes: [
    <ref *4> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 18, character: 14 },
      end: Position { line: 18, character: 34 },
      scope: [Circular *1],
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          expression: [ASTCallExpression]
        }
      ],
      namespaces: Set(1) { 'v' },
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          name: 'v'
        }
      ]
    },
    <ref *5> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 19, character: 17 },
      end: Position { line: 21, character: 13 },
      scope: [Circular *1],
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *5],
          expression: [ASTCallExpression]
        }
      ],
      namespaces: Set(1) { 'n' },
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *5],
          name: 'n'
        }
      ]
    },
    <ref *2> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 23, character: 1 },
      end: Position { line: 23, character: 25 },
      scope: [Circular *1],
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          argument: [ASTLiteral]
        }
      ],
      namespaces: Set(1) { 'm' },
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          name: 'm'
        }
      ]
    },
    <ref *3> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 26, character: 1 },
      end: Position { line: 28, character: 13 },
      scope: [Circular *1],
      body: [
        ASTIfStatement {
          type: 'IfShortcutStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          clauses: [Array]
        }
      ],
      namespaces: Set(2) { 'b', 'a' },
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          name: 'b'
        }
      ]
    }
  ],
  lines: Map(18) {
    1 => ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 29 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        }
      ]
    },
    2 => ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 2, character: 1 },
      end: Position { line: 2, character: 49 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTElseClause {
          type: 'ElseShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array]
        }
      ]
    },
    3 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 13 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 3, character: 6 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    5 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 5, character: 5 },
      end: Position { line: 5, character: 17 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 5, character: 10 },
        end: Position { line: 5, character: 17 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    7 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 7, character: 5 },
      end: Position { line: 7, character: 16 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 7, character: 10 },
        end: Position { line: 7, character: 16 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    4 => ASTIfStatement {
      type: 'IfStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 8, character: 7 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTElseClause {
          type: 'ElseClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array]
        }
      ]
    },
    10 => ASTForGenericStatement {
      type: 'ForGenericStatement',
      start: Position { line: 10, character: 1 },
      end: Position { line: 10, character: 23 },
      scope: [Circular *1],
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          expression: [ASTCallExpression]
        }
      ],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 10, character: 6 },
        end: Position { line: 10, character: 7 },
        scope: [Circular *1],
        name: 'i'
      },
      iterator: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 10, character: 11 },
        end: Position { line: 10, character: 13 },
        scope: [Circular *1],
        fields: []
      }
    },
    12 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 12, character: 5 },
      end: Position { line: 12, character: 13 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 12, character: 10 },
        end: Position { line: 12, character: 13 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTIdentifier] ]
      }
    },
    11 => ASTForGenericStatement {
      type: 'ForGenericStatement',
      start: Position { line: 11, character: 1 },
      end: Position { line: 13, character: 8 },
      scope: [Circular *1],
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          expression: [ASTCallExpression]
        }
      ],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 11, character: 6 },
        end: Position { line: 11, character: 7 },
        scope: [Circular *1],
        name: 'b'
      },
      iterator: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 11, character: 11 },
        end: Position { line: 11, character: 13 },
        scope: [Circular *1],
        fields: []
      }
    },
    14 => ASTWhileStatement {
      type: 'WhileStatement',
      start: Position { line: 14, character: 1 },
      end: Position { line: 14, character: 21 },
      scope: [Circular *1],
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          expression: [ASTAssignmentStatement]
        }
      ],
      condition: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 14, character: 10 },
        end: Position { line: 14, character: 14 },
        scope: [Circular *1],
        operator: '<',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'i'
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'b'
        }
      }
    },
    16 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 16, character: 5 },
      end: Position { line: 16, character: 11 },
      scope: [Circular *1],
      expression: ASTAssignmentStatement {
        type: 'AssignmentStatement',
        start: Position { line: 16, character: 5 },
        end: Position { line: 16, character: 11 },
        scope: [Circular *1],
        variable: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'b'
        },
        init: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '+',
          left: [ASTIdentifier],
          right: [ASTLiteral]
        }
      }
    },
    15 => ASTWhileStatement {
      type: 'WhileStatement',
      start: Position { line: 15, character: 1 },
      end: Position { line: 17, character: 10 },
      scope: [Circular *1],
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          expression: [ASTAssignmentStatement]
        }
      ],
      condition: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 15, character: 10 },
        end: Position { line: 15, character: 14 },
        scope: [Circular *1],
        operator: '<',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'b'
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'i'
        }
      }
    },
    18 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 18, character: 1 },
      end: Position { line: 19, character: 14 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 18, character: 1 },
        end: Position { line: 18, character: 11 },
        scope: [Circular *1],
        name: 'myFunction'
      },
      init: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 18, character: 14 },
        end: Position { line: 18, character: 34 },
        scope: [Circular *1],
        body: [ [ASTCallStatement] ],
        namespaces: Set(1) { 'v' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      }
    },
    20 => <ref *6> ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 20, character: 5 },
      end: Position { line: 20, character: 13 },
      scope: <ref *5> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 19, character: 17 },
        end: Position { line: 21, character: 13 },
        scope: [Circular *1],
        body: [ [Circular *6] ],
        namespaces: Set(1) { 'n' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 20, character: 10 },
        end: Position { line: 20, character: 13 },
        scope: <ref *5> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'print'
        },
        arguments: [ [ASTIdentifier] ]
      }
    },
    19 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 19, character: 1 },
      end: Position { line: 21, character: 13 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 19, character: 1 },
        end: Position { line: 19, character: 14 },
        scope: [Circular *1],
        name: 'otherFunction'
      },
      init: <ref *5> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 19, character: 17 },
        end: Position { line: 21, character: 13 },
        scope: [Circular *1],
        body: [ [ASTCallStatement] ],
        namespaces: Set(1) { 'n' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      }
    },
    23 => <ref *2> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 23, character: 1 },
      end: Position { line: 23, character: 25 },
      scope: [Circular *1],
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          argument: [ASTLiteral]
        }
      ],
      namespaces: Set(1) { 'm' },
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          name: 'm'
        }
      ]
    },
    27 => <ref *7> ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 27, character: 5 },
      end: Position { line: 27, character: 29 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 26, character: 1 },
        end: Position { line: 28, character: 13 },
        scope: [Circular *1],
        body: [ [Circular *7] ],
        namespaces: Set(2) { 'b', 'a' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      },
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTIdentifier]
        }
      ]
    },
    26 => <ref *3> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 26, character: 1 },
      end: Position { line: 28, character: 13 },
      scope: [Circular *1],
      body: [
        <ref *7> ASTIfStatement {
          type: 'IfShortcutStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          clauses: [Array]
        }
      ],
      namespaces: Set(2) { 'b', 'a' },
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          name: 'b'
        }
      ]
    }
  }
}"
`;

exports[`parse default scripts invalid code 1`] = `Array []`;

exports[`parse default scripts invalid code 2`] = `
Array [
  [Error: Unexpected value ; at line 2. Expected: )],
  [Error: Unexpected value ) at line 4. Expected: =],
  [Error: Unexpected expression at line 4.],
  [Error: Unexpected assignment or call at line 8.],
  [Error: Unexpected end of file at line 9.],
]
`;

exports[`parse default scripts map.src 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 15, character: 2 },
  scope: null,
  body: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 3, character: 2 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 5 },
        scope: [Circular *1],
        name: 'test'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 2 },
        scope: [Circular *1],
        fields: [ [ASTMapKeyString] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 6, character: 2 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 4, character: 1 },
        end: Position { line: 4, character: 6 },
        scope: [Circular *1],
        name: 'test2'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 4, character: 9 },
        end: Position { line: 6, character: 2 },
        scope: [Circular *1],
        fields: [ [ASTMapKeyString] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 7, character: 1 },
      end: Position { line: 9, character: 2 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 7, character: 1 },
        end: Position { line: 7, character: 6 },
        scope: [Circular *1],
        name: 'test3'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 7, character: 9 },
        end: Position { line: 9, character: 2 },
        scope: [Circular *1],
        fields: [ [ASTMapKeyString] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 10, character: 1 },
      end: Position { line: 12, character: 2 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 10, character: 1 },
        end: Position { line: 10, character: 6 },
        scope: [Circular *1],
        name: 'test4'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 10, character: 9 },
        end: Position { line: 12, character: 2 },
        scope: [Circular *1],
        fields: [ [ASTMapKeyString] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 13, character: 1 },
      end: Position { line: 15, character: 2 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 13, character: 1 },
        end: Position { line: 13, character: 6 },
        scope: [Circular *1],
        name: 'test5'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 13, character: 9 },
        end: Position { line: 15, character: 2 },
        scope: [Circular *1],
        fields: [ [ASTMapKeyString] ]
      }
    }
  ],
  namespaces: Set(5) { 'test', 'test2', 'test3', 'test4', 'test5' },
  assignments: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 3, character: 2 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 5 },
        scope: [Circular *1],
        name: 'test'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 2 },
        scope: [Circular *1],
        fields: [ [ASTMapKeyString] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 6, character: 2 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 4, character: 1 },
        end: Position { line: 4, character: 6 },
        scope: [Circular *1],
        name: 'test2'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 4, character: 9 },
        end: Position { line: 6, character: 2 },
        scope: [Circular *1],
        fields: [ [ASTMapKeyString] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 7, character: 1 },
      end: Position { line: 9, character: 2 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 7, character: 1 },
        end: Position { line: 7, character: 6 },
        scope: [Circular *1],
        name: 'test3'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 7, character: 9 },
        end: Position { line: 9, character: 2 },
        scope: [Circular *1],
        fields: [ [ASTMapKeyString] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 10, character: 1 },
      end: Position { line: 12, character: 2 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 10, character: 1 },
        end: Position { line: 10, character: 6 },
        scope: [Circular *1],
        name: 'test4'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 10, character: 9 },
        end: Position { line: 12, character: 2 },
        scope: [Circular *1],
        fields: [ [ASTMapKeyString] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 13, character: 1 },
      end: Position { line: 15, character: 2 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 13, character: 1 },
        end: Position { line: 13, character: 6 },
        scope: [Circular *1],
        name: 'test5'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 13, character: 9 },
        end: Position { line: 15, character: 2 },
        scope: [Circular *1],
        fields: [ [ASTMapKeyString] ]
      }
    }
  ],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 2, character: 6 },
      end: Position { line: 2, character: 14 },
      scope: [Circular *1],
      value: 'myTest',
      raw: '\\"myTest\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 2, character: 16 },
      end: Position { line: 2, character: 17 },
      scope: [Circular *1],
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 2, character: 19 },
      end: Position { line: 2, character: 20 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 2, character: 22 },
      end: Position { line: 2, character: 23 },
      scope: [Circular *1],
      value: 2,
      raw: '2'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 2, character: 26 },
      end: Position { line: 2, character: 30 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 5, character: 6 },
      end: Position { line: 5, character: 8 },
      scope: [Circular *1],
      value: 12,
      raw: '12'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 5, character: 10 },
      end: Position { line: 5, character: 12 },
      scope: [Circular *1],
      value: 14,
      raw: '14'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 5, character: 15 },
      end: Position { line: 5, character: 19 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 8, character: 11 },
      end: Position { line: 8, character: 14 },
      scope: [Circular *1],
      value: 234,
      raw: '234'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 11, character: 5 },
      end: Position { line: 11, character: 9 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 11, character: 11 },
      end: Position { line: 11, character: 16 },
      scope: [Circular *1],
      value: 'foo',
      raw: '\\"foo\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 14, character: 5 },
      end: Position { line: 14, character: 8 },
      scope: [Circular *1],
      value: 123,
      raw: '123'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 14, character: 10 },
      end: Position { line: 14, character: 15 },
      scope: [Circular *1],
      value: 'bar',
      raw: '\\"bar\\"'
    }
  ],
  scopes: [],
  lines: Map(5) {
    1 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 3, character: 2 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 5 },
        scope: [Circular *1],
        name: 'test'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 2 },
        scope: [Circular *1],
        fields: [ [ASTMapKeyString] ]
      }
    },
    4 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 6, character: 2 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 4, character: 1 },
        end: Position { line: 4, character: 6 },
        scope: [Circular *1],
        name: 'test2'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 4, character: 9 },
        end: Position { line: 6, character: 2 },
        scope: [Circular *1],
        fields: [ [ASTMapKeyString] ]
      }
    },
    7 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 7, character: 1 },
      end: Position { line: 9, character: 2 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 7, character: 1 },
        end: Position { line: 7, character: 6 },
        scope: [Circular *1],
        name: 'test3'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 7, character: 9 },
        end: Position { line: 9, character: 2 },
        scope: [Circular *1],
        fields: [ [ASTMapKeyString] ]
      }
    },
    10 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 10, character: 1 },
      end: Position { line: 12, character: 2 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 10, character: 1 },
        end: Position { line: 10, character: 6 },
        scope: [Circular *1],
        name: 'test4'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 10, character: 9 },
        end: Position { line: 12, character: 2 },
        scope: [Circular *1],
        fields: [ [ASTMapKeyString] ]
      }
    },
    13 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 13, character: 1 },
      end: Position { line: 15, character: 2 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 13, character: 1 },
        end: Position { line: 13, character: 6 },
        scope: [Circular *1],
        name: 'test5'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 13, character: 9 },
        end: Position { line: 15, character: 2 },
        scope: [Circular *1],
        fields: [ [ASTMapKeyString] ]
      }
    }
  }
}"
`;

exports[`parse default scripts map.src unsafe 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 15, character: 2 },
  scope: null,
  body: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 3, character: 2 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 5 },
        scope: [Circular *1],
        name: 'test'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 2 },
        scope: [Circular *1],
        fields: [ [ASTMapKeyString] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 6, character: 2 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 4, character: 1 },
        end: Position { line: 4, character: 6 },
        scope: [Circular *1],
        name: 'test2'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 4, character: 9 },
        end: Position { line: 6, character: 2 },
        scope: [Circular *1],
        fields: [ [ASTMapKeyString] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 7, character: 1 },
      end: Position { line: 9, character: 2 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 7, character: 1 },
        end: Position { line: 7, character: 6 },
        scope: [Circular *1],
        name: 'test3'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 7, character: 9 },
        end: Position { line: 9, character: 2 },
        scope: [Circular *1],
        fields: [ [ASTMapKeyString] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 10, character: 1 },
      end: Position { line: 12, character: 2 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 10, character: 1 },
        end: Position { line: 10, character: 6 },
        scope: [Circular *1],
        name: 'test4'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 10, character: 9 },
        end: Position { line: 12, character: 2 },
        scope: [Circular *1],
        fields: [ [ASTMapKeyString] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 13, character: 1 },
      end: Position { line: 15, character: 2 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 13, character: 1 },
        end: Position { line: 13, character: 6 },
        scope: [Circular *1],
        name: 'test5'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 13, character: 9 },
        end: Position { line: 15, character: 2 },
        scope: [Circular *1],
        fields: [ [ASTMapKeyString] ]
      }
    }
  ],
  namespaces: Set(5) { 'test', 'test2', 'test3', 'test4', 'test5' },
  assignments: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 3, character: 2 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 5 },
        scope: [Circular *1],
        name: 'test'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 2 },
        scope: [Circular *1],
        fields: [ [ASTMapKeyString] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 6, character: 2 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 4, character: 1 },
        end: Position { line: 4, character: 6 },
        scope: [Circular *1],
        name: 'test2'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 4, character: 9 },
        end: Position { line: 6, character: 2 },
        scope: [Circular *1],
        fields: [ [ASTMapKeyString] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 7, character: 1 },
      end: Position { line: 9, character: 2 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 7, character: 1 },
        end: Position { line: 7, character: 6 },
        scope: [Circular *1],
        name: 'test3'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 7, character: 9 },
        end: Position { line: 9, character: 2 },
        scope: [Circular *1],
        fields: [ [ASTMapKeyString] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 10, character: 1 },
      end: Position { line: 12, character: 2 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 10, character: 1 },
        end: Position { line: 10, character: 6 },
        scope: [Circular *1],
        name: 'test4'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 10, character: 9 },
        end: Position { line: 12, character: 2 },
        scope: [Circular *1],
        fields: [ [ASTMapKeyString] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 13, character: 1 },
      end: Position { line: 15, character: 2 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 13, character: 1 },
        end: Position { line: 13, character: 6 },
        scope: [Circular *1],
        name: 'test5'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 13, character: 9 },
        end: Position { line: 15, character: 2 },
        scope: [Circular *1],
        fields: [ [ASTMapKeyString] ]
      }
    }
  ],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 2, character: 6 },
      end: Position { line: 2, character: 14 },
      scope: [Circular *1],
      value: 'myTest',
      raw: '\\"myTest\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 2, character: 16 },
      end: Position { line: 2, character: 17 },
      scope: [Circular *1],
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 2, character: 19 },
      end: Position { line: 2, character: 20 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 2, character: 22 },
      end: Position { line: 2, character: 23 },
      scope: [Circular *1],
      value: 2,
      raw: '2'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 2, character: 26 },
      end: Position { line: 2, character: 30 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 5, character: 6 },
      end: Position { line: 5, character: 8 },
      scope: [Circular *1],
      value: 12,
      raw: '12'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 5, character: 10 },
      end: Position { line: 5, character: 12 },
      scope: [Circular *1],
      value: 14,
      raw: '14'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 5, character: 15 },
      end: Position { line: 5, character: 19 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 8, character: 11 },
      end: Position { line: 8, character: 14 },
      scope: [Circular *1],
      value: 234,
      raw: '234'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 11, character: 5 },
      end: Position { line: 11, character: 9 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 11, character: 11 },
      end: Position { line: 11, character: 16 },
      scope: [Circular *1],
      value: 'foo',
      raw: '\\"foo\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 14, character: 5 },
      end: Position { line: 14, character: 8 },
      scope: [Circular *1],
      value: 123,
      raw: '123'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 14, character: 10 },
      end: Position { line: 14, character: 15 },
      scope: [Circular *1],
      value: 'bar',
      raw: '\\"bar\\"'
    }
  ],
  scopes: [],
  lines: Map(5) {
    1 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 3, character: 2 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 5 },
        scope: [Circular *1],
        name: 'test'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 2 },
        scope: [Circular *1],
        fields: [ [ASTMapKeyString] ]
      }
    },
    4 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 6, character: 2 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 4, character: 1 },
        end: Position { line: 4, character: 6 },
        scope: [Circular *1],
        name: 'test2'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 4, character: 9 },
        end: Position { line: 6, character: 2 },
        scope: [Circular *1],
        fields: [ [ASTMapKeyString] ]
      }
    },
    7 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 7, character: 1 },
      end: Position { line: 9, character: 2 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 7, character: 1 },
        end: Position { line: 7, character: 6 },
        scope: [Circular *1],
        name: 'test3'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 7, character: 9 },
        end: Position { line: 9, character: 2 },
        scope: [Circular *1],
        fields: [ [ASTMapKeyString] ]
      }
    },
    10 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 10, character: 1 },
      end: Position { line: 12, character: 2 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 10, character: 1 },
        end: Position { line: 10, character: 6 },
        scope: [Circular *1],
        name: 'test4'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 10, character: 9 },
        end: Position { line: 12, character: 2 },
        scope: [Circular *1],
        fields: [ [ASTMapKeyString] ]
      }
    },
    13 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 13, character: 1 },
      end: Position { line: 15, character: 2 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 13, character: 1 },
        end: Position { line: 13, character: 6 },
        scope: [Circular *1],
        name: 'test5'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 13, character: 9 },
        end: Position { line: 15, character: 2 },
        scope: [Circular *1],
        fields: [ [ASTMapKeyString] ]
      }
    }
  }
}"
`;

exports[`parse default scripts multiline.src 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 22, character: 74 },
  scope: null,
  body: [
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 6, character: 50 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 1, character: 6 },
        end: Position { line: 6, character: 50 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 8, character: 1 },
      end: Position { line: 15, character: 63 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 8, character: 6 },
        end: Position { line: 15, character: 63 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTEvaluationExpression] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 17, character: 1 },
      end: Position { line: 22, character: 74 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 17, character: 6 },
        end: Position { line: 22, character: 74 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTLiteral] ]
      }
    }
  ],
  namespaces: Set(0) {},
  assignments: [],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 1, character: 7 },
      end: Position { line: 1, character: 49 },
      scope: [Circular *1],
      value: '\\\\n\\\\nwas\\\\nprint(\\"was\\")\\\\nfoo[\\"xxxx\\"].test\\\\n',
      raw: '\\"\\\\n\\\\nwas\\\\nprint(\\"\\"was\\"\\")\\\\nfoo[\\"\\"xxxx\\"\\"].test\\\\n\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 8, character: 7 },
      end: Position { line: 8, character: 25 },
      scope: [Circular *1],
      value: '\\\\nprint(\\"was\\") ',
      raw: '\\"\\\\nprint(\\"\\"was\\"\\") \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 9, character: 28 },
      end: Position { line: 9, character: 50 },
      scope: [Circular *1],
      value: '\\\\nfoo[\\"xxxx\\"].test\\\\n',
      raw: '\\"\\\\nfoo[\\"\\"xxxx\\"\\"].test\\\\n\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 11, character: 53 },
      end: Position { line: 11, character: 62 },
      scope: [Circular *1],
      value: '\\\\n\\\\n\\\\nwas\\\\n',
      raw: '\\"\\\\n\\\\n\\\\nwas\\\\n\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 17, character: 7 },
      end: Position { line: 17, character: 73 },
      scope: [Circular *1],
      value: '\\\\n\\\\n    if (typeof(@item.value) == \\"function\\") then\\\\n\\\\n    end if\\\\n',
      raw: '\\"\\\\n\\\\n    if (typeof(@item.value) == \\"\\"function\\"\\") then\\\\n\\\\n    end if\\\\n\\"'
    }
  ],
  scopes: [],
  lines: Map(3) {
    1 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 6, character: 50 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 1, character: 6 },
        end: Position { line: 6, character: 50 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    8 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 8, character: 1 },
      end: Position { line: 15, character: 63 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 8, character: 6 },
        end: Position { line: 15, character: 63 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTEvaluationExpression] ]
      }
    },
    17 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 17, character: 1 },
      end: Position { line: 22, character: 74 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 17, character: 6 },
        end: Position { line: 22, character: 74 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTLiteral] ]
      }
    }
  }
}"
`;

exports[`parse default scripts multiline.src unsafe 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 22, character: 74 },
  scope: null,
  body: [
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 6, character: 50 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 1, character: 6 },
        end: Position { line: 6, character: 50 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 8, character: 1 },
      end: Position { line: 15, character: 63 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 8, character: 6 },
        end: Position { line: 15, character: 63 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTEvaluationExpression] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 17, character: 1 },
      end: Position { line: 22, character: 74 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 17, character: 6 },
        end: Position { line: 22, character: 74 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTLiteral] ]
      }
    }
  ],
  namespaces: Set(0) {},
  assignments: [],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 1, character: 7 },
      end: Position { line: 1, character: 49 },
      scope: [Circular *1],
      value: '\\\\n\\\\nwas\\\\nprint(\\"was\\")\\\\nfoo[\\"xxxx\\"].test\\\\n',
      raw: '\\"\\\\n\\\\nwas\\\\nprint(\\"\\"was\\"\\")\\\\nfoo[\\"\\"xxxx\\"\\"].test\\\\n\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 8, character: 7 },
      end: Position { line: 8, character: 25 },
      scope: [Circular *1],
      value: '\\\\nprint(\\"was\\") ',
      raw: '\\"\\\\nprint(\\"\\"was\\"\\") \\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 9, character: 28 },
      end: Position { line: 9, character: 50 },
      scope: [Circular *1],
      value: '\\\\nfoo[\\"xxxx\\"].test\\\\n',
      raw: '\\"\\\\nfoo[\\"\\"xxxx\\"\\"].test\\\\n\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 11, character: 53 },
      end: Position { line: 11, character: 62 },
      scope: [Circular *1],
      value: '\\\\n\\\\n\\\\nwas\\\\n',
      raw: '\\"\\\\n\\\\n\\\\nwas\\\\n\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 17, character: 7 },
      end: Position { line: 17, character: 73 },
      scope: [Circular *1],
      value: '\\\\n\\\\n    if (typeof(@item.value) == \\"function\\") then\\\\n\\\\n    end if\\\\n',
      raw: '\\"\\\\n\\\\n    if (typeof(@item.value) == \\"\\"function\\"\\") then\\\\n\\\\n    end if\\\\n\\"'
    }
  ],
  scopes: [],
  lines: Map(3) {
    1 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 6, character: 50 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 1, character: 6 },
        end: Position { line: 6, character: 50 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    8 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 8, character: 1 },
      end: Position { line: 15, character: 63 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 8, character: 6 },
        end: Position { line: 15, character: 63 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTEvaluationExpression] ]
      }
    },
    17 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 17, character: 1 },
      end: Position { line: 22, character: 74 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 17, character: 6 },
        end: Position { line: 22, character: 74 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTLiteral] ]
      }
    }
  }
}"
`;

exports[`parse default scripts negation.src 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 5, character: 11 },
  scope: null,
  body: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 24 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 5 },
        scope: [Circular *1],
        name: 'test'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 1, character: 11 },
        end: Position { line: 1, character: 24 },
        scope: [Circular *1],
        operator: '+',
        left: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '+',
          left: [ASTEvaluationExpression],
          right: [ASTUnaryExpression]
        },
        right: ASTUnaryExpression {
          type: 'BinaryNegatedExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          argument: [ASTLiteral],
          operator: '+'
        }
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 2, character: 1 },
      end: Position { line: 2, character: 35 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 2, character: 1 },
        end: Position { line: 2, character: 4 },
        scope: [Circular *1],
        name: 'foo'
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 2, character: 7 },
        end: Position { line: 2, character: 35 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 4, character: 12 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 4, character: 6 },
        end: Position { line: 4, character: 12 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTIdentifier] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 5, character: 1 },
      end: Position { line: 5, character: 11 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 5, character: 6 },
        end: Position { line: 5, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTIdentifier] ]
      }
    }
  ],
  namespaces: Set(2) { 'test', 'foo' },
  assignments: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 24 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 5 },
        scope: [Circular *1],
        name: 'test'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 1, character: 11 },
        end: Position { line: 1, character: 24 },
        scope: [Circular *1],
        operator: '+',
        left: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '+',
          left: [ASTEvaluationExpression],
          right: [ASTUnaryExpression]
        },
        right: ASTUnaryExpression {
          type: 'BinaryNegatedExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          argument: [ASTLiteral],
          operator: '+'
        }
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 2, character: 1 },
      end: Position { line: 2, character: 35 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 2, character: 1 },
        end: Position { line: 2, character: 4 },
        scope: [Circular *1],
        name: 'foo'
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 2, character: 7 },
        end: Position { line: 2, character: 35 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    }
  ],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 1, character: 9 },
      end: Position { line: 1, character: 10 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 1, character: 13 },
      end: Position { line: 1, character: 14 },
      scope: [Circular *1],
      value: 2,
      raw: '2'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 1, character: 18 },
      end: Position { line: 1, character: 19 },
      scope: [Circular *1],
      value: 2,
      raw: '2'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 1, character: 23 },
      end: Position { line: 1, character: 24 },
      scope: [Circular *1],
      value: 3,
      raw: '3'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 2, character: 9 },
      end: Position { line: 2, character: 10 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 2, character: 13 },
      end: Position { line: 2, character: 14 },
      scope: [Circular *1],
      value: 2,
      raw: '2'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 2, character: 17 },
      end: Position { line: 2, character: 18 },
      scope: [Circular *1],
      value: 4,
      raw: '4'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 2, character: 22 },
      end: Position { line: 2, character: 23 },
      scope: [Circular *1],
      value: 2,
      raw: '2'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 2, character: 28 },
      end: Position { line: 2, character: 29 },
      scope: [Circular *1],
      value: 4,
      raw: '4'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 2, character: 33 },
      end: Position { line: 2, character: 34 },
      scope: [Circular *1],
      value: 6,
      raw: '6'
    }
  ],
  scopes: [],
  lines: Map(4) {
    1 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 24 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 5 },
        scope: [Circular *1],
        name: 'test'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 1, character: 11 },
        end: Position { line: 1, character: 24 },
        scope: [Circular *1],
        operator: '+',
        left: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '+',
          left: [ASTEvaluationExpression],
          right: [ASTUnaryExpression]
        },
        right: ASTUnaryExpression {
          type: 'BinaryNegatedExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          argument: [ASTLiteral],
          operator: '+'
        }
      }
    },
    2 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 2, character: 1 },
      end: Position { line: 2, character: 35 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 2, character: 1 },
        end: Position { line: 2, character: 4 },
        scope: [Circular *1],
        name: 'foo'
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 2, character: 7 },
        end: Position { line: 2, character: 35 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    4 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 4, character: 12 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 4, character: 6 },
        end: Position { line: 4, character: 12 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTIdentifier] ]
      }
    },
    5 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 5, character: 1 },
      end: Position { line: 5, character: 11 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 5, character: 6 },
        end: Position { line: 5, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTIdentifier] ]
      }
    }
  }
}"
`;

exports[`parse default scripts negation.src unsafe 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 5, character: 11 },
  scope: null,
  body: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 24 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 5 },
        scope: [Circular *1],
        name: 'test'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 1, character: 11 },
        end: Position { line: 1, character: 24 },
        scope: [Circular *1],
        operator: '+',
        left: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '+',
          left: [ASTEvaluationExpression],
          right: [ASTUnaryExpression]
        },
        right: ASTUnaryExpression {
          type: 'BinaryNegatedExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          argument: [ASTLiteral],
          operator: '+'
        }
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 2, character: 1 },
      end: Position { line: 2, character: 35 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 2, character: 1 },
        end: Position { line: 2, character: 4 },
        scope: [Circular *1],
        name: 'foo'
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 2, character: 7 },
        end: Position { line: 2, character: 35 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 4, character: 12 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 4, character: 6 },
        end: Position { line: 4, character: 12 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTIdentifier] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 5, character: 1 },
      end: Position { line: 5, character: 11 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 5, character: 6 },
        end: Position { line: 5, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTIdentifier] ]
      }
    }
  ],
  namespaces: Set(2) { 'test', 'foo' },
  assignments: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 24 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 5 },
        scope: [Circular *1],
        name: 'test'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 1, character: 11 },
        end: Position { line: 1, character: 24 },
        scope: [Circular *1],
        operator: '+',
        left: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '+',
          left: [ASTEvaluationExpression],
          right: [ASTUnaryExpression]
        },
        right: ASTUnaryExpression {
          type: 'BinaryNegatedExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          argument: [ASTLiteral],
          operator: '+'
        }
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 2, character: 1 },
      end: Position { line: 2, character: 35 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 2, character: 1 },
        end: Position { line: 2, character: 4 },
        scope: [Circular *1],
        name: 'foo'
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 2, character: 7 },
        end: Position { line: 2, character: 35 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    }
  ],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 1, character: 9 },
      end: Position { line: 1, character: 10 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 1, character: 13 },
      end: Position { line: 1, character: 14 },
      scope: [Circular *1],
      value: 2,
      raw: '2'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 1, character: 18 },
      end: Position { line: 1, character: 19 },
      scope: [Circular *1],
      value: 2,
      raw: '2'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 1, character: 23 },
      end: Position { line: 1, character: 24 },
      scope: [Circular *1],
      value: 3,
      raw: '3'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 2, character: 9 },
      end: Position { line: 2, character: 10 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 2, character: 13 },
      end: Position { line: 2, character: 14 },
      scope: [Circular *1],
      value: 2,
      raw: '2'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 2, character: 17 },
      end: Position { line: 2, character: 18 },
      scope: [Circular *1],
      value: 4,
      raw: '4'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 2, character: 22 },
      end: Position { line: 2, character: 23 },
      scope: [Circular *1],
      value: 2,
      raw: '2'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 2, character: 28 },
      end: Position { line: 2, character: 29 },
      scope: [Circular *1],
      value: 4,
      raw: '4'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 2, character: 33 },
      end: Position { line: 2, character: 34 },
      scope: [Circular *1],
      value: 6,
      raw: '6'
    }
  ],
  scopes: [],
  lines: Map(4) {
    1 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 24 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 5 },
        scope: [Circular *1],
        name: 'test'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 1, character: 11 },
        end: Position { line: 1, character: 24 },
        scope: [Circular *1],
        operator: '+',
        left: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '+',
          left: [ASTEvaluationExpression],
          right: [ASTUnaryExpression]
        },
        right: ASTUnaryExpression {
          type: 'BinaryNegatedExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          argument: [ASTLiteral],
          operator: '+'
        }
      }
    },
    2 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 2, character: 1 },
      end: Position { line: 2, character: 35 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 2, character: 1 },
        end: Position { line: 2, character: 4 },
        scope: [Circular *1],
        name: 'foo'
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 2, character: 7 },
        end: Position { line: 2, character: 35 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    4 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 4, character: 12 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 4, character: 6 },
        end: Position { line: 4, character: 12 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTIdentifier] ]
      }
    },
    5 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 5, character: 1 },
      end: Position { line: 5, character: 11 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 5, character: 6 },
        end: Position { line: 5, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTIdentifier] ]
      }
    }
  }
}"
`;

exports[`parse default scripts obj-init.src 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 21, character: 14 },
  scope: null,
  body: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 26 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 18 },
        scope: [Circular *1],
        name: 'valueOfIdentifier'
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 1, character: 21 },
        end: Position { line: 1, character: 26 },
        scope: [Circular *1],
        value: 'foo',
        raw: '\\"foo\\"'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 9, character: 2 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 3, character: 1 },
        end: Position { line: 3, character: 9 },
        scope: [Circular *1],
        name: 'myObject'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 3, character: 12 },
        end: Position { line: 9, character: 2 },
        scope: [Circular *1],
        fields: [ [ASTMapKeyString], [ASTMapKeyString], [ASTMapKeyString] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 11, character: 1 },
      end: Position { line: 11, character: 62 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 11, character: 6 },
        end: Position { line: 11, character: 62 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTListConstructorExpression] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 13, character: 1 },
      end: Position { line: 19, character: 2 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 13, character: 1 },
        end: Position { line: 13, character: 7 },
        scope: [Circular *1],
        name: 'myList'
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 13, character: 10 },
        end: Position { line: 19, character: 2 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 21, character: 1 },
      end: Position { line: 21, character: 14 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 21, character: 6 },
        end: Position { line: 21, character: 14 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTIdentifier] ]
      }
    }
  ],
  namespaces: Set(7) {
    'valueOfIdentifier',
    'myObject',
    'test',
    'another',
    'value',
    'idtf',
    'myList'
  },
  assignments: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 26 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 18 },
        scope: [Circular *1],
        name: 'valueOfIdentifier'
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 1, character: 21 },
        end: Position { line: 1, character: 26 },
        scope: [Circular *1],
        value: 'foo',
        raw: '\\"foo\\"'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 9, character: 2 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 3, character: 1 },
        end: Position { line: 3, character: 9 },
        scope: [Circular *1],
        name: 'myObject'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 3, character: 12 },
        end: Position { line: 9, character: 2 },
        scope: [Circular *1],
        fields: [ [ASTMapKeyString], [ASTMapKeyString], [ASTMapKeyString] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 13, character: 1 },
      end: Position { line: 19, character: 2 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 13, character: 1 },
        end: Position { line: 13, character: 7 },
        scope: [Circular *1],
        name: 'myList'
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 13, character: 10 },
        end: Position { line: 19, character: 2 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    }
  ],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 1, character: 21 },
      end: Position { line: 1, character: 26 },
      scope: [Circular *1],
      value: 'foo',
      raw: '\\"foo\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 4, character: 5 },
      end: Position { line: 4, character: 11 },
      scope: [Circular *1],
      value: 'test',
      raw: '\\"test\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 5, character: 9 },
      end: Position { line: 5, character: 18 },
      scope: [Circular *1],
      value: 'another',
      raw: '\\"another\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 5, character: 20 },
      end: Position { line: 5, character: 25 },
      scope: [Circular *1],
      value: '123',
      raw: '\\"123\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 7, character: 5 },
      end: Position { line: 7, character: 12 },
      scope: [Circular *1],
      value: 'value',
      raw: '\\"value\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 7, character: 14 },
      end: Position { line: 7, character: 19 },
      scope: [Circular *1],
      value: '123',
      raw: '\\"123\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 8, character: 5 },
      end: Position { line: 8, character: 11 },
      scope: [Circular *1],
      value: 'idtf',
      raw: '\\"idtf\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 15, character: 9 },
      end: Position { line: 15, character: 18 },
      scope: [Circular *1],
      value: 'another',
      raw: '\\"another\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 15, character: 20 },
      end: Position { line: 15, character: 25 },
      scope: [Circular *1],
      value: '123',
      raw: '\\"123\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 17, character: 5 },
      end: Position { line: 17, character: 10 },
      scope: [Circular *1],
      value: '123',
      raw: '\\"123\\"'
    }
  ],
  scopes: [],
  lines: Map(5) {
    1 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 26 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 18 },
        scope: [Circular *1],
        name: 'valueOfIdentifier'
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 1, character: 21 },
        end: Position { line: 1, character: 26 },
        scope: [Circular *1],
        value: 'foo',
        raw: '\\"foo\\"'
      }
    },
    3 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 9, character: 2 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 3, character: 1 },
        end: Position { line: 3, character: 9 },
        scope: [Circular *1],
        name: 'myObject'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 3, character: 12 },
        end: Position { line: 9, character: 2 },
        scope: [Circular *1],
        fields: [ [ASTMapKeyString], [ASTMapKeyString], [ASTMapKeyString] ]
      }
    },
    11 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 11, character: 1 },
      end: Position { line: 11, character: 62 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 11, character: 6 },
        end: Position { line: 11, character: 62 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTListConstructorExpression] ]
      }
    },
    13 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 13, character: 1 },
      end: Position { line: 19, character: 2 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 13, character: 1 },
        end: Position { line: 13, character: 7 },
        scope: [Circular *1],
        name: 'myList'
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 13, character: 10 },
        end: Position { line: 19, character: 2 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    21 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 21, character: 1 },
      end: Position { line: 21, character: 14 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 21, character: 6 },
        end: Position { line: 21, character: 14 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTIdentifier] ]
      }
    }
  }
}"
`;

exports[`parse default scripts obj-init.src unsafe 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 21, character: 14 },
  scope: null,
  body: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 26 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 18 },
        scope: [Circular *1],
        name: 'valueOfIdentifier'
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 1, character: 21 },
        end: Position { line: 1, character: 26 },
        scope: [Circular *1],
        value: 'foo',
        raw: '\\"foo\\"'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 9, character: 2 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 3, character: 1 },
        end: Position { line: 3, character: 9 },
        scope: [Circular *1],
        name: 'myObject'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 3, character: 12 },
        end: Position { line: 9, character: 2 },
        scope: [Circular *1],
        fields: [ [ASTMapKeyString], [ASTMapKeyString], [ASTMapKeyString] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 11, character: 1 },
      end: Position { line: 11, character: 62 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 11, character: 6 },
        end: Position { line: 11, character: 62 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTListConstructorExpression] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 13, character: 1 },
      end: Position { line: 19, character: 2 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 13, character: 1 },
        end: Position { line: 13, character: 7 },
        scope: [Circular *1],
        name: 'myList'
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 13, character: 10 },
        end: Position { line: 19, character: 2 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 21, character: 1 },
      end: Position { line: 21, character: 14 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 21, character: 6 },
        end: Position { line: 21, character: 14 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTIdentifier] ]
      }
    }
  ],
  namespaces: Set(7) {
    'valueOfIdentifier',
    'myObject',
    'test',
    'another',
    'value',
    'idtf',
    'myList'
  },
  assignments: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 26 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 18 },
        scope: [Circular *1],
        name: 'valueOfIdentifier'
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 1, character: 21 },
        end: Position { line: 1, character: 26 },
        scope: [Circular *1],
        value: 'foo',
        raw: '\\"foo\\"'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 9, character: 2 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 3, character: 1 },
        end: Position { line: 3, character: 9 },
        scope: [Circular *1],
        name: 'myObject'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 3, character: 12 },
        end: Position { line: 9, character: 2 },
        scope: [Circular *1],
        fields: [ [ASTMapKeyString], [ASTMapKeyString], [ASTMapKeyString] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 13, character: 1 },
      end: Position { line: 19, character: 2 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 13, character: 1 },
        end: Position { line: 13, character: 7 },
        scope: [Circular *1],
        name: 'myList'
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 13, character: 10 },
        end: Position { line: 19, character: 2 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    }
  ],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 1, character: 21 },
      end: Position { line: 1, character: 26 },
      scope: [Circular *1],
      value: 'foo',
      raw: '\\"foo\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 4, character: 5 },
      end: Position { line: 4, character: 11 },
      scope: [Circular *1],
      value: 'test',
      raw: '\\"test\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 5, character: 9 },
      end: Position { line: 5, character: 18 },
      scope: [Circular *1],
      value: 'another',
      raw: '\\"another\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 5, character: 20 },
      end: Position { line: 5, character: 25 },
      scope: [Circular *1],
      value: '123',
      raw: '\\"123\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 7, character: 5 },
      end: Position { line: 7, character: 12 },
      scope: [Circular *1],
      value: 'value',
      raw: '\\"value\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 7, character: 14 },
      end: Position { line: 7, character: 19 },
      scope: [Circular *1],
      value: '123',
      raw: '\\"123\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 8, character: 5 },
      end: Position { line: 8, character: 11 },
      scope: [Circular *1],
      value: 'idtf',
      raw: '\\"idtf\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 15, character: 9 },
      end: Position { line: 15, character: 18 },
      scope: [Circular *1],
      value: 'another',
      raw: '\\"another\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 15, character: 20 },
      end: Position { line: 15, character: 25 },
      scope: [Circular *1],
      value: '123',
      raw: '\\"123\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 17, character: 5 },
      end: Position { line: 17, character: 10 },
      scope: [Circular *1],
      value: '123',
      raw: '\\"123\\"'
    }
  ],
  scopes: [],
  lines: Map(5) {
    1 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 26 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 18 },
        scope: [Circular *1],
        name: 'valueOfIdentifier'
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 1, character: 21 },
        end: Position { line: 1, character: 26 },
        scope: [Circular *1],
        value: 'foo',
        raw: '\\"foo\\"'
      }
    },
    3 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 9, character: 2 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 3, character: 1 },
        end: Position { line: 3, character: 9 },
        scope: [Circular *1],
        name: 'myObject'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 3, character: 12 },
        end: Position { line: 9, character: 2 },
        scope: [Circular *1],
        fields: [ [ASTMapKeyString], [ASTMapKeyString], [ASTMapKeyString] ]
      }
    },
    11 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 11, character: 1 },
      end: Position { line: 11, character: 62 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 11, character: 6 },
        end: Position { line: 11, character: 62 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTListConstructorExpression] ]
      }
    },
    13 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 13, character: 1 },
      end: Position { line: 19, character: 2 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 13, character: 1 },
        end: Position { line: 13, character: 7 },
        scope: [Circular *1],
        name: 'myList'
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 13, character: 10 },
        end: Position { line: 19, character: 2 },
        scope: [Circular *1],
        fields: [ [ASTListValue], [ASTListValue], [ASTListValue] ]
      }
    },
    21 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 21, character: 1 },
      end: Position { line: 21, character: 14 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 21, character: 6 },
        end: Position { line: 21, character: 14 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTIdentifier] ]
      }
    }
  }
}"
`;

exports[`parse default scripts password-generator.src 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 65, character: 14 },
  scope: null,
  body: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 23 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 18 },
        scope: [Circular *1],
        name: 'PasswordGenerator'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 21 },
        end: Position { line: 1, character: 23 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 43 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 3, character: 18 },
        end: Position { line: 3, character: 40 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'MAX_PASSWORD_LENGTH'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 3, character: 41 },
        end: Position { line: 3, character: 43 },
        scope: [Circular *1],
        value: 15,
        raw: '15'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 4, character: 71 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 4, character: 18 },
        end: Position { line: 4, character: 42 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'ALPHABETIC_CHARACTERS'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 4, character: 43 },
        end: Position { line: 4, character: 71 },
        scope: [Circular *1],
        value: 'qwertzuiopasdfghjklyxcvbnm',
        raw: '\\"qwertzuiopasdfghjklyxcvbnm\\"'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 5, character: 1 },
      end: Position { line: 5, character: 51 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 5, character: 18 },
        end: Position { line: 5, character: 38 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'NUMBER_CHARACTERS'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 5, character: 39 },
        end: Position { line: 5, character: 51 },
        scope: [Circular *1],
        value: '0123456789',
        raw: '\\"0123456789\\"'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 6, character: 1 },
      end: Position { line: 6, character: 160 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 6, character: 18 },
        end: Position { line: 6, character: 34 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'ALPHA_NUMERIC'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 6, character: 75 },
        end: Position { line: 6, character: 160 },
        scope: [Circular *1],
        operator: '+',
        left: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '+',
          left: [ASTMemberExpression],
          right: [ASTMemberExpression]
        },
        right: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        }
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 8, character: 1 },
      end: Position { line: 13, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 8, character: 18 },
        end: Position { line: 8, character: 32 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'constructor'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 33 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(4) { 'me', 'buffer', 'characters', 'ALPHA_NUMERIC' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 15, character: 1 },
      end: Position { line: 31, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 15, character: 18 },
        end: Position { line: 15, character: 35 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'increaseBuffer'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(8) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'p',
          'increaseBuffer'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 33, character: 1 },
      end: Position { line: 52, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 33, character: 18 },
        end: Position { line: 33, character: 24 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'gen'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(10) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 54, character: 1 },
      end: Position { line: 54, character: 45 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 54, character: 1 },
        end: Position { line: 54, character: 5 },
        scope: [Circular *1],
        name: 'pgen'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 54, character: 43 },
        end: Position { line: 54, character: 45 },
        scope: [Circular *1],
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTUnaryExpression]
        },
        arguments: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 56, character: 1 },
      end: Position { line: 56, character: 10 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 56, character: 1 },
        end: Position { line: 56, character: 6 },
        scope: [Circular *1],
        name: 'index'
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 56, character: 9 },
        end: Position { line: 56, character: 10 },
        scope: [Circular *1],
        value: 0,
        raw: '0'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 57, character: 1 },
      end: Position { line: 57, character: 9 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 57, character: 1 },
        end: Position { line: 57, character: 4 },
        scope: [Circular *1],
        name: 'max'
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 57, character: 7 },
        end: Position { line: 57, character: 9 },
        scope: [Circular *1],
        value: 10,
        raw: '10'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 58, character: 1 },
      end: Position { line: 58, character: 12 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 58, character: 1 },
        end: Position { line: 58, character: 7 },
        scope: [Circular *1],
        name: 'result'
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 58, character: 10 },
        end: Position { line: 58, character: 12 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTWhileStatement {
      type: 'WhileStatement',
      start: Position { line: 60, character: 1 },
      end: Position { line: 63, character: 10 },
      scope: [Circular *1],
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          expression: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        }
      ],
      condition: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 60, character: 14 },
        end: Position { line: 60, character: 20 },
        scope: [Circular *1],
        operator: '<',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'index'
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'max'
        }
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 65, character: 1 },
      end: Position { line: 65, character: 14 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 65, character: 6 },
        end: Position { line: 65, character: 14 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTIdentifier] ]
      }
    }
  ],
  namespaces: Set(12) {
    'PasswordGenerator',
    'MAX_PASSWORD_LENGTH',
    'ALPHABETIC_CHARACTERS',
    'NUMBER_CHARACTERS',
    'ALPHA_NUMERIC',
    'constructor',
    'increaseBuffer',
    'gen',
    'pgen',
    'index',
    'max',
    'result'
  },
  assignments: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 23 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 18 },
        scope: [Circular *1],
        name: 'PasswordGenerator'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 21 },
        end: Position { line: 1, character: 23 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 43 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 3, character: 18 },
        end: Position { line: 3, character: 40 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'MAX_PASSWORD_LENGTH'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 3, character: 41 },
        end: Position { line: 3, character: 43 },
        scope: [Circular *1],
        value: 15,
        raw: '15'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 4, character: 71 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 4, character: 18 },
        end: Position { line: 4, character: 42 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'ALPHABETIC_CHARACTERS'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 4, character: 43 },
        end: Position { line: 4, character: 71 },
        scope: [Circular *1],
        value: 'qwertzuiopasdfghjklyxcvbnm',
        raw: '\\"qwertzuiopasdfghjklyxcvbnm\\"'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 5, character: 1 },
      end: Position { line: 5, character: 51 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 5, character: 18 },
        end: Position { line: 5, character: 38 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'NUMBER_CHARACTERS'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 5, character: 39 },
        end: Position { line: 5, character: 51 },
        scope: [Circular *1],
        value: '0123456789',
        raw: '\\"0123456789\\"'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 6, character: 1 },
      end: Position { line: 6, character: 160 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 6, character: 18 },
        end: Position { line: 6, character: 34 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'ALPHA_NUMERIC'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 6, character: 75 },
        end: Position { line: 6, character: 160 },
        scope: [Circular *1],
        operator: '+',
        left: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '+',
          left: [ASTMemberExpression],
          right: [ASTMemberExpression]
        },
        right: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        }
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 8, character: 1 },
      end: Position { line: 13, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 8, character: 18 },
        end: Position { line: 8, character: 32 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'constructor'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 33 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(4) { 'me', 'buffer', 'characters', 'ALPHA_NUMERIC' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 15, character: 1 },
      end: Position { line: 31, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 15, character: 18 },
        end: Position { line: 15, character: 35 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'increaseBuffer'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(8) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'p',
          'increaseBuffer'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 33, character: 1 },
      end: Position { line: 52, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 33, character: 18 },
        end: Position { line: 33, character: 24 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'gen'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(10) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 54, character: 1 },
      end: Position { line: 54, character: 45 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 54, character: 1 },
        end: Position { line: 54, character: 5 },
        scope: [Circular *1],
        name: 'pgen'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 54, character: 43 },
        end: Position { line: 54, character: 45 },
        scope: [Circular *1],
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTUnaryExpression]
        },
        arguments: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 56, character: 1 },
      end: Position { line: 56, character: 10 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 56, character: 1 },
        end: Position { line: 56, character: 6 },
        scope: [Circular *1],
        name: 'index'
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 56, character: 9 },
        end: Position { line: 56, character: 10 },
        scope: [Circular *1],
        value: 0,
        raw: '0'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 57, character: 1 },
      end: Position { line: 57, character: 9 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 57, character: 1 },
        end: Position { line: 57, character: 4 },
        scope: [Circular *1],
        name: 'max'
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 57, character: 7 },
        end: Position { line: 57, character: 9 },
        scope: [Circular *1],
        value: 10,
        raw: '10'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 58, character: 1 },
      end: Position { line: 58, character: 12 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 58, character: 1 },
        end: Position { line: 58, character: 7 },
        scope: [Circular *1],
        name: 'result'
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 58, character: 10 },
        end: Position { line: 58, character: 12 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 62, character: 5 },
      end: Position { line: 62, character: 22 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 62, character: 5 },
        end: Position { line: 62, character: 10 },
        scope: [Circular *1],
        name: 'index'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 62, character: 19 },
        end: Position { line: 62, character: 22 },
        scope: [Circular *1],
        operator: '+',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'index'
        },
        right: ASTLiteral {
          type: 'NumericLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: 1,
          raw: '1'
        }
      }
    }
  ],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 3, character: 41 },
      end: Position { line: 3, character: 43 },
      scope: [Circular *1],
      value: 15,
      raw: '15'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 4, character: 43 },
      end: Position { line: 4, character: 71 },
      scope: [Circular *1],
      value: 'qwertzuiopasdfghjklyxcvbnm',
      raw: '\\"qwertzuiopasdfghjklyxcvbnm\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 5, character: 39 },
      end: Position { line: 5, character: 51 },
      scope: [Circular *1],
      value: '0123456789',
      raw: '\\"0123456789\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 10, character: 18 },
      end: Position { line: 10, character: 19 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 33 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(4) { 'me', 'buffer', 'characters', 'ALPHA_NUMERIC' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NilLiteral',
      start: Position { line: 19, character: 14 },
      end: Position { line: 19, character: 18 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(8) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'p',
          'increaseBuffer'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      value: null,
      raw: 'null'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 19, character: 53 },
      end: Position { line: 19, character: 54 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(8) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'p',
          'increaseBuffer'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 21, character: 13 },
      end: Position { line: 21, character: 14 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(8) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'p',
          'increaseBuffer'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 24, character: 32 },
      end: Position { line: 24, character: 33 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(8) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'p',
          'increaseBuffer'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 25, character: 18 },
      end: Position { line: 25, character: 19 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(8) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'p',
          'increaseBuffer'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 26, character: 36 },
      end: Position { line: 26, character: 37 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(8) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'p',
          'increaseBuffer'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 28, character: 35 },
      end: Position { line: 28, character: 36 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(8) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'p',
          'increaseBuffer'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 37, character: 16 },
      end: Position { line: 37, character: 18 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(10) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      value: '',
      raw: '\\"\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 38, character: 13 },
      end: Position { line: 38, character: 14 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(10) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 43, character: 46 },
      end: Position { line: 43, character: 47 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(10) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 44, character: 25 },
      end: Position { line: 44, character: 26 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(10) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NilLiteral',
      start: Position { line: 48, character: 16 },
      end: Position { line: 48, character: 20 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(10) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      value: null,
      raw: 'null'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 56, character: 9 },
      end: Position { line: 56, character: 10 },
      scope: [Circular *1],
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 57, character: 7 },
      end: Position { line: 57, character: 9 },
      scope: [Circular *1],
      value: 10,
      raw: '10'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 62, character: 21 },
      end: Position { line: 62, character: 22 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    }
  ],
  scopes: [
    <ref *2> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 8, character: 33 },
      end: Position { line: 13, character: 13 },
      scope: [Circular *1],
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTMemberExpression],
          init: [ASTListConstructorExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTMemberExpression],
          init: [ASTMemberExpression]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          argument: [ASTIdentifier]
        }
      ],
      namespaces: Set(4) { 'me', 'buffer', 'characters', 'ALPHA_NUMERIC' },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTMemberExpression],
          init: [ASTListConstructorExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTMemberExpression],
          init: [ASTMemberExpression]
        }
      ],
      parameters: []
    },
    <ref *3> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 15, character: 36 },
      end: Position { line: 31, character: 13 },
      scope: [Circular *1],
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTIfStatement {
          type: 'IfShortcutStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          clauses: [Array]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTIndexExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIndexExpression],
          init: [ASTIdentifier]
        },
        ASTIfStatement {
          type: 'IfStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          clauses: [Array]
        }
      ],
      namespaces: Set(8) {
        'i',
        'me',
        'currentCharBuffer',
        'buffer',
        'maxBufferSize',
        'characters',
        'p',
        'increaseBuffer'
      },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTIndexExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIndexExpression],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIndexExpression],
          init: [ASTLiteral]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          name: 'i'
        }
      ]
    },
    <ref *4> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 33, character: 25 },
      end: Position { line: 52, character: 13 },
      scope: [Circular *1],
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTWhileStatement {
          type: 'WhileStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          body: [Array],
          condition: [ASTEvaluationExpression]
        },
        ASTIfStatement {
          type: 'IfStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          clauses: [Array]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          argument: [ASTIdentifier]
        }
      ],
      namespaces: Set(10) {
        'me',
        'currentCharBuffer',
        'buffer',
        'generatorCharacters',
        'characters',
        'password',
        'index',
        'pointer',
        'increaseBuffer',
        'MAX_PASSWORD_LENGTH'
      },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIdentifier],
          init: [ASTIndexExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        }
      ],
      parameters: []
    }
  ],
  lines: Map(45) {
    1 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 23 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 18 },
        scope: [Circular *1],
        name: 'PasswordGenerator'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 21 },
        end: Position { line: 1, character: 23 },
        scope: [Circular *1],
        fields: []
      }
    },
    3 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 43 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 3, character: 18 },
        end: Position { line: 3, character: 40 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'MAX_PASSWORD_LENGTH'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 3, character: 41 },
        end: Position { line: 3, character: 43 },
        scope: [Circular *1],
        value: 15,
        raw: '15'
      }
    },
    4 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 4, character: 71 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 4, character: 18 },
        end: Position { line: 4, character: 42 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'ALPHABETIC_CHARACTERS'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 4, character: 43 },
        end: Position { line: 4, character: 71 },
        scope: [Circular *1],
        value: 'qwertzuiopasdfghjklyxcvbnm',
        raw: '\\"qwertzuiopasdfghjklyxcvbnm\\"'
      }
    },
    5 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 5, character: 1 },
      end: Position { line: 5, character: 51 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 5, character: 18 },
        end: Position { line: 5, character: 38 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'NUMBER_CHARACTERS'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 5, character: 39 },
        end: Position { line: 5, character: 51 },
        scope: [Circular *1],
        value: '0123456789',
        raw: '\\"0123456789\\"'
      }
    },
    6 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 6, character: 1 },
      end: Position { line: 6, character: 160 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 6, character: 18 },
        end: Position { line: 6, character: 34 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'ALPHA_NUMERIC'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 6, character: 75 },
        end: Position { line: 6, character: 160 },
        scope: [Circular *1],
        operator: '+',
        left: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '+',
          left: [ASTMemberExpression],
          right: [ASTMemberExpression]
        },
        right: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        }
      }
    },
    9 => <ref *5> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 9, character: 5 },
      end: Position { line: 9, character: 14 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 33 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [Circular *5],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(4) { 'me', 'buffer', 'characters', 'ALPHA_NUMERIC' },
        assignments: [
          [Circular *5],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 9, character: 5 },
        end: Position { line: 9, character: 7 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        name: 'me'
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 9, character: 10 },
        end: Position { line: 9, character: 14 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        name: 'self'
      }
    },
    10 => <ref *6> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 10, character: 5 },
      end: Position { line: 10, character: 20 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 33 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [Circular *6],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(4) { 'me', 'buffer', 'characters', 'ALPHA_NUMERIC' },
        assignments: [
          [ASTAssignmentStatement],
          [Circular *6],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 10, character: 7 },
        end: Position { line: 10, character: 16 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'buffer'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'me'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 10, character: 17 },
        end: Position { line: 10, character: 20 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        fields: [ [ASTListValue] ]
      }
    },
    11 => <ref *7> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 11, character: 5 },
      end: Position { line: 11, character: 37 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 33 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *7],
          [ASTReturnStatement]
        ],
        namespaces: Set(4) { 'me', 'buffer', 'characters', 'ALPHA_NUMERIC' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *7]
        ],
        parameters: []
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 11, character: 7 },
        end: Position { line: 11, character: 20 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'characters'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'me'
        }
      },
      init: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 11, character: 23 },
        end: Position { line: 11, character: 37 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'ALPHA_NUMERIC'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'me'
        }
      }
    },
    12 => <ref *8> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 12, character: 5 },
      end: Position { line: 12, character: 14 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 33 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *8]
        ],
        namespaces: Set(4) { 'me', 'buffer', 'characters', 'ALPHA_NUMERIC' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      argument: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 12, character: 12 },
        end: Position { line: 12, character: 14 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        name: 'me'
      }
    },
    8 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 8, character: 1 },
      end: Position { line: 13, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 8, character: 18 },
        end: Position { line: 8, character: 32 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'constructor'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 33 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(4) { 'me', 'buffer', 'characters', 'ALPHA_NUMERIC' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      }
    },
    16 => <ref *9> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 16, character: 5 },
      end: Position { line: 16, character: 14 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: [Circular *1],
        body: [
          [Circular *9],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(8) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'p',
          'increaseBuffer'
        },
        assignments: [
          [Circular *9],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 16, character: 5 },
        end: Position { line: 16, character: 7 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'me'
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 16, character: 10 },
        end: Position { line: 16, character: 14 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'self'
      }
    },
    17 => <ref *10> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 17, character: 5 },
      end: Position { line: 17, character: 34 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [Circular *10],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(8) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'p',
          'increaseBuffer'
        },
        assignments: [
          [ASTAssignmentStatement],
          [Circular *10],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 17, character: 5 },
        end: Position { line: 17, character: 22 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'currentCharBuffer'
      },
      init: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 17, character: 27 },
        end: Position { line: 17, character: 34 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'buffer'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'me'
        }
      }
    },
    18 => <ref *11> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 18, character: 5 },
      end: Position { line: 18, character: 38 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *11],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(8) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'p',
          'increaseBuffer'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *11],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 18, character: 5 },
        end: Position { line: 18, character: 18 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'maxBufferSize'
      },
      init: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 18, character: 34 },
        end: Position { line: 18, character: 38 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'len'
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        }
      }
    },
    19 => <ref *12> ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 19, character: 5 },
      end: Position { line: 19, character: 54 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *12],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(8) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'p',
          'increaseBuffer'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTEvaluationExpression]
        }
      ]
    },
    20 => <ref *13> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 20, character: 5 },
      end: Position { line: 20, character: 29 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [Circular *13],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(8) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'p',
          'increaseBuffer'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *13],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 20, character: 5 },
        end: Position { line: 20, character: 6 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'p'
      },
      init: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 20, character: 27 },
        end: Position { line: 20, character: 29 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'currentCharBuffer'
        },
        index: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'i'
        }
      }
    },
    21 => <ref *14> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 21, character: 5 },
      end: Position { line: 21, character: 14 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [Circular *14],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(8) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'p',
          'increaseBuffer'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *14],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 21, character: 5 },
        end: Position { line: 21, character: 6 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'p'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 21, character: 11 },
        end: Position { line: 21, character: 14 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '+',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'p'
        },
        right: ASTLiteral {
          type: 'NumericLiteral',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          value: 1,
          raw: '1'
        }
      }
    },
    22 => <ref *15> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 22, character: 5 },
      end: Position { line: 22, character: 29 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *15],
          [ASTIfStatement]
        ],
        namespaces: Set(8) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'p',
          'increaseBuffer'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *15],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 22, character: 23 },
        end: Position { line: 22, character: 27 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'currentCharBuffer'
        },
        index: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'i'
        }
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 22, character: 28 },
        end: Position { line: 22, character: 29 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'p'
      }
    },
    24 => <ref *16> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 24, character: 9 },
      end: Position { line: 24, character: 33 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(8) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'p',
          'increaseBuffer'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *16]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 24, character: 27 },
        end: Position { line: 24, character: 31 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'currentCharBuffer'
        },
        index: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'i'
        }
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 24, character: 32 },
        end: Position { line: 24, character: 33 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        value: 0,
        raw: '0'
      }
    },
    26 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 26, character: 13 },
      end: Position { line: 26, character: 38 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(8) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'p',
          'increaseBuffer'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 26, character: 35 },
        end: Position { line: 26, character: 38 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    28 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 28, character: 13 },
      end: Position { line: 28, character: 37 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(8) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'p',
          'increaseBuffer'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 28, character: 30 },
        end: Position { line: 28, character: 37 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTEvaluationExpression] ]
      }
    },
    25 => ASTIfStatement {
      type: 'IfStatement',
      start: Position { line: 25, character: 9 },
      end: Position { line: 29, character: 15 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(8) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'p',
          'increaseBuffer'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      clauses: [
        ASTIfClause {
          type: 'IfClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTEvaluationExpression]
        },
        ASTElseClause {
          type: 'ElseClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array]
        }
      ]
    },
    23 => <ref *17> ASTIfStatement {
      type: 'IfStatement',
      start: Position { line: 23, character: 5 },
      end: Position { line: 30, character: 11 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *17]
        ],
        namespaces: Set(8) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'p',
          'increaseBuffer'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      clauses: [
        ASTIfClause {
          type: 'IfClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTEvaluationExpression]
        }
      ]
    },
    15 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 15, character: 1 },
      end: Position { line: 31, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 15, character: 18 },
        end: Position { line: 15, character: 35 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'increaseBuffer'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(8) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'p',
          'increaseBuffer'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    34 => <ref *18> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 34, character: 5 },
      end: Position { line: 34, character: 14 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: [Circular *1],
        body: [
          [Circular *18],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(10) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH'
        },
        assignments: [
          [Circular *18],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 34, character: 5 },
        end: Position { line: 34, character: 7 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        name: 'me'
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 34, character: 10 },
        end: Position { line: 34, character: 14 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        name: 'self'
      }
    },
    35 => <ref *19> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 35, character: 5 },
      end: Position { line: 35, character: 34 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [Circular *19],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(10) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH'
        },
        assignments: [
          [ASTAssignmentStatement],
          [Circular *19],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 35, character: 5 },
        end: Position { line: 35, character: 22 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        name: 'currentCharBuffer'
      },
      init: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 35, character: 27 },
        end: Position { line: 35, character: 34 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'buffer'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'me'
        }
      }
    },
    36 => <ref *20> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 36, character: 5 },
      end: Position { line: 36, character: 40 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *20],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(10) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *20],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 36, character: 5 },
        end: Position { line: 36, character: 24 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        name: 'generatorCharacters'
      },
      init: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 36, character: 29 },
        end: Position { line: 36, character: 40 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'characters'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'me'
        }
      }
    },
    37 => <ref *21> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 37, character: 5 },
      end: Position { line: 37, character: 18 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *21],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(10) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *21],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 37, character: 5 },
        end: Position { line: 37, character: 13 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        name: 'password'
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 37, character: 16 },
        end: Position { line: 37, character: 18 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        value: '',
        raw: '\\"\\"'
      }
    },
    38 => <ref *22> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 38, character: 5 },
      end: Position { line: 38, character: 14 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *22],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(10) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *22],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 38, character: 5 },
        end: Position { line: 38, character: 10 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        name: 'index'
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 38, character: 13 },
        end: Position { line: 38, character: 14 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        value: 0,
        raw: '0'
      }
    },
    41 => <ref *23> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 41, character: 9 },
      end: Position { line: 41, character: 43 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(10) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *23],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 41, character: 9 },
        end: Position { line: 41, character: 16 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        name: 'pointer'
      },
      init: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 41, character: 37 },
        end: Position { line: 41, character: 43 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'currentCharBuffer'
        },
        index: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'index'
        }
      }
    },
    42 => <ref *24> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 42, character: 9 },
      end: Position { line: 42, character: 59 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(10) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *24],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 42, character: 9 },
        end: Position { line: 42, character: 17 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        name: 'password'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 42, character: 29 },
        end: Position { line: 42, character: 59 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        operator: '+',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'password'
        },
        right: ASTIndexExpression {
          type: 'IndexExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          base: [ASTIdentifier],
          index: [ASTIdentifier]
        }
      }
    },
    43 => ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 43, character: 9 },
      end: Position { line: 43, character: 75 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(10) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTEvaluationExpression]
        }
      ]
    },
    44 => <ref *25> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 44, character: 9 },
      end: Position { line: 44, character: 26 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(10) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *25]
        ],
        parameters: []
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 44, character: 9 },
        end: Position { line: 44, character: 14 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        name: 'index'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 44, character: 23 },
        end: Position { line: 44, character: 26 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        operator: '+',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'index'
        },
        right: ASTLiteral {
          type: 'NumericLiteral',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          value: 1,
          raw: '1'
        }
      }
    },
    40 => <ref *26> ASTWhileStatement {
      type: 'WhileStatement',
      start: Position { line: 40, character: 5 },
      end: Position { line: 45, character: 14 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *26],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(10) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      body: [
        <ref *23> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTIndexExpression]
        },
        <ref *24> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTIfStatement {
          type: 'IfShortcutStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          clauses: [Array]
        },
        <ref *25> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        }
      ],
      condition: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 40, character: 17 },
        end: Position { line: 40, character: 40 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        operator: '<',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'index'
        },
        right: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        }
      }
    },
    48 => ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 48, character: 9 },
      end: Position { line: 48, character: 20 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(10) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      argument: ASTLiteral {
        type: 'NilLiteral',
        start: Position { line: 48, character: 16 },
        end: Position { line: 48, character: 20 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        value: null,
        raw: 'null'
      }
    },
    47 => <ref *27> ASTIfStatement {
      type: 'IfStatement',
      start: Position { line: 47, character: 5 },
      end: Position { line: 49, character: 11 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [Circular *27],
          [ASTReturnStatement]
        ],
        namespaces: Set(10) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      clauses: [
        ASTIfClause {
          type: 'IfClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTEvaluationExpression]
        }
      ]
    },
    51 => <ref *28> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 51, character: 5 },
      end: Position { line: 51, character: 20 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [Circular *28]
        ],
        namespaces: Set(10) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      argument: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 51, character: 12 },
        end: Position { line: 51, character: 20 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        name: 'password'
      }
    },
    33 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 33, character: 1 },
      end: Position { line: 52, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 33, character: 18 },
        end: Position { line: 33, character: 24 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'gen'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(10) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      }
    },
    54 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 54, character: 1 },
      end: Position { line: 54, character: 45 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 54, character: 1 },
        end: Position { line: 54, character: 5 },
        scope: [Circular *1],
        name: 'pgen'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 54, character: 43 },
        end: Position { line: 54, character: 45 },
        scope: [Circular *1],
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTUnaryExpression]
        },
        arguments: []
      }
    },
    56 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 56, character: 1 },
      end: Position { line: 56, character: 10 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 56, character: 1 },
        end: Position { line: 56, character: 6 },
        scope: [Circular *1],
        name: 'index'
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 56, character: 9 },
        end: Position { line: 56, character: 10 },
        scope: [Circular *1],
        value: 0,
        raw: '0'
      }
    },
    57 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 57, character: 1 },
      end: Position { line: 57, character: 9 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 57, character: 1 },
        end: Position { line: 57, character: 4 },
        scope: [Circular *1],
        name: 'max'
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 57, character: 7 },
        end: Position { line: 57, character: 9 },
        scope: [Circular *1],
        value: 10,
        raw: '10'
      }
    },
    58 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 58, character: 1 },
      end: Position { line: 58, character: 12 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 58, character: 1 },
        end: Position { line: 58, character: 7 },
        scope: [Circular *1],
        name: 'result'
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 58, character: 10 },
        end: Position { line: 58, character: 12 },
        scope: [Circular *1],
        fields: []
      }
    },
    61 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 61, character: 5 },
      end: Position { line: 61, character: 28 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 61, character: 16 },
        end: Position { line: 61, character: 28 },
        scope: [Circular *1],
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTCallExpression] ]
      }
    },
    62 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 62, character: 5 },
      end: Position { line: 62, character: 22 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 62, character: 5 },
        end: Position { line: 62, character: 10 },
        scope: [Circular *1],
        name: 'index'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 62, character: 19 },
        end: Position { line: 62, character: 22 },
        scope: [Circular *1],
        operator: '+',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'index'
        },
        right: ASTLiteral {
          type: 'NumericLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: 1,
          raw: '1'
        }
      }
    },
    60 => ASTWhileStatement {
      type: 'WhileStatement',
      start: Position { line: 60, character: 1 },
      end: Position { line: 63, character: 10 },
      scope: [Circular *1],
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          expression: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        }
      ],
      condition: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 60, character: 14 },
        end: Position { line: 60, character: 20 },
        scope: [Circular *1],
        operator: '<',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'index'
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'max'
        }
      }
    },
    65 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 65, character: 1 },
      end: Position { line: 65, character: 14 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 65, character: 6 },
        end: Position { line: 65, character: 14 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTIdentifier] ]
      }
    }
  }
}"
`;

exports[`parse default scripts password-generator.src unsafe 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 65, character: 14 },
  scope: null,
  body: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 23 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 18 },
        scope: [Circular *1],
        name: 'PasswordGenerator'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 21 },
        end: Position { line: 1, character: 23 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 43 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 3, character: 18 },
        end: Position { line: 3, character: 40 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'MAX_PASSWORD_LENGTH'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 3, character: 41 },
        end: Position { line: 3, character: 43 },
        scope: [Circular *1],
        value: 15,
        raw: '15'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 4, character: 71 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 4, character: 18 },
        end: Position { line: 4, character: 42 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'ALPHABETIC_CHARACTERS'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 4, character: 43 },
        end: Position { line: 4, character: 71 },
        scope: [Circular *1],
        value: 'qwertzuiopasdfghjklyxcvbnm',
        raw: '\\"qwertzuiopasdfghjklyxcvbnm\\"'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 5, character: 1 },
      end: Position { line: 5, character: 51 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 5, character: 18 },
        end: Position { line: 5, character: 38 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'NUMBER_CHARACTERS'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 5, character: 39 },
        end: Position { line: 5, character: 51 },
        scope: [Circular *1],
        value: '0123456789',
        raw: '\\"0123456789\\"'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 6, character: 1 },
      end: Position { line: 6, character: 160 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 6, character: 18 },
        end: Position { line: 6, character: 34 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'ALPHA_NUMERIC'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 6, character: 75 },
        end: Position { line: 6, character: 160 },
        scope: [Circular *1],
        operator: '+',
        left: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '+',
          left: [ASTMemberExpression],
          right: [ASTMemberExpression]
        },
        right: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        }
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 8, character: 1 },
      end: Position { line: 13, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 8, character: 18 },
        end: Position { line: 8, character: 32 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'constructor'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 33 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(4) { 'me', 'buffer', 'characters', 'ALPHA_NUMERIC' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 15, character: 1 },
      end: Position { line: 31, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 15, character: 18 },
        end: Position { line: 15, character: 35 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'increaseBuffer'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(8) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'p',
          'increaseBuffer'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 33, character: 1 },
      end: Position { line: 52, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 33, character: 18 },
        end: Position { line: 33, character: 24 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'gen'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(10) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 54, character: 1 },
      end: Position { line: 54, character: 45 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 54, character: 1 },
        end: Position { line: 54, character: 5 },
        scope: [Circular *1],
        name: 'pgen'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 54, character: 43 },
        end: Position { line: 54, character: 45 },
        scope: [Circular *1],
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTUnaryExpression]
        },
        arguments: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 56, character: 1 },
      end: Position { line: 56, character: 10 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 56, character: 1 },
        end: Position { line: 56, character: 6 },
        scope: [Circular *1],
        name: 'index'
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 56, character: 9 },
        end: Position { line: 56, character: 10 },
        scope: [Circular *1],
        value: 0,
        raw: '0'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 57, character: 1 },
      end: Position { line: 57, character: 9 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 57, character: 1 },
        end: Position { line: 57, character: 4 },
        scope: [Circular *1],
        name: 'max'
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 57, character: 7 },
        end: Position { line: 57, character: 9 },
        scope: [Circular *1],
        value: 10,
        raw: '10'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 58, character: 1 },
      end: Position { line: 58, character: 12 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 58, character: 1 },
        end: Position { line: 58, character: 7 },
        scope: [Circular *1],
        name: 'result'
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 58, character: 10 },
        end: Position { line: 58, character: 12 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTWhileStatement {
      type: 'WhileStatement',
      start: Position { line: 60, character: 1 },
      end: Position { line: 63, character: 10 },
      scope: [Circular *1],
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          expression: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        }
      ],
      condition: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 60, character: 14 },
        end: Position { line: 60, character: 20 },
        scope: [Circular *1],
        operator: '<',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'index'
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'max'
        }
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 65, character: 1 },
      end: Position { line: 65, character: 14 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 65, character: 6 },
        end: Position { line: 65, character: 14 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTIdentifier] ]
      }
    }
  ],
  namespaces: Set(12) {
    'PasswordGenerator',
    'MAX_PASSWORD_LENGTH',
    'ALPHABETIC_CHARACTERS',
    'NUMBER_CHARACTERS',
    'ALPHA_NUMERIC',
    'constructor',
    'increaseBuffer',
    'gen',
    'pgen',
    'index',
    'max',
    'result'
  },
  assignments: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 23 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 18 },
        scope: [Circular *1],
        name: 'PasswordGenerator'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 21 },
        end: Position { line: 1, character: 23 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 43 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 3, character: 18 },
        end: Position { line: 3, character: 40 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'MAX_PASSWORD_LENGTH'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 3, character: 41 },
        end: Position { line: 3, character: 43 },
        scope: [Circular *1],
        value: 15,
        raw: '15'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 4, character: 71 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 4, character: 18 },
        end: Position { line: 4, character: 42 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'ALPHABETIC_CHARACTERS'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 4, character: 43 },
        end: Position { line: 4, character: 71 },
        scope: [Circular *1],
        value: 'qwertzuiopasdfghjklyxcvbnm',
        raw: '\\"qwertzuiopasdfghjklyxcvbnm\\"'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 5, character: 1 },
      end: Position { line: 5, character: 51 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 5, character: 18 },
        end: Position { line: 5, character: 38 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'NUMBER_CHARACTERS'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 5, character: 39 },
        end: Position { line: 5, character: 51 },
        scope: [Circular *1],
        value: '0123456789',
        raw: '\\"0123456789\\"'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 6, character: 1 },
      end: Position { line: 6, character: 160 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 6, character: 18 },
        end: Position { line: 6, character: 34 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'ALPHA_NUMERIC'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 6, character: 75 },
        end: Position { line: 6, character: 160 },
        scope: [Circular *1],
        operator: '+',
        left: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '+',
          left: [ASTMemberExpression],
          right: [ASTMemberExpression]
        },
        right: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        }
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 8, character: 1 },
      end: Position { line: 13, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 8, character: 18 },
        end: Position { line: 8, character: 32 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'constructor'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 33 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(4) { 'me', 'buffer', 'characters', 'ALPHA_NUMERIC' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 15, character: 1 },
      end: Position { line: 31, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 15, character: 18 },
        end: Position { line: 15, character: 35 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'increaseBuffer'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(8) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'p',
          'increaseBuffer'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 33, character: 1 },
      end: Position { line: 52, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 33, character: 18 },
        end: Position { line: 33, character: 24 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'gen'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(10) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 54, character: 1 },
      end: Position { line: 54, character: 45 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 54, character: 1 },
        end: Position { line: 54, character: 5 },
        scope: [Circular *1],
        name: 'pgen'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 54, character: 43 },
        end: Position { line: 54, character: 45 },
        scope: [Circular *1],
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTUnaryExpression]
        },
        arguments: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 56, character: 1 },
      end: Position { line: 56, character: 10 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 56, character: 1 },
        end: Position { line: 56, character: 6 },
        scope: [Circular *1],
        name: 'index'
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 56, character: 9 },
        end: Position { line: 56, character: 10 },
        scope: [Circular *1],
        value: 0,
        raw: '0'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 57, character: 1 },
      end: Position { line: 57, character: 9 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 57, character: 1 },
        end: Position { line: 57, character: 4 },
        scope: [Circular *1],
        name: 'max'
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 57, character: 7 },
        end: Position { line: 57, character: 9 },
        scope: [Circular *1],
        value: 10,
        raw: '10'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 58, character: 1 },
      end: Position { line: 58, character: 12 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 58, character: 1 },
        end: Position { line: 58, character: 7 },
        scope: [Circular *1],
        name: 'result'
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 58, character: 10 },
        end: Position { line: 58, character: 12 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 62, character: 5 },
      end: Position { line: 62, character: 22 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 62, character: 5 },
        end: Position { line: 62, character: 10 },
        scope: [Circular *1],
        name: 'index'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 62, character: 19 },
        end: Position { line: 62, character: 22 },
        scope: [Circular *1],
        operator: '+',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'index'
        },
        right: ASTLiteral {
          type: 'NumericLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: 1,
          raw: '1'
        }
      }
    }
  ],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 3, character: 41 },
      end: Position { line: 3, character: 43 },
      scope: [Circular *1],
      value: 15,
      raw: '15'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 4, character: 43 },
      end: Position { line: 4, character: 71 },
      scope: [Circular *1],
      value: 'qwertzuiopasdfghjklyxcvbnm',
      raw: '\\"qwertzuiopasdfghjklyxcvbnm\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 5, character: 39 },
      end: Position { line: 5, character: 51 },
      scope: [Circular *1],
      value: '0123456789',
      raw: '\\"0123456789\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 10, character: 18 },
      end: Position { line: 10, character: 19 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 33 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(4) { 'me', 'buffer', 'characters', 'ALPHA_NUMERIC' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NilLiteral',
      start: Position { line: 19, character: 14 },
      end: Position { line: 19, character: 18 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(8) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'p',
          'increaseBuffer'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      value: null,
      raw: 'null'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 19, character: 53 },
      end: Position { line: 19, character: 54 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(8) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'p',
          'increaseBuffer'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 21, character: 13 },
      end: Position { line: 21, character: 14 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(8) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'p',
          'increaseBuffer'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 24, character: 32 },
      end: Position { line: 24, character: 33 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(8) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'p',
          'increaseBuffer'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 25, character: 18 },
      end: Position { line: 25, character: 19 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(8) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'p',
          'increaseBuffer'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 26, character: 36 },
      end: Position { line: 26, character: 37 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(8) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'p',
          'increaseBuffer'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 28, character: 35 },
      end: Position { line: 28, character: 36 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(8) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'p',
          'increaseBuffer'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 37, character: 16 },
      end: Position { line: 37, character: 18 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(10) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      value: '',
      raw: '\\"\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 38, character: 13 },
      end: Position { line: 38, character: 14 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(10) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 43, character: 46 },
      end: Position { line: 43, character: 47 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(10) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 44, character: 25 },
      end: Position { line: 44, character: 26 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(10) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NilLiteral',
      start: Position { line: 48, character: 16 },
      end: Position { line: 48, character: 20 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(10) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      value: null,
      raw: 'null'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 56, character: 9 },
      end: Position { line: 56, character: 10 },
      scope: [Circular *1],
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 57, character: 7 },
      end: Position { line: 57, character: 9 },
      scope: [Circular *1],
      value: 10,
      raw: '10'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 62, character: 21 },
      end: Position { line: 62, character: 22 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    }
  ],
  scopes: [
    <ref *2> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 8, character: 33 },
      end: Position { line: 13, character: 13 },
      scope: [Circular *1],
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTMemberExpression],
          init: [ASTListConstructorExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTMemberExpression],
          init: [ASTMemberExpression]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          argument: [ASTIdentifier]
        }
      ],
      namespaces: Set(4) { 'me', 'buffer', 'characters', 'ALPHA_NUMERIC' },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTMemberExpression],
          init: [ASTListConstructorExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTMemberExpression],
          init: [ASTMemberExpression]
        }
      ],
      parameters: []
    },
    <ref *3> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 15, character: 36 },
      end: Position { line: 31, character: 13 },
      scope: [Circular *1],
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTIfStatement {
          type: 'IfShortcutStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          clauses: [Array]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTIndexExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIndexExpression],
          init: [ASTIdentifier]
        },
        ASTIfStatement {
          type: 'IfStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          clauses: [Array]
        }
      ],
      namespaces: Set(8) {
        'i',
        'me',
        'currentCharBuffer',
        'buffer',
        'maxBufferSize',
        'characters',
        'p',
        'increaseBuffer'
      },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTIndexExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIndexExpression],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIndexExpression],
          init: [ASTLiteral]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          name: 'i'
        }
      ]
    },
    <ref *4> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 33, character: 25 },
      end: Position { line: 52, character: 13 },
      scope: [Circular *1],
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTWhileStatement {
          type: 'WhileStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          body: [Array],
          condition: [ASTEvaluationExpression]
        },
        ASTIfStatement {
          type: 'IfStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          clauses: [Array]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          argument: [ASTIdentifier]
        }
      ],
      namespaces: Set(10) {
        'me',
        'currentCharBuffer',
        'buffer',
        'generatorCharacters',
        'characters',
        'password',
        'index',
        'pointer',
        'increaseBuffer',
        'MAX_PASSWORD_LENGTH'
      },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIdentifier],
          init: [ASTIndexExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        }
      ],
      parameters: []
    }
  ],
  lines: Map(45) {
    1 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 23 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 18 },
        scope: [Circular *1],
        name: 'PasswordGenerator'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 21 },
        end: Position { line: 1, character: 23 },
        scope: [Circular *1],
        fields: []
      }
    },
    3 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 43 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 3, character: 18 },
        end: Position { line: 3, character: 40 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'MAX_PASSWORD_LENGTH'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 3, character: 41 },
        end: Position { line: 3, character: 43 },
        scope: [Circular *1],
        value: 15,
        raw: '15'
      }
    },
    4 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 4, character: 71 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 4, character: 18 },
        end: Position { line: 4, character: 42 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'ALPHABETIC_CHARACTERS'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 4, character: 43 },
        end: Position { line: 4, character: 71 },
        scope: [Circular *1],
        value: 'qwertzuiopasdfghjklyxcvbnm',
        raw: '\\"qwertzuiopasdfghjklyxcvbnm\\"'
      }
    },
    5 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 5, character: 1 },
      end: Position { line: 5, character: 51 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 5, character: 18 },
        end: Position { line: 5, character: 38 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'NUMBER_CHARACTERS'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 5, character: 39 },
        end: Position { line: 5, character: 51 },
        scope: [Circular *1],
        value: '0123456789',
        raw: '\\"0123456789\\"'
      }
    },
    6 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 6, character: 1 },
      end: Position { line: 6, character: 160 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 6, character: 18 },
        end: Position { line: 6, character: 34 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'ALPHA_NUMERIC'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 6, character: 75 },
        end: Position { line: 6, character: 160 },
        scope: [Circular *1],
        operator: '+',
        left: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          operator: '+',
          left: [ASTMemberExpression],
          right: [ASTMemberExpression]
        },
        right: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        }
      }
    },
    9 => <ref *5> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 9, character: 5 },
      end: Position { line: 9, character: 14 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 33 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [Circular *5],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(4) { 'me', 'buffer', 'characters', 'ALPHA_NUMERIC' },
        assignments: [
          [Circular *5],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 9, character: 5 },
        end: Position { line: 9, character: 7 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        name: 'me'
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 9, character: 10 },
        end: Position { line: 9, character: 14 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        name: 'self'
      }
    },
    10 => <ref *6> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 10, character: 5 },
      end: Position { line: 10, character: 20 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 33 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [Circular *6],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(4) { 'me', 'buffer', 'characters', 'ALPHA_NUMERIC' },
        assignments: [
          [ASTAssignmentStatement],
          [Circular *6],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 10, character: 7 },
        end: Position { line: 10, character: 16 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'buffer'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'me'
        }
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 10, character: 17 },
        end: Position { line: 10, character: 20 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        fields: [ [ASTListValue] ]
      }
    },
    11 => <ref *7> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 11, character: 5 },
      end: Position { line: 11, character: 37 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 33 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *7],
          [ASTReturnStatement]
        ],
        namespaces: Set(4) { 'me', 'buffer', 'characters', 'ALPHA_NUMERIC' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *7]
        ],
        parameters: []
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 11, character: 7 },
        end: Position { line: 11, character: 20 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'characters'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'me'
        }
      },
      init: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 11, character: 23 },
        end: Position { line: 11, character: 37 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'ALPHA_NUMERIC'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'me'
        }
      }
    },
    12 => <ref *8> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 12, character: 5 },
      end: Position { line: 12, character: 14 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 33 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *8]
        ],
        namespaces: Set(4) { 'me', 'buffer', 'characters', 'ALPHA_NUMERIC' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      argument: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 12, character: 12 },
        end: Position { line: 12, character: 14 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        name: 'me'
      }
    },
    8 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 8, character: 1 },
      end: Position { line: 13, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 8, character: 18 },
        end: Position { line: 8, character: 32 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'constructor'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 33 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(4) { 'me', 'buffer', 'characters', 'ALPHA_NUMERIC' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      }
    },
    16 => <ref *9> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 16, character: 5 },
      end: Position { line: 16, character: 14 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: [Circular *1],
        body: [
          [Circular *9],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(8) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'p',
          'increaseBuffer'
        },
        assignments: [
          [Circular *9],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 16, character: 5 },
        end: Position { line: 16, character: 7 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'me'
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 16, character: 10 },
        end: Position { line: 16, character: 14 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'self'
      }
    },
    17 => <ref *10> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 17, character: 5 },
      end: Position { line: 17, character: 34 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [Circular *10],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(8) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'p',
          'increaseBuffer'
        },
        assignments: [
          [ASTAssignmentStatement],
          [Circular *10],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 17, character: 5 },
        end: Position { line: 17, character: 22 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'currentCharBuffer'
      },
      init: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 17, character: 27 },
        end: Position { line: 17, character: 34 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'buffer'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'me'
        }
      }
    },
    18 => <ref *11> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 18, character: 5 },
      end: Position { line: 18, character: 38 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *11],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(8) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'p',
          'increaseBuffer'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *11],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 18, character: 5 },
        end: Position { line: 18, character: 18 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'maxBufferSize'
      },
      init: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 18, character: 34 },
        end: Position { line: 18, character: 38 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'len'
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        }
      }
    },
    19 => <ref *12> ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 19, character: 5 },
      end: Position { line: 19, character: 54 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *12],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(8) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'p',
          'increaseBuffer'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTEvaluationExpression]
        }
      ]
    },
    20 => <ref *13> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 20, character: 5 },
      end: Position { line: 20, character: 29 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [Circular *13],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(8) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'p',
          'increaseBuffer'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *13],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 20, character: 5 },
        end: Position { line: 20, character: 6 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'p'
      },
      init: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 20, character: 27 },
        end: Position { line: 20, character: 29 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'currentCharBuffer'
        },
        index: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'i'
        }
      }
    },
    21 => <ref *14> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 21, character: 5 },
      end: Position { line: 21, character: 14 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [Circular *14],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(8) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'p',
          'increaseBuffer'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *14],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 21, character: 5 },
        end: Position { line: 21, character: 6 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'p'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 21, character: 11 },
        end: Position { line: 21, character: 14 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '+',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'p'
        },
        right: ASTLiteral {
          type: 'NumericLiteral',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          value: 1,
          raw: '1'
        }
      }
    },
    22 => <ref *15> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 22, character: 5 },
      end: Position { line: 22, character: 29 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *15],
          [ASTIfStatement]
        ],
        namespaces: Set(8) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'p',
          'increaseBuffer'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *15],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 22, character: 23 },
        end: Position { line: 22, character: 27 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'currentCharBuffer'
        },
        index: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'i'
        }
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 22, character: 28 },
        end: Position { line: 22, character: 29 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'p'
      }
    },
    24 => <ref *16> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 24, character: 9 },
      end: Position { line: 24, character: 33 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(8) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'p',
          'increaseBuffer'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *16]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 24, character: 27 },
        end: Position { line: 24, character: 31 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'currentCharBuffer'
        },
        index: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'i'
        }
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 24, character: 32 },
        end: Position { line: 24, character: 33 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        value: 0,
        raw: '0'
      }
    },
    26 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 26, character: 13 },
      end: Position { line: 26, character: 38 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(8) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'p',
          'increaseBuffer'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 26, character: 35 },
        end: Position { line: 26, character: 38 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    28 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 28, character: 13 },
      end: Position { line: 28, character: 37 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(8) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'p',
          'increaseBuffer'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 28, character: 30 },
        end: Position { line: 28, character: 37 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTEvaluationExpression] ]
      }
    },
    25 => ASTIfStatement {
      type: 'IfStatement',
      start: Position { line: 25, character: 9 },
      end: Position { line: 29, character: 15 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(8) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'p',
          'increaseBuffer'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      clauses: [
        ASTIfClause {
          type: 'IfClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTEvaluationExpression]
        },
        ASTElseClause {
          type: 'ElseClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array]
        }
      ]
    },
    23 => <ref *17> ASTIfStatement {
      type: 'IfStatement',
      start: Position { line: 23, character: 5 },
      end: Position { line: 30, character: 11 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *17]
        ],
        namespaces: Set(8) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'p',
          'increaseBuffer'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      clauses: [
        ASTIfClause {
          type: 'IfClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTEvaluationExpression]
        }
      ]
    },
    15 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 15, character: 1 },
      end: Position { line: 31, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 15, character: 18 },
        end: Position { line: 15, character: 35 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'increaseBuffer'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 15, character: 36 },
        end: Position { line: 31, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement]
        ],
        namespaces: Set(8) {
          'i',
          'me',
          'currentCharBuffer',
          'buffer',
          'maxBufferSize',
          'characters',
          'p',
          'increaseBuffer'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    34 => <ref *18> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 34, character: 5 },
      end: Position { line: 34, character: 14 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: [Circular *1],
        body: [
          [Circular *18],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(10) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH'
        },
        assignments: [
          [Circular *18],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 34, character: 5 },
        end: Position { line: 34, character: 7 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        name: 'me'
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 34, character: 10 },
        end: Position { line: 34, character: 14 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        name: 'self'
      }
    },
    35 => <ref *19> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 35, character: 5 },
      end: Position { line: 35, character: 34 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [Circular *19],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(10) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH'
        },
        assignments: [
          [ASTAssignmentStatement],
          [Circular *19],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 35, character: 5 },
        end: Position { line: 35, character: 22 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        name: 'currentCharBuffer'
      },
      init: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 35, character: 27 },
        end: Position { line: 35, character: 34 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'buffer'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'me'
        }
      }
    },
    36 => <ref *20> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 36, character: 5 },
      end: Position { line: 36, character: 40 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *20],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(10) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *20],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 36, character: 5 },
        end: Position { line: 36, character: 24 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        name: 'generatorCharacters'
      },
      init: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 36, character: 29 },
        end: Position { line: 36, character: 40 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'characters'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'me'
        }
      }
    },
    37 => <ref *21> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 37, character: 5 },
      end: Position { line: 37, character: 18 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *21],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(10) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *21],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 37, character: 5 },
        end: Position { line: 37, character: 13 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        name: 'password'
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 37, character: 16 },
        end: Position { line: 37, character: 18 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        value: '',
        raw: '\\"\\"'
      }
    },
    38 => <ref *22> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 38, character: 5 },
      end: Position { line: 38, character: 14 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *22],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(10) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *22],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 38, character: 5 },
        end: Position { line: 38, character: 10 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        name: 'index'
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 38, character: 13 },
        end: Position { line: 38, character: 14 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        value: 0,
        raw: '0'
      }
    },
    41 => <ref *23> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 41, character: 9 },
      end: Position { line: 41, character: 43 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(10) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *23],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 41, character: 9 },
        end: Position { line: 41, character: 16 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        name: 'pointer'
      },
      init: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 41, character: 37 },
        end: Position { line: 41, character: 43 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'currentCharBuffer'
        },
        index: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'index'
        }
      }
    },
    42 => <ref *24> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 42, character: 9 },
      end: Position { line: 42, character: 59 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(10) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *24],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 42, character: 9 },
        end: Position { line: 42, character: 17 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        name: 'password'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 42, character: 29 },
        end: Position { line: 42, character: 59 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        operator: '+',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'password'
        },
        right: ASTIndexExpression {
          type: 'IndexExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          base: [ASTIdentifier],
          index: [ASTIdentifier]
        }
      }
    },
    43 => ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 43, character: 9 },
      end: Position { line: 43, character: 75 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(10) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTEvaluationExpression]
        }
      ]
    },
    44 => <ref *25> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 44, character: 9 },
      end: Position { line: 44, character: 26 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(10) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *25]
        ],
        parameters: []
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 44, character: 9 },
        end: Position { line: 44, character: 14 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        name: 'index'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 44, character: 23 },
        end: Position { line: 44, character: 26 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        operator: '+',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'index'
        },
        right: ASTLiteral {
          type: 'NumericLiteral',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          value: 1,
          raw: '1'
        }
      }
    },
    40 => <ref *26> ASTWhileStatement {
      type: 'WhileStatement',
      start: Position { line: 40, character: 5 },
      end: Position { line: 45, character: 14 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *26],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(10) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      body: [
        <ref *23> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTIndexExpression]
        },
        <ref *24> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTIfStatement {
          type: 'IfShortcutStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          clauses: [Array]
        },
        <ref *25> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        }
      ],
      condition: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 40, character: 17 },
        end: Position { line: 40, character: 40 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        operator: '<',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'index'
        },
        right: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        }
      }
    },
    48 => ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 48, character: 9 },
      end: Position { line: 48, character: 20 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(10) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      argument: ASTLiteral {
        type: 'NilLiteral',
        start: Position { line: 48, character: 16 },
        end: Position { line: 48, character: 20 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        value: null,
        raw: 'null'
      }
    },
    47 => <ref *27> ASTIfStatement {
      type: 'IfStatement',
      start: Position { line: 47, character: 5 },
      end: Position { line: 49, character: 11 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [Circular *27],
          [ASTReturnStatement]
        ],
        namespaces: Set(10) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      clauses: [
        ASTIfClause {
          type: 'IfClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTEvaluationExpression]
        }
      ]
    },
    51 => <ref *28> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 51, character: 5 },
      end: Position { line: 51, character: 20 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [Circular *28]
        ],
        namespaces: Set(10) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      },
      argument: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 51, character: 12 },
        end: Position { line: 51, character: 20 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: []
        },
        name: 'password'
      }
    },
    33 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 33, character: 1 },
      end: Position { line: 52, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 33, character: 18 },
        end: Position { line: 33, character: 24 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'gen'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'PasswordGenerator'
        }
      },
      init: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 25 },
        end: Position { line: 52, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(10) {
          'me',
          'currentCharBuffer',
          'buffer',
          'generatorCharacters',
          'characters',
          'password',
          'index',
          'pointer',
          'increaseBuffer',
          'MAX_PASSWORD_LENGTH'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: []
      }
    },
    54 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 54, character: 1 },
      end: Position { line: 54, character: 45 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 54, character: 1 },
        end: Position { line: 54, character: 5 },
        scope: [Circular *1],
        name: 'pgen'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 54, character: 43 },
        end: Position { line: 54, character: 45 },
        scope: [Circular *1],
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTUnaryExpression]
        },
        arguments: []
      }
    },
    56 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 56, character: 1 },
      end: Position { line: 56, character: 10 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 56, character: 1 },
        end: Position { line: 56, character: 6 },
        scope: [Circular *1],
        name: 'index'
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 56, character: 9 },
        end: Position { line: 56, character: 10 },
        scope: [Circular *1],
        value: 0,
        raw: '0'
      }
    },
    57 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 57, character: 1 },
      end: Position { line: 57, character: 9 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 57, character: 1 },
        end: Position { line: 57, character: 4 },
        scope: [Circular *1],
        name: 'max'
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 57, character: 7 },
        end: Position { line: 57, character: 9 },
        scope: [Circular *1],
        value: 10,
        raw: '10'
      }
    },
    58 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 58, character: 1 },
      end: Position { line: 58, character: 12 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 58, character: 1 },
        end: Position { line: 58, character: 7 },
        scope: [Circular *1],
        name: 'result'
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 58, character: 10 },
        end: Position { line: 58, character: 12 },
        scope: [Circular *1],
        fields: []
      }
    },
    61 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 61, character: 5 },
      end: Position { line: 61, character: 28 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 61, character: 16 },
        end: Position { line: 61, character: 28 },
        scope: [Circular *1],
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTCallExpression] ]
      }
    },
    62 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 62, character: 5 },
      end: Position { line: 62, character: 22 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 62, character: 5 },
        end: Position { line: 62, character: 10 },
        scope: [Circular *1],
        name: 'index'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 62, character: 19 },
        end: Position { line: 62, character: 22 },
        scope: [Circular *1],
        operator: '+',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'index'
        },
        right: ASTLiteral {
          type: 'NumericLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: 1,
          raw: '1'
        }
      }
    },
    60 => ASTWhileStatement {
      type: 'WhileStatement',
      start: Position { line: 60, character: 1 },
      end: Position { line: 63, character: 10 },
      scope: [Circular *1],
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          expression: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        }
      ],
      condition: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 60, character: 14 },
        end: Position { line: 60, character: 20 },
        scope: [Circular *1],
        operator: '<',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'index'
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'max'
        }
      }
    },
    65 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 65, character: 1 },
      end: Position { line: 65, character: 14 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 65, character: 6 },
        end: Position { line: 65, character: 14 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTIdentifier] ]
      }
    }
  }
}"
`;

exports[`parse default scripts pseudo-crypto.src 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 213, character: 1 },
  scope: null,
  body: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 12 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 7 },
        scope: [Circular *1],
        name: 'String'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 10 },
        end: Position { line: 1, character: 12 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 6, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 3, character: 7 },
        end: Position { line: 3, character: 21 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'constructor'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 3, character: 22 },
        end: Position { line: 6, character: 13 },
        scope: [Circular *1],
        body: [ [ASTAssignmentStatement], [ASTReturnStatement] ],
        namespaces: Set(0) {},
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 8, character: 1 },
      end: Position { line: 19, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 8, character: 7 },
        end: Position { line: 8, character: 15 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'parse'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 16 },
        end: Position { line: 19, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) {
          'result',
          'index',
          'maxIndex',
          'replace',
          'constructor'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 21, character: 1 },
      end: Position { line: 23, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 21, character: 7 },
        end: Position { line: 21, character: 20 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'startsWith'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 21, character: 21 },
        end: Position { line: 23, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(0) {},
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 25, character: 1 },
      end: Position { line: 27, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 25, character: 7 },
        end: Position { line: 25, character: 16 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'substr'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 25, character: 17 },
        end: Position { line: 27, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'startIndex', 'endIndex', 'constructor' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 29, character: 1 },
      end: Position { line: 31, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 29, character: 7 },
        end: Position { line: 29, character: 17 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'indexOf'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 29, character: 18 },
        end: Position { line: 31, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(0) {},
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 33, character: 1 },
      end: Position { line: 35, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 33, character: 7 },
        end: Position { line: 33, character: 17 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'replace'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 18 },
        end: Position { line: 35, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'newStr', 'constructor', 'replace' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 37, character: 1 },
      end: Position { line: 39, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 37, character: 7 },
        end: Position { line: 37, character: 16 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'remove'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 37, character: 17 },
        end: Position { line: 39, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'constructor' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 41, character: 1 },
      end: Position { line: 43, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 41, character: 7 },
        end: Position { line: 41, character: 18 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'toString'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 41, character: 19 },
        end: Position { line: 43, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(0) {},
        assignments: [],
        parameters: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 45, character: 1 },
      end: Position { line: 47, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 45, character: 7 },
        end: Position { line: 45, character: 16 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'length'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 17 },
        end: Position { line: 47, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(0) {},
        assignments: [],
        parameters: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 49, character: 1 },
      end: Position { line: 51, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 49, character: 7 },
        end: Position { line: 49, character: 15 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'split'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 49, character: 16 },
        end: Position { line: 51, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(2) { 'seperator', 'split' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 53, character: 1 },
      end: Position { line: 55, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 53, character: 7 },
        end: Position { line: 53, character: 14 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'trim'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 53, character: 15 },
        end: Position { line: 55, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'seperator', 'constructor', 'trim' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 57, character: 1 },
      end: Position { line: 57, character: 11 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 57, character: 1 },
        end: Position { line: 57, character: 6 },
        scope: [Circular *1],
        name: 'Error'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 57, character: 9 },
        end: Position { line: 57, character: 11 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 59, character: 1 },
      end: Position { line: 59, character: 22 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 59, character: 6 },
        end: Position { line: 59, character: 15 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Error'
        }
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 59, character: 16 },
        end: Position { line: 59, character: 22 },
        scope: [Circular *1],
        name: 'String'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 61, character: 1 },
      end: Position { line: 68, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 61, character: 6 },
        end: Position { line: 61, character: 20 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'constructor'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Error'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 61, character: 21 },
        end: Position { line: 68, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(6) {
          'message',
          'm',
          'String',
          'constructor',
          'parse',
          'toString'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 70, character: 1 },
      end: Position { line: 72, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 70, character: 6 },
        end: Position { line: 70, character: 14 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'throw'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Error'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 70, character: 15 },
        end: Position { line: 72, character: 13 },
        scope: [Circular *1],
        body: [ [ASTCallStatement] ],
        namespaces: Set(1) { 'message' },
        assignments: [],
        parameters: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 74, character: 1 },
      end: Position { line: 74, character: 12 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 74, character: 1 },
        end: Position { line: 74, character: 7 },
        scope: [Circular *1],
        name: 'Crypto'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 74, character: 10 },
        end: Position { line: 74, character: 12 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 76, character: 1 },
      end: Position { line: 76, character: 91 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 76, character: 7 },
        end: Position { line: 76, character: 24 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'defaultCharset'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Crypto'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 76, character: 25 },
        end: Position { line: 76, character: 91 },
        scope: [Circular *1],
        value: 'QWERTZUIOPASDFGHJKLYXCVBNMqwertzuiopasdfghjklyxcvbnm1234567890+-',
        raw: '\\"QWERTZUIOPASDFGHJKLYXCVBNMqwertzuiopasdfghjklyxcvbnm1234567890+-\\"'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 77, character: 1 },
      end: Position { line: 77, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 77, character: 7 },
        end: Position { line: 77, character: 23 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'defaultSecret'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Crypto'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 77, character: 24 },
        end: Position { line: 77, character: 33 },
        scope: [Circular *1],
        value: 'test123',
        raw: '\\"test123\\"'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 78, character: 1 },
      end: Position { line: 78, character: 27 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 78, character: 7 },
        end: Position { line: 78, character: 21 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'maxCharCode'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Crypto'
        }
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 78, character: 22 },
        end: Position { line: 78, character: 27 },
        scope: [Circular *1],
        value: 55295,
        raw: '55295'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 79, character: 1 },
      end: Position { line: 79, character: 21 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 79, character: 7 },
        end: Position { line: 79, character: 15 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Error'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Crypto'
        }
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 79, character: 16 },
        end: Position { line: 79, character: 21 },
        scope: [Circular *1],
        name: 'Error'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 81, character: 1 },
      end: Position { line: 90, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 81, character: 7 },
        end: Position { line: 81, character: 21 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'constructor'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Crypto'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 81, character: 22 },
        end: Position { line: 90, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'defaultSecret',
          'hashFn',
          'charset',
          'me',
          'table',
          'defaultCharset',
          'Error',
          'constructor',
          'throw'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 92, character: 1 },
      end: Position { line: 101, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 92, character: 7 },
        end: Position { line: 92, character: 17 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'getHash'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Crypto'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 92, character: 18 },
        end: Position { line: 101, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTCallStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'pw', 'me', 'x', 'hashFn', 'reverse' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 103, character: 1 },
      end: Position { line: 156, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 103, character: 7 },
        end: Position { line: 103, character: 17 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'encrypt'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Crypto'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 158, character: 1 },
      end: Position { line: 202, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 158, character: 7 },
        end: Position { line: 158, character: 17 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'decrypt'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Crypto'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 204, character: 1 },
      end: Position { line: 204, character: 40 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 204, character: 1 },
        end: Position { line: 204, character: 5 },
        scope: [Circular *1],
        name: 'test'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 204, character: 32 },
        end: Position { line: 204, character: 40 },
        scope: [Circular *1],
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTUnaryExpression]
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 206, character: 1 },
      end: Position { line: 206, character: 14 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 206, character: 1 },
        end: Position { line: 206, character: 4 },
        scope: [Circular *1],
        name: 'pwd'
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 206, character: 7 },
        end: Position { line: 206, character: 14 },
        scope: [Circular *1],
        value: 'abcde',
        raw: '\\"abcde\\"'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 208, character: 1 },
      end: Position { line: 208, character: 24 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 208, character: 1 },
        end: Position { line: 208, character: 4 },
        scope: [Circular *1],
        name: 'foo'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 208, character: 19 },
        end: Position { line: 208, character: 24 },
        scope: [Circular *1],
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 209, character: 1 },
      end: Position { line: 209, character: 30 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 209, character: 1 },
        end: Position { line: 209, character: 10 },
        scope: [Circular *1],
        name: 'decrypted'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 209, character: 25 },
        end: Position { line: 209, character: 30 },
        scope: [Circular *1],
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTIdentifier] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 211, character: 1 },
      end: Position { line: 211, character: 11 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 211, character: 6 },
        end: Position { line: 211, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTIdentifier] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 212, character: 1 },
      end: Position { line: 212, character: 17 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 212, character: 6 },
        end: Position { line: 212, character: 17 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTIdentifier] ]
      }
    }
  ],
  namespaces: Set(23) {
    'String',
    'constructor',
    'parse',
    'startsWith',
    'substr',
    'replace',
    'toString',
    'length',
    'split',
    'trim',
    'Error',
    'throw',
    'Crypto',
    'defaultCharset',
    'defaultSecret',
    'maxCharCode',
    'getHash',
    'encrypt',
    'decrypt',
    'test',
    'pwd',
    'foo',
    'decrypted'
  },
  assignments: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 12 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 7 },
        scope: [Circular *1],
        name: 'String'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 10 },
        end: Position { line: 1, character: 12 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 6, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 3, character: 7 },
        end: Position { line: 3, character: 21 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'constructor'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 3, character: 22 },
        end: Position { line: 6, character: 13 },
        scope: [Circular *1],
        body: [ [ASTAssignmentStatement], [ASTReturnStatement] ],
        namespaces: Set(0) {},
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 8, character: 1 },
      end: Position { line: 19, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 8, character: 7 },
        end: Position { line: 8, character: 15 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'parse'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 16 },
        end: Position { line: 19, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) {
          'result',
          'index',
          'maxIndex',
          'replace',
          'constructor'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 21, character: 1 },
      end: Position { line: 23, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 21, character: 7 },
        end: Position { line: 21, character: 20 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'startsWith'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 21, character: 21 },
        end: Position { line: 23, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(0) {},
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 25, character: 1 },
      end: Position { line: 27, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 25, character: 7 },
        end: Position { line: 25, character: 16 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'substr'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 25, character: 17 },
        end: Position { line: 27, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'startIndex', 'endIndex', 'constructor' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 29, character: 1 },
      end: Position { line: 31, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 29, character: 7 },
        end: Position { line: 29, character: 17 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'indexOf'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 29, character: 18 },
        end: Position { line: 31, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(0) {},
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 33, character: 1 },
      end: Position { line: 35, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 33, character: 7 },
        end: Position { line: 33, character: 17 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'replace'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 18 },
        end: Position { line: 35, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'newStr', 'constructor', 'replace' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 37, character: 1 },
      end: Position { line: 39, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 37, character: 7 },
        end: Position { line: 37, character: 16 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'remove'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 37, character: 17 },
        end: Position { line: 39, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'constructor' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 41, character: 1 },
      end: Position { line: 43, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 41, character: 7 },
        end: Position { line: 41, character: 18 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'toString'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 41, character: 19 },
        end: Position { line: 43, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(0) {},
        assignments: [],
        parameters: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 45, character: 1 },
      end: Position { line: 47, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 45, character: 7 },
        end: Position { line: 45, character: 16 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'length'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 17 },
        end: Position { line: 47, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(0) {},
        assignments: [],
        parameters: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 49, character: 1 },
      end: Position { line: 51, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 49, character: 7 },
        end: Position { line: 49, character: 15 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'split'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 49, character: 16 },
        end: Position { line: 51, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(2) { 'seperator', 'split' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 53, character: 1 },
      end: Position { line: 55, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 53, character: 7 },
        end: Position { line: 53, character: 14 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'trim'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 53, character: 15 },
        end: Position { line: 55, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'seperator', 'constructor', 'trim' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 57, character: 1 },
      end: Position { line: 57, character: 11 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 57, character: 1 },
        end: Position { line: 57, character: 6 },
        scope: [Circular *1],
        name: 'Error'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 57, character: 9 },
        end: Position { line: 57, character: 11 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 59, character: 1 },
      end: Position { line: 59, character: 22 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 59, character: 6 },
        end: Position { line: 59, character: 15 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Error'
        }
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 59, character: 16 },
        end: Position { line: 59, character: 22 },
        scope: [Circular *1],
        name: 'String'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 61, character: 1 },
      end: Position { line: 68, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 61, character: 6 },
        end: Position { line: 61, character: 20 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'constructor'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Error'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 61, character: 21 },
        end: Position { line: 68, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(6) {
          'message',
          'm',
          'String',
          'constructor',
          'parse',
          'toString'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 70, character: 1 },
      end: Position { line: 72, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 70, character: 6 },
        end: Position { line: 70, character: 14 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'throw'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Error'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 70, character: 15 },
        end: Position { line: 72, character: 13 },
        scope: [Circular *1],
        body: [ [ASTCallStatement] ],
        namespaces: Set(1) { 'message' },
        assignments: [],
        parameters: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 74, character: 1 },
      end: Position { line: 74, character: 12 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 74, character: 1 },
        end: Position { line: 74, character: 7 },
        scope: [Circular *1],
        name: 'Crypto'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 74, character: 10 },
        end: Position { line: 74, character: 12 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 76, character: 1 },
      end: Position { line: 76, character: 91 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 76, character: 7 },
        end: Position { line: 76, character: 24 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'defaultCharset'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Crypto'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 76, character: 25 },
        end: Position { line: 76, character: 91 },
        scope: [Circular *1],
        value: 'QWERTZUIOPASDFGHJKLYXCVBNMqwertzuiopasdfghjklyxcvbnm1234567890+-',
        raw: '\\"QWERTZUIOPASDFGHJKLYXCVBNMqwertzuiopasdfghjklyxcvbnm1234567890+-\\"'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 77, character: 1 },
      end: Position { line: 77, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 77, character: 7 },
        end: Position { line: 77, character: 23 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'defaultSecret'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Crypto'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 77, character: 24 },
        end: Position { line: 77, character: 33 },
        scope: [Circular *1],
        value: 'test123',
        raw: '\\"test123\\"'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 78, character: 1 },
      end: Position { line: 78, character: 27 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 78, character: 7 },
        end: Position { line: 78, character: 21 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'maxCharCode'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Crypto'
        }
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 78, character: 22 },
        end: Position { line: 78, character: 27 },
        scope: [Circular *1],
        value: 55295,
        raw: '55295'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 79, character: 1 },
      end: Position { line: 79, character: 21 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 79, character: 7 },
        end: Position { line: 79, character: 15 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Error'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Crypto'
        }
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 79, character: 16 },
        end: Position { line: 79, character: 21 },
        scope: [Circular *1],
        name: 'Error'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 81, character: 1 },
      end: Position { line: 90, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 81, character: 7 },
        end: Position { line: 81, character: 21 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'constructor'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Crypto'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 81, character: 22 },
        end: Position { line: 90, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'defaultSecret',
          'hashFn',
          'charset',
          'me',
          'table',
          'defaultCharset',
          'Error',
          'constructor',
          'throw'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 92, character: 1 },
      end: Position { line: 101, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 92, character: 7 },
        end: Position { line: 92, character: 17 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'getHash'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Crypto'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 92, character: 18 },
        end: Position { line: 101, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTCallStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'pw', 'me', 'x', 'hashFn', 'reverse' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 103, character: 1 },
      end: Position { line: 156, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 103, character: 7 },
        end: Position { line: 103, character: 17 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'encrypt'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Crypto'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 158, character: 1 },
      end: Position { line: 202, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 158, character: 7 },
        end: Position { line: 158, character: 17 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'decrypt'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Crypto'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 204, character: 1 },
      end: Position { line: 204, character: 40 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 204, character: 1 },
        end: Position { line: 204, character: 5 },
        scope: [Circular *1],
        name: 'test'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 204, character: 32 },
        end: Position { line: 204, character: 40 },
        scope: [Circular *1],
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTUnaryExpression]
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 206, character: 1 },
      end: Position { line: 206, character: 14 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 206, character: 1 },
        end: Position { line: 206, character: 4 },
        scope: [Circular *1],
        name: 'pwd'
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 206, character: 7 },
        end: Position { line: 206, character: 14 },
        scope: [Circular *1],
        value: 'abcde',
        raw: '\\"abcde\\"'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 208, character: 1 },
      end: Position { line: 208, character: 24 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 208, character: 1 },
        end: Position { line: 208, character: 4 },
        scope: [Circular *1],
        name: 'foo'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 208, character: 19 },
        end: Position { line: 208, character: 24 },
        scope: [Circular *1],
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 209, character: 1 },
      end: Position { line: 209, character: 30 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 209, character: 1 },
        end: Position { line: 209, character: 10 },
        scope: [Circular *1],
        name: 'decrypted'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 209, character: 25 },
        end: Position { line: 209, character: 30 },
        scope: [Circular *1],
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTIdentifier] ]
      }
    }
  ],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 10, character: 13 },
      end: Position { line: 10, character: 14 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 16 },
        end: Position { line: 19, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) {
          'result',
          'index',
          'maxIndex',
          'replace',
          'constructor'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 14, character: 33 },
      end: Position { line: 14, character: 36 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 16 },
        end: Position { line: 19, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) {
          'result',
          'index',
          'maxIndex',
          'replace',
          'constructor'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      value: '$',
      raw: '\\"$\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 15, character: 25 },
      end: Position { line: 15, character: 26 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 16 },
        end: Position { line: 19, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) {
          'result',
          'index',
          'maxIndex',
          'replace',
          'constructor'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 22, character: 37 },
      end: Position { line: 22, character: 38 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 21, character: 21 },
        end: Position { line: 23, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(0) {},
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NilLiteral',
      start: Position { line: 64, character: 19 },
      end: Position { line: 64, character: 23 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 61, character: 21 },
        end: Position { line: 68, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(6) {
          'message',
          'm',
          'String',
          'constructor',
          'parse',
          'toString'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: null,
      raw: 'null'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 71, character: 10 },
      end: Position { line: 71, character: 27 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 70, character: 15 },
        end: Position { line: 72, character: 13 },
        scope: [Circular *1],
        body: [ [ASTCallStatement] ],
        namespaces: Set(1) { 'message' },
        assignments: [],
        parameters: []
      },
      value: '<color=#ff0000>',
      raw: '\\"<color=#ff0000>\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 71, character: 45 },
      end: Position { line: 71, character: 55 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 70, character: 15 },
        end: Position { line: 72, character: 13 },
        scope: [Circular *1],
        body: [ [ASTCallStatement] ],
        namespaces: Set(1) { 'message' },
        assignments: [],
        parameters: []
      },
      value: '</color>',
      raw: '\\"</color>\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 76, character: 25 },
      end: Position { line: 76, character: 91 },
      scope: [Circular *1],
      value: 'QWERTZUIOPASDFGHJKLYXCVBNMqwertzuiopasdfghjklyxcvbnm1234567890+-',
      raw: '\\"QWERTZUIOPASDFGHJKLYXCVBNMqwertzuiopasdfghjklyxcvbnm1234567890+-\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 77, character: 24 },
      end: Position { line: 77, character: 33 },
      scope: [Circular *1],
      value: 'test123',
      raw: '\\"test123\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 78, character: 22 },
      end: Position { line: 78, character: 27 },
      scope: [Circular *1],
      value: 55295,
      raw: '55295'
    },
    ASTLiteral {
      type: 'NilLiteral',
      start: Position { line: 86, character: 20 },
      end: Position { line: 86, character: 24 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 81, character: 22 },
        end: Position { line: 90, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'defaultSecret',
          'hashFn',
          'charset',
          'me',
          'table',
          'defaultCharset',
          'Error',
          'constructor',
          'throw'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier], [ASTIdentifier] ]
      },
      value: null,
      raw: 'null'
    },
    ASTLiteral {
      type: 'NilLiteral',
      start: Position { line: 87, character: 19 },
      end: Position { line: 87, character: 23 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 81, character: 22 },
        end: Position { line: 90, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'defaultSecret',
          'hashFn',
          'charset',
          'me',
          'table',
          'defaultCharset',
          'Error',
          'constructor',
          'throw'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier], [ASTIdentifier] ]
      },
      value: null,
      raw: 'null'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 88, character: 24 },
      end: Position { line: 88, character: 26 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 81, character: 22 },
        end: Position { line: 90, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'defaultSecret',
          'hashFn',
          'charset',
          'me',
          'table',
          'defaultCharset',
          'Error',
          'constructor',
          'throw'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 64,
      raw: '64'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 88, character: 59 },
      end: Position { line: 88, character: 82 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 81, character: 22 },
        end: Position { line: 90, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'defaultSecret',
          'hashFn',
          'charset',
          'me',
          'table',
          'defaultCharset',
          'Error',
          'constructor',
          'throw'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 'Invalid charset $0...',
      raw: '\\"Invalid charset $0...\\"'
    },
    ASTLiteral {
      type: 'NilLiteral',
      start: Position { line: 105, character: 15 },
      end: Position { line: 105, character: 19 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: null,
      raw: 'null'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 107, character: 19 },
      end: Position { line: 107, character: 20 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 109, character: 16 },
      end: Position { line: 109, character: 17 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 110, character: 25 },
      end: Position { line: 110, character: 26 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 3,
      raw: '3'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 114, character: 40 },
      end: Position { line: 114, character: 61 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 112, character: 11 },
        end: Position { line: 117, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTIfStatement], [ASTReturnStatement] ],
        namespaces: Set(6) { 'v', 'me', 'table', 'Error', 'constructor', 'throw' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      },
      value: 'Invalid index $0...',
      raw: '\\"Invalid index $0...\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 119, character: 24 },
      end: Position { line: 119, character: 27 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 118, character: 11 },
        end: Position { line: 120, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(2) { 'a', 'b' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: '&',
      raw: '\\"&\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 122, character: 24 },
      end: Position { line: 122, character: 28 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 121, character: 14 },
        end: Position { line: 123, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(2) { 'a', 'b' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: '<<',
      raw: '\\"<<\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 125, character: 24 },
      end: Position { line: 125, character: 28 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(2) { 'a', 'b' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: '>>',
      raw: '\\">>\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 128, character: 40 },
      end: Position { line: 128, character: 41 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 129, character: 44 },
      end: Position { line: 129, character: 46 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 16,
      raw: '16'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 130, character: 35 },
      end: Position { line: 130, character: 36 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 130, character: 48 },
      end: Position { line: 130, character: 49 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 8,
      raw: '8'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 131, character: 28 },
      end: Position { line: 131, character: 29 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 2,
      raw: '2'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 133, character: 44 },
      end: Position { line: 133, character: 46 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 18,
      raw: '18'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 133, character: 49 },
      end: Position { line: 133, character: 51 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 63,
      raw: '63'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 134, character: 44 },
      end: Position { line: 134, character: 46 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 12,
      raw: '12'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 134, character: 49 },
      end: Position { line: 134, character: 51 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 63,
      raw: '63'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 135, character: 44 },
      end: Position { line: 135, character: 45 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 6,
      raw: '6'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 135, character: 48 },
      end: Position { line: 135, character: 50 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 63,
      raw: '63'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 136, character: 37 },
      end: Position { line: 136, character: 39 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 63,
      raw: '63'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 137, character: 31 },
      end: Position { line: 137, character: 32 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 3,
      raw: '3'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 139, character: 20 },
      end: Position { line: 139, character: 21 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 2,
      raw: '2'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 140, character: 40 },
      end: Position { line: 140, character: 41 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 141, character: 44 },
      end: Position { line: 141, character: 45 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 8,
      raw: '8'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 142, character: 28 },
      end: Position { line: 142, character: 29 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 144, character: 40 },
      end: Position { line: 144, character: 42 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 10,
      raw: '10'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 145, character: 44 },
      end: Position { line: 145, character: 45 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 4,
      raw: '4'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 145, character: 48 },
      end: Position { line: 145, character: 50 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 63,
      raw: '63'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 146, character: 44 },
      end: Position { line: 146, character: 45 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 2,
      raw: '2'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 146, character: 48 },
      end: Position { line: 146, character: 50 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 63,
      raw: '63'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 147, character: 21 },
      end: Position { line: 147, character: 24 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: '=',
      raw: '\\"=\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 148, character: 25 },
      end: Position { line: 148, character: 26 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 149, character: 40 },
      end: Position { line: 149, character: 41 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 151, character: 40 },
      end: Position { line: 151, character: 41 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 2,
      raw: '2'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 152, character: 44 },
      end: Position { line: 152, character: 45 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 4,
      raw: '4'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 152, character: 48 },
      end: Position { line: 152, character: 50 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 63,
      raw: '63'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 153, character: 21 },
      end: Position { line: 153, character: 25 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: '==',
      raw: '\\"==\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 155, character: 24 },
      end: Position { line: 155, character: 26 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: '',
      raw: '\\"\\"'
    },
    ASTLiteral {
      type: 'NilLiteral',
      start: Position { line: 160, character: 15 },
      end: Position { line: 160, character: 19 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: null,
      raw: 'null'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 162, character: 19 },
      end: Position { line: 162, character: 20 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 165, character: 18 },
      end: Position { line: 165, character: 19 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 166, character: 18 },
      end: Position { line: 166, character: 19 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 167, character: 16 },
      end: Position { line: 167, character: 17 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 168, character: 19 },
      end: Position { line: 168, character: 20 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 171, character: 24 },
      end: Position { line: 171, character: 27 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 170, character: 11 },
        end: Position { line: 172, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(2) { 'a', 'b' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: '&',
      raw: '\\"&\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 174, character: 24 },
      end: Position { line: 174, character: 28 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 173, character: 14 },
        end: Position { line: 175, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(2) { 'a', 'b' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: '>>',
      raw: '\\">>\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 179, character: 35 },
      end: Position { line: 179, character: 36 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 180, character: 26 },
      end: Position { line: 180, character: 27 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 4,
      raw: '4'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 181, character: 39 },
      end: Position { line: 181, character: 41 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 64,
      raw: '64'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 185, character: 26 },
      end: Position { line: 185, character: 27 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 4,
      raw: '4'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 186, character: 54 },
      end: Position { line: 186, character: 55 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 3,
      raw: '3'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 186, character: 59 },
      end: Position { line: 186, character: 60 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 3,
      raw: '3'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 186, character: 77 },
      end: Position { line: 186, character: 78 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 189, character: 30 },
      end: Position { line: 189, character: 31 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 2,
      raw: '2'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 189, character: 46 },
      end: Position { line: 189, character: 47 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 6,
      raw: '6'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 191, character: 29 },
      end: Position { line: 191, character: 32 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 255,
      raw: '255'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 192, character: 30 },
      end: Position { line: 192, character: 31 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 197, character: 41 },
      end: Position { line: 197, character: 42 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 199, character: 31 },
      end: Position { line: 199, character: 32 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 201, character: 24 },
      end: Position { line: 201, character: 26 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: '',
      raw: '\\"\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 204, character: 33 },
      end: Position { line: 204, character: 39 },
      scope: [Circular *1],
      value: 'test',
      raw: '\\"test\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 206, character: 7 },
      end: Position { line: 206, character: 14 },
      scope: [Circular *1],
      value: 'abcde',
      raw: '\\"abcde\\"'
    }
  ],
  scopes: [
    <ref *2> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 3, character: 22 },
      end: Position { line: 6, character: 13 },
      scope: [Circular *1],
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTMemberExpression],
          init: [ASTIdentifier]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          argument: [ASTIdentifier]
        }
      ],
      namespaces: Set(0) {},
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTMemberExpression],
          init: [ASTIdentifier]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          name: 'str'
        }
      ]
    },
    <ref *3> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 8, character: 16 },
      end: Position { line: 19, character: 13 },
      scope: [Circular *1],
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTWhileStatement {
          type: 'WhileStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          body: [Array],
          condition: [ASTEvaluationExpression]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(5) {
        'result',
        'index',
        'maxIndex',
        'replace',
        'constructor'
      },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          name: 'values'
        }
      ]
    },
    <ref *4> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 21, character: 21 },
      end: Position { line: 23, character: 13 },
      scope: [Circular *1],
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          argument: [ASTEvaluationExpression]
        }
      ],
      namespaces: Set(0) {},
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          name: 'str'
        }
      ]
    },
    <ref *5> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 25, character: 17 },
      end: Position { line: 27, character: 13 },
      scope: [Circular *1],
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *5],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(3) { 'startIndex', 'endIndex', 'constructor' },
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *5],
          name: 'startIndex'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *5],
          name: 'endIndex'
        }
      ]
    },
    <ref *6> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 29, character: 18 },
      end: Position { line: 31, character: 13 },
      scope: [Circular *1],
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *6],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(0) {},
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *6],
          name: 'str'
        }
      ]
    },
    <ref *7> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 33, character: 18 },
      end: Position { line: 35, character: 13 },
      scope: [Circular *1],
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *7],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(3) { 'newStr', 'constructor', 'replace' },
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *7],
          name: 'str'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *7],
          name: 'newStr'
        }
      ]
    },
    <ref *8> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 37, character: 17 },
      end: Position { line: 39, character: 13 },
      scope: [Circular *1],
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *8],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(1) { 'constructor' },
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *8],
          name: 'str'
        }
      ]
    },
    <ref *9> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 41, character: 19 },
      end: Position { line: 43, character: 13 },
      scope: [Circular *1],
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          argument: [ASTMemberExpression]
        }
      ],
      namespaces: Set(0) {},
      assignments: [],
      parameters: []
    },
    <ref *10> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 45, character: 17 },
      end: Position { line: 47, character: 13 },
      scope: [Circular *1],
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          argument: [ASTMemberExpression]
        }
      ],
      namespaces: Set(0) {},
      assignments: [],
      parameters: []
    },
    <ref *11> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 49, character: 16 },
      end: Position { line: 51, character: 13 },
      scope: [Circular *1],
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(2) { 'seperator', 'split' },
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          name: 'seperator'
        }
      ]
    },
    <ref *12> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 53, character: 15 },
      end: Position { line: 55, character: 13 },
      scope: [Circular *1],
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *12],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(3) { 'seperator', 'constructor', 'trim' },
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *12],
          name: 'seperator'
        }
      ]
    },
    <ref *13> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 61, character: 21 },
      end: Position { line: 68, character: 13 },
      scope: [Circular *1],
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *13],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *13],
          variable: [ASTMemberExpression],
          init: [ASTIdentifier]
        },
        ASTIfStatement {
          type: 'IfStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *13],
          clauses: [Array]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *13],
          argument: [ASTIdentifier]
        }
      ],
      namespaces: Set(6) {
        'message',
        'm',
        'String',
        'constructor',
        'parse',
        'toString'
      },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *13],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *13],
          variable: [ASTMemberExpression],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *13],
          variable: [ASTMemberExpression],
          init: [ASTCallExpression]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *13],
          name: 'message'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *13],
          name: 'values'
        }
      ]
    },
    <ref *14> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 70, character: 15 },
      end: Position { line: 72, character: 13 },
      scope: [Circular *1],
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *14],
          expression: [ASTCallExpression]
        }
      ],
      namespaces: Set(1) { 'message' },
      assignments: [],
      parameters: []
    },
    <ref *15> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 81, character: 22 },
      end: Position { line: 90, character: 13 },
      scope: [Circular *1],
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *15],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *15],
          variable: [ASTMemberExpression],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *15],
          variable: [ASTMemberExpression],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *15],
          variable: [ASTMemberExpression],
          init: [ASTUnaryExpression]
        },
        ASTIfStatement {
          type: 'IfShortcutStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *15],
          clauses: [Array]
        },
        ASTIfStatement {
          type: 'IfShortcutStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *15],
          clauses: [Array]
        },
        ASTIfStatement {
          type: 'IfShortcutStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *15],
          clauses: [Array]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *15],
          argument: [ASTIdentifier]
        }
      ],
      namespaces: Set(9) {
        'defaultSecret',
        'hashFn',
        'charset',
        'me',
        'table',
        'defaultCharset',
        'Error',
        'constructor',
        'throw'
      },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *15],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *15],
          variable: [ASTMemberExpression],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *15],
          variable: [ASTMemberExpression],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *15],
          variable: [ASTMemberExpression],
          init: [ASTUnaryExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *15],
          variable: [ASTMemberExpression],
          init: [ASTUnaryExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *15],
          variable: [ASTMemberExpression],
          init: [ASTMemberExpression]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *15],
          name: 'defaultSecret'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *15],
          name: 'hashFn'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *15],
          name: 'charset'
        }
      ]
    },
    <ref *16> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 92, character: 18 },
      end: Position { line: 101, character: 13 },
      scope: [Circular *1],
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *16],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *16],
          variable: [ASTIdentifier],
          init: [ASTListConstructorExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *16],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTForGenericStatement {
          type: 'ForGenericStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *16],
          body: [Array],
          variable: [ASTIdentifier],
          iterator: [ASTIdentifier]
        },
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *16],
          expression: [ASTMemberExpression]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *16],
          argument: [ASTIdentifier]
        }
      ],
      namespaces: Set(5) { 'pw', 'me', 'x', 'hashFn', 'reverse' },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *16],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *16],
          variable: [ASTIdentifier],
          init: [ASTListConstructorExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *16],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *16],
          name: 'pw'
        }
      ]
    },
    <ref *17> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 103, character: 18 },
      end: Position { line: 156, character: 13 },
      scope: [Circular *1],
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTIfStatement {
          type: 'IfShortcutStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          clauses: [Array]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTListConstructorExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTFunctionStatement]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTFunctionStatement]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTFunctionStatement]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTFunctionStatement]
        },
        ASTWhileStatement {
          type: 'WhileStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          body: [Array],
          condition: [ASTEvaluationExpression]
        },
        ASTIfStatement {
          type: 'IfStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          clauses: [Array]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(19) {
        'pw',
        'me',
        'defaultSecret',
        'getHash',
        'hashPointer',
        'output',
        'position',
        'padding',
        'max',
        'get',
        'AND',
        'LSHIFT',
        'RSHIFT',
        'm',
        'a',
        'b',
        'c',
        'buffer',
        'join'
      },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTListConstructorExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTFunctionStatement]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTFunctionStatement]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTFunctionStatement]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTFunctionStatement]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTIndexExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTIndexExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTIndexExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          name: 'str'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          name: 'pw'
        }
      ]
    },
    <ref *18> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 112, character: 11 },
      end: Position { line: 117, character: 17 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      body: [
        ASTIfStatement {
          type: 'IfStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *18],
          clauses: [Array]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *18],
          argument: [ASTIndexExpression]
        }
      ],
      namespaces: Set(6) { 'v', 'me', 'table', 'Error', 'constructor', 'throw' },
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *18],
          name: 'v'
        }
      ]
    },
    <ref *19> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 118, character: 11 },
      end: Position { line: 120, character: 17 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *19],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(2) { 'a', 'b' },
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *19],
          name: 'a'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *19],
          name: 'b'
        }
      ]
    },
    <ref *20> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 121, character: 14 },
      end: Position { line: 123, character: 17 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *20],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(2) { 'a', 'b' },
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *20],
          name: 'a'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *20],
          name: 'b'
        }
      ]
    },
    <ref *21> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 124, character: 14 },
      end: Position { line: 126, character: 17 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *21],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(2) { 'a', 'b' },
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *21],
          name: 'a'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *21],
          name: 'b'
        }
      ]
    },
    <ref *22> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 158, character: 18 },
      end: Position { line: 202, character: 13 },
      scope: [Circular *1],
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTIfStatement {
          type: 'IfShortcutStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          clauses: [Array]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTListConstructorExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTFunctionStatement]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTFunctionStatement]
        },
        ASTWhileStatement {
          type: 'WhileStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          body: [Array],
          condition: [ASTEvaluationExpression]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(22) {
        'pw',
        'me',
        'defaultSecret',
        'getHash',
        'hashPointer',
        'hashLength',
        'output',
        'bitCounter',
        'bitStorage',
        'position',
        'max',
        'AND',
        'RSHIFT',
        'buffer',
        'table',
        'currentBit',
        'expectedHashIndex',
        'm',
        'operation',
        'charCode',
        'maxCharCode',
        'join'
      },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTListConstructorExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTFunctionStatement]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTFunctionStatement]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTIndexExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          name: 'str'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          name: 'pw'
        }
      ]
    },
    <ref *23> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 170, character: 11 },
      end: Position { line: 172, character: 17 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *23],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(2) { 'a', 'b' },
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *23],
          name: 'a'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *23],
          name: 'b'
        }
      ]
    },
    <ref *24> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 173, character: 14 },
      end: Position { line: 175, character: 17 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *24],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(2) { 'a', 'b' },
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *24],
          name: 'a'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *24],
          name: 'b'
        }
      ]
    }
  ],
  lines: Map(150) {
    1 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 12 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 7 },
        scope: [Circular *1],
        name: 'String'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 10 },
        end: Position { line: 1, character: 12 },
        scope: [Circular *1],
        fields: []
      }
    },
    4 => <ref *25> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 4, character: 5 },
      end: Position { line: 4, character: 19 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 3, character: 22 },
        end: Position { line: 6, character: 13 },
        scope: [Circular *1],
        body: [ [Circular *25], [ASTReturnStatement] ],
        namespaces: Set(0) {},
        assignments: [ [Circular *25] ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 4, character: 9 },
        end: Position { line: 4, character: 15 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: Set(0) {},
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'str'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'self'
        }
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 4, character: 16 },
        end: Position { line: 4, character: 19 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: Set(0) {},
          assignments: [Array],
          parameters: [Array]
        },
        name: 'str'
      }
    },
    5 => <ref *26> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 5, character: 5 },
      end: Position { line: 5, character: 16 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 3, character: 22 },
        end: Position { line: 6, character: 13 },
        scope: [Circular *1],
        body: [ [ASTAssignmentStatement], [Circular *26] ],
        namespaces: Set(0) {},
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier] ]
      },
      argument: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 5, character: 12 },
        end: Position { line: 5, character: 16 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: Set(0) {},
          assignments: [Array],
          parameters: [Array]
        },
        name: 'self'
      }
    },
    3 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 6, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 3, character: 7 },
        end: Position { line: 3, character: 21 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'constructor'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 3, character: 22 },
        end: Position { line: 6, character: 13 },
        scope: [Circular *1],
        body: [ [ASTAssignmentStatement], [ASTReturnStatement] ],
        namespaces: Set(0) {},
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    9 => <ref *27> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 9, character: 5 },
      end: Position { line: 9, character: 22 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 16 },
        end: Position { line: 19, character: 13 },
        scope: [Circular *1],
        body: [
          [Circular *27],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) {
          'result',
          'index',
          'maxIndex',
          'replace',
          'constructor'
        },
        assignments: [
          [Circular *27],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 9, character: 5 },
        end: Position { line: 9, character: 11 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'result'
      },
      init: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 9, character: 18 },
        end: Position { line: 9, character: 22 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'str'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'self'
        }
      }
    },
    10 => <ref *28> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 10, character: 5 },
      end: Position { line: 10, character: 14 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 16 },
        end: Position { line: 19, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [Circular *28],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) {
          'result',
          'index',
          'maxIndex',
          'replace',
          'constructor'
        },
        assignments: [
          [ASTAssignmentStatement],
          [Circular *28],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 10, character: 5 },
        end: Position { line: 10, character: 10 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'index'
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 10, character: 13 },
        end: Position { line: 10, character: 14 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        value: 0,
        raw: '0'
      }
    },
    11 => <ref *29> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 11, character: 5 },
      end: Position { line: 11, character: 26 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 16 },
        end: Position { line: 19, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *29],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) {
          'result',
          'index',
          'maxIndex',
          'replace',
          'constructor'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *29],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 11, character: 5 },
        end: Position { line: 11, character: 13 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'maxIndex'
      },
      init: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 11, character: 22 },
        end: Position { line: 11, character: 26 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'len'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'values'
        }
      }
    },
    14 => <ref *30> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 14, character: 9 },
      end: Position { line: 14, character: 58 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 16 },
        end: Position { line: 19, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) {
          'result',
          'index',
          'maxIndex',
          'replace',
          'constructor'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *30],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 14, character: 9 },
        end: Position { line: 14, character: 15 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'result'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 14, character: 32 },
        end: Position { line: 14, character: 58 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTEvaluationExpression], [ASTIndexExpression] ]
      }
    },
    15 => <ref *31> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 15, character: 9 },
      end: Position { line: 15, character: 26 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 16 },
        end: Position { line: 19, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) {
          'result',
          'index',
          'maxIndex',
          'replace',
          'constructor'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *31]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 15, character: 9 },
        end: Position { line: 15, character: 14 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'index'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 15, character: 23 },
        end: Position { line: 15, character: 26 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '+',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'index'
        },
        right: ASTLiteral {
          type: 'NumericLiteral',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          value: 1,
          raw: '1'
        }
      }
    },
    13 => <ref *32> ASTWhileStatement {
      type: 'WhileStatement',
      start: Position { line: 13, character: 5 },
      end: Position { line: 16, character: 14 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 16 },
        end: Position { line: 19, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *32],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) {
          'result',
          'index',
          'maxIndex',
          'replace',
          'constructor'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      body: [
        <ref *30> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        <ref *31> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        }
      ],
      condition: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 13, character: 17 },
        end: Position { line: 13, character: 27 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '<',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'index'
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'maxIndex'
        }
      }
    },
    18 => <ref *33> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 18, character: 5 },
      end: Position { line: 18, character: 42 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 16 },
        end: Position { line: 19, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [Circular *33]
        ],
        namespaces: Set(5) {
          'result',
          'index',
          'maxIndex',
          'replace',
          'constructor'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      argument: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 18, character: 34 },
        end: Position { line: 18, character: 42 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTUnaryExpression]
        },
        arguments: [ [ASTIdentifier] ]
      }
    },
    8 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 8, character: 1 },
      end: Position { line: 19, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 8, character: 7 },
        end: Position { line: 8, character: 15 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'parse'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 16 },
        end: Position { line: 19, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) {
          'result',
          'index',
          'maxIndex',
          'replace',
          'constructor'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    22 => <ref *34> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 22, character: 5 },
      end: Position { line: 22, character: 38 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 21, character: 21 },
        end: Position { line: 23, character: 13 },
        scope: [Circular *1],
        body: [ [Circular *34] ],
        namespaces: Set(0) {},
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      },
      argument: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 22, character: 34 },
        end: Position { line: 22, character: 38 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: Set(0) {},
          assignments: [],
          parameters: [Array]
        },
        operator: '==',
        left: ASTCallExpression {
          type: 'CallExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          base: [ASTMemberExpression],
          arguments: [Array]
        },
        right: ASTLiteral {
          type: 'NumericLiteral',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          value: 0,
          raw: '0'
        }
      }
    },
    21 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 21, character: 1 },
      end: Position { line: 23, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 21, character: 7 },
        end: Position { line: 21, character: 20 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'startsWith'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 21, character: 21 },
        end: Position { line: 23, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(0) {},
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      }
    },
    26 => <ref *35> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 26, character: 5 },
      end: Position { line: 26, character: 73 },
      scope: <ref *5> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 25, character: 17 },
        end: Position { line: 27, character: 13 },
        scope: [Circular *1],
        body: [ [Circular *35] ],
        namespaces: Set(3) { 'startIndex', 'endIndex', 'constructor' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      argument: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 26, character: 34 },
        end: Position { line: 26, character: 73 },
        scope: <ref *5> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTUnaryExpression]
        },
        arguments: [ [ASTCallExpression] ]
      }
    },
    25 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 25, character: 1 },
      end: Position { line: 27, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 25, character: 7 },
        end: Position { line: 25, character: 16 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'substr'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: <ref *5> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 25, character: 17 },
        end: Position { line: 27, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'startIndex', 'endIndex', 'constructor' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    30 => <ref *36> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 30, character: 5 },
      end: Position { line: 30, character: 33 },
      scope: <ref *6> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 29, character: 18 },
        end: Position { line: 31, character: 13 },
        scope: [Circular *1],
        body: [ [Circular *36] ],
        namespaces: Set(0) {},
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      },
      argument: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 30, character: 28 },
        end: Position { line: 30, character: 33 },
        scope: <ref *6> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: Set(0) {},
          assignments: [],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTMemberExpression]
        },
        arguments: [ [ASTIdentifier] ]
      }
    },
    29 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 29, character: 1 },
      end: Position { line: 31, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 29, character: 7 },
        end: Position { line: 29, character: 17 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'indexOf'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: <ref *6> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 29, character: 18 },
        end: Position { line: 31, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(0) {},
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      }
    },
    34 => <ref *37> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 34, character: 5 },
      end: Position { line: 34, character: 65 },
      scope: <ref *7> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 18 },
        end: Position { line: 35, character: 13 },
        scope: [Circular *1],
        body: [ [Circular *37] ],
        namespaces: Set(3) { 'newStr', 'constructor', 'replace' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      argument: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 34, character: 34 },
        end: Position { line: 34, character: 65 },
        scope: <ref *7> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTUnaryExpression]
        },
        arguments: [ [ASTCallExpression] ]
      }
    },
    33 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 33, character: 1 },
      end: Position { line: 35, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 33, character: 7 },
        end: Position { line: 33, character: 17 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'replace'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: <ref *7> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 18 },
        end: Position { line: 35, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'newStr', 'constructor', 'replace' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    38 => <ref *38> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 38, character: 5 },
      end: Position { line: 38, character: 56 },
      scope: <ref *8> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 37, character: 17 },
        end: Position { line: 39, character: 13 },
        scope: [Circular *1],
        body: [ [Circular *38] ],
        namespaces: Set(1) { 'constructor' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      },
      argument: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 38, character: 34 },
        end: Position { line: 38, character: 56 },
        scope: <ref *8> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTUnaryExpression]
        },
        arguments: [ [ASTCallExpression] ]
      }
    },
    37 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 37, character: 1 },
      end: Position { line: 39, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 37, character: 7 },
        end: Position { line: 37, character: 16 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'remove'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: <ref *8> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 37, character: 17 },
        end: Position { line: 39, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'constructor' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      }
    },
    42 => <ref *39> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 42, character: 5 },
      end: Position { line: 42, character: 20 },
      scope: <ref *9> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 41, character: 19 },
        end: Position { line: 43, character: 13 },
        scope: [Circular *1],
        body: [ [Circular *39] ],
        namespaces: Set(0) {},
        assignments: [],
        parameters: []
      },
      argument: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 42, character: 16 },
        end: Position { line: 42, character: 20 },
        scope: <ref *9> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: Set(0) {},
          assignments: [],
          parameters: []
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'str'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'self'
        }
      }
    },
    41 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 41, character: 1 },
      end: Position { line: 43, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 41, character: 7 },
        end: Position { line: 41, character: 18 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'toString'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: <ref *9> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 41, character: 19 },
        end: Position { line: 43, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(0) {},
        assignments: [],
        parameters: []
      }
    },
    46 => <ref *40> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 46, character: 5 },
      end: Position { line: 46, character: 24 },
      scope: <ref *10> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 17 },
        end: Position { line: 47, character: 13 },
        scope: [Circular *1],
        body: [ [Circular *40] ],
        namespaces: Set(0) {},
        assignments: [],
        parameters: []
      },
      argument: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 46, character: 20 },
        end: Position { line: 46, character: 24 },
        scope: <ref *10> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: Set(0) {},
          assignments: [],
          parameters: []
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'len'
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        }
      }
    },
    45 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 45, character: 1 },
      end: Position { line: 47, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 45, character: 7 },
        end: Position { line: 45, character: 16 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'length'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: <ref *10> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 17 },
        end: Position { line: 47, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(0) {},
        assignments: [],
        parameters: []
      }
    },
    50 => <ref *41> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 50, character: 5 },
      end: Position { line: 50, character: 37 },
      scope: <ref *11> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 49, character: 16 },
        end: Position { line: 51, character: 13 },
        scope: [Circular *1],
        body: [ [Circular *41] ],
        namespaces: Set(2) { 'seperator', 'split' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      },
      argument: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 50, character: 26 },
        end: Position { line: 50, character: 37 },
        scope: <ref *11> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTMemberExpression]
        },
        arguments: [ [ASTIdentifier] ]
      }
    },
    49 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 49, character: 1 },
      end: Position { line: 51, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 49, character: 7 },
        end: Position { line: 49, character: 15 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'split'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: <ref *11> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 49, character: 16 },
        end: Position { line: 51, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(2) { 'seperator', 'split' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      }
    },
    54 => <ref *42> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 54, character: 5 },
      end: Position { line: 54, character: 51 },
      scope: <ref *12> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 53, character: 15 },
        end: Position { line: 55, character: 13 },
        scope: [Circular *1],
        body: [ [Circular *42] ],
        namespaces: Set(3) { 'seperator', 'constructor', 'trim' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      },
      argument: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 54, character: 34 },
        end: Position { line: 54, character: 51 },
        scope: <ref *12> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTUnaryExpression]
        },
        arguments: [ [ASTCallExpression] ]
      }
    },
    53 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 53, character: 1 },
      end: Position { line: 55, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 53, character: 7 },
        end: Position { line: 53, character: 14 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'trim'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: <ref *12> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 53, character: 15 },
        end: Position { line: 55, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'seperator', 'constructor', 'trim' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      }
    },
    57 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 57, character: 1 },
      end: Position { line: 57, character: 11 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 57, character: 1 },
        end: Position { line: 57, character: 6 },
        scope: [Circular *1],
        name: 'Error'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 57, character: 9 },
        end: Position { line: 57, character: 11 },
        scope: [Circular *1],
        fields: []
      }
    },
    59 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 59, character: 1 },
      end: Position { line: 59, character: 22 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 59, character: 6 },
        end: Position { line: 59, character: 15 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Error'
        }
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 59, character: 16 },
        end: Position { line: 59, character: 22 },
        scope: [Circular *1],
        name: 'String'
      }
    },
    62 => <ref *43> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 62, character: 5 },
      end: Position { line: 62, character: 13 },
      scope: <ref *13> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 61, character: 21 },
        end: Position { line: 68, character: 13 },
        scope: [Circular *1],
        body: [
          [Circular *43],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(6) {
          'message',
          'm',
          'String',
          'constructor',
          'parse',
          'toString'
        },
        assignments: [
          [Circular *43],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 62, character: 5 },
        end: Position { line: 62, character: 6 },
        scope: <ref *13> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'm'
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 62, character: 9 },
        end: Position { line: 62, character: 13 },
        scope: <ref *13> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'self'
      }
    },
    63 => <ref *44> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 63, character: 5 },
      end: Position { line: 63, character: 24 },
      scope: <ref *13> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 61, character: 21 },
        end: Position { line: 68, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [Circular *44],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(6) {
          'message',
          'm',
          'String',
          'constructor',
          'parse',
          'toString'
        },
        assignments: [
          [ASTAssignmentStatement],
          [Circular *44],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 63, character: 6 },
        end: Position { line: 63, character: 16 },
        scope: <ref *13> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'message'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'm'
        }
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 63, character: 17 },
        end: Position { line: 63, character: 24 },
        scope: <ref *13> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'message'
      }
    },
    65 => <ref *45> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 65, character: 9 },
      end: Position { line: 65, character: 81 },
      scope: <ref *13> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 61, character: 21 },
        end: Position { line: 68, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(6) {
          'message',
          'm',
          'String',
          'constructor',
          'parse',
          'toString'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *45]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 65, character: 10 },
        end: Position { line: 65, character: 20 },
        scope: <ref *13> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'message'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'm'
        }
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 65, character: 79 },
        end: Position { line: 65, character: 81 },
        scope: <ref *13> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTCallExpression]
        },
        arguments: []
      }
    },
    64 => <ref *46> ASTIfStatement {
      type: 'IfStatement',
      start: Position { line: 64, character: 5 },
      end: Position { line: 66, character: 11 },
      scope: <ref *13> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 61, character: 21 },
        end: Position { line: 68, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *46],
          [ASTReturnStatement]
        ],
        namespaces: Set(6) {
          'message',
          'm',
          'String',
          'constructor',
          'parse',
          'toString'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      clauses: [
        ASTIfClause {
          type: 'IfClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTEvaluationExpression]
        }
      ]
    },
    67 => <ref *47> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 67, character: 5 },
      end: Position { line: 67, character: 13 },
      scope: <ref *13> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 61, character: 21 },
        end: Position { line: 68, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [Circular *47]
        ],
        namespaces: Set(6) {
          'message',
          'm',
          'String',
          'constructor',
          'parse',
          'toString'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      argument: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 67, character: 12 },
        end: Position { line: 67, character: 13 },
        scope: <ref *13> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'm'
      }
    },
    61 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 61, character: 1 },
      end: Position { line: 68, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 61, character: 6 },
        end: Position { line: 61, character: 20 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'constructor'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Error'
        }
      },
      init: <ref *13> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 61, character: 21 },
        end: Position { line: 68, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(6) {
          'message',
          'm',
          'String',
          'constructor',
          'parse',
          'toString'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    71 => <ref *48> ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 71, character: 5 },
      end: Position { line: 71, character: 56 },
      scope: <ref *14> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 70, character: 15 },
        end: Position { line: 72, character: 13 },
        scope: [Circular *1],
        body: [ [Circular *48] ],
        namespaces: Set(1) { 'message' },
        assignments: [],
        parameters: []
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 71, character: 9 },
        end: Position { line: 71, character: 56 },
        scope: <ref *14> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [],
          parameters: []
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'exit'
        },
        arguments: [ [ASTEvaluationExpression] ]
      }
    },
    70 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 70, character: 1 },
      end: Position { line: 72, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 70, character: 6 },
        end: Position { line: 70, character: 14 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'throw'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Error'
        }
      },
      init: <ref *14> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 70, character: 15 },
        end: Position { line: 72, character: 13 },
        scope: [Circular *1],
        body: [ [ASTCallStatement] ],
        namespaces: Set(1) { 'message' },
        assignments: [],
        parameters: []
      }
    },
    74 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 74, character: 1 },
      end: Position { line: 74, character: 12 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 74, character: 1 },
        end: Position { line: 74, character: 7 },
        scope: [Circular *1],
        name: 'Crypto'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 74, character: 10 },
        end: Position { line: 74, character: 12 },
        scope: [Circular *1],
        fields: []
      }
    },
    76 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 76, character: 1 },
      end: Position { line: 76, character: 91 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 76, character: 7 },
        end: Position { line: 76, character: 24 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'defaultCharset'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Crypto'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 76, character: 25 },
        end: Position { line: 76, character: 91 },
        scope: [Circular *1],
        value: 'QWERTZUIOPASDFGHJKLYXCVBNMqwertzuiopasdfghjklyxcvbnm1234567890+-',
        raw: '\\"QWERTZUIOPASDFGHJKLYXCVBNMqwertzuiopasdfghjklyxcvbnm1234567890+-\\"'
      }
    },
    77 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 77, character: 1 },
      end: Position { line: 77, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 77, character: 7 },
        end: Position { line: 77, character: 23 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'defaultSecret'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Crypto'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 77, character: 24 },
        end: Position { line: 77, character: 33 },
        scope: [Circular *1],
        value: 'test123',
        raw: '\\"test123\\"'
      }
    },
    78 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 78, character: 1 },
      end: Position { line: 78, character: 27 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 78, character: 7 },
        end: Position { line: 78, character: 21 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'maxCharCode'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Crypto'
        }
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 78, character: 22 },
        end: Position { line: 78, character: 27 },
        scope: [Circular *1],
        value: 55295,
        raw: '55295'
      }
    },
    79 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 79, character: 1 },
      end: Position { line: 79, character: 21 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 79, character: 7 },
        end: Position { line: 79, character: 15 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Error'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Crypto'
        }
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 79, character: 16 },
        end: Position { line: 79, character: 21 },
        scope: [Circular *1],
        name: 'Error'
      }
    },
    82 => <ref *49> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 82, character: 5 },
      end: Position { line: 82, character: 14 },
      scope: <ref *15> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 81, character: 22 },
        end: Position { line: 90, character: 13 },
        scope: [Circular *1],
        body: [
          [Circular *49],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'defaultSecret',
          'hashFn',
          'charset',
          'me',
          'table',
          'defaultCharset',
          'Error',
          'constructor',
          'throw'
        },
        assignments: [
          [Circular *49],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 82, character: 5 },
        end: Position { line: 82, character: 7 },
        scope: <ref *15> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'me'
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 82, character: 10 },
        end: Position { line: 82, character: 14 },
        scope: <ref *15> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'self'
      }
    },
    83 => <ref *50> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 83, character: 5 },
      end: Position { line: 83, character: 37 },
      scope: <ref *15> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 81, character: 22 },
        end: Position { line: 90, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [Circular *50],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'defaultSecret',
          'hashFn',
          'charset',
          'me',
          'table',
          'defaultCharset',
          'Error',
          'constructor',
          'throw'
        },
        assignments: [
          [ASTAssignmentStatement],
          [Circular *50],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 83, character: 7 },
        end: Position { line: 83, character: 23 },
        scope: <ref *15> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'defaultSecret'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'me'
        }
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 83, character: 24 },
        end: Position { line: 83, character: 37 },
        scope: <ref *15> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'defaultSecret'
      }
    },
    84 => <ref *51> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 84, character: 5 },
      end: Position { line: 84, character: 23 },
      scope: <ref *15> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 81, character: 22 },
        end: Position { line: 90, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *51],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'defaultSecret',
          'hashFn',
          'charset',
          'me',
          'table',
          'defaultCharset',
          'Error',
          'constructor',
          'throw'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *51],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 84, character: 7 },
        end: Position { line: 84, character: 15 },
        scope: <ref *15> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'table'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'me'
        }
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 84, character: 16 },
        end: Position { line: 84, character: 23 },
        scope: <ref *15> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'charset'
      }
    },
    85 => <ref *52> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 85, character: 5 },
      end: Position { line: 85, character: 24 },
      scope: <ref *15> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 81, character: 22 },
        end: Position { line: 90, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *52],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'defaultSecret',
          'hashFn',
          'charset',
          'me',
          'table',
          'defaultCharset',
          'Error',
          'constructor',
          'throw'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *52],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 85, character: 7 },
        end: Position { line: 85, character: 16 },
        scope: <ref *15> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'hashFn'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'me'
        }
      },
      init: ASTUnaryExpression {
        type: 'UnaryExpression',
        start: Position { line: 85, character: 17 },
        end: Position { line: 85, character: 24 },
        scope: <ref *15> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        argument: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'hashFn'
        },
        operator: '@'
      }
    },
    86 => <ref *53> ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 86, character: 5 },
      end: Position { line: 86, character: 47 },
      scope: <ref *15> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 81, character: 22 },
        end: Position { line: 90, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *53],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'defaultSecret',
          'hashFn',
          'charset',
          'me',
          'table',
          'defaultCharset',
          'Error',
          'constructor',
          'throw'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier], [ASTIdentifier] ]
      },
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTEvaluationExpression]
        }
      ]
    },
    87 => <ref *54> ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 87, character: 5 },
      end: Position { line: 87, character: 57 },
      scope: <ref *15> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 81, character: 22 },
        end: Position { line: 90, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [Circular *54],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'defaultSecret',
          'hashFn',
          'charset',
          'me',
          'table',
          'defaultCharset',
          'Error',
          'constructor',
          'throw'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier], [ASTIdentifier] ]
      },
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTEvaluationExpression]
        }
      ]
    },
    88 => <ref *55> ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 88, character: 5 },
      end: Position { line: 88, character: 103 },
      scope: <ref *15> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 81, character: 22 },
        end: Position { line: 90, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [Circular *55],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'defaultSecret',
          'hashFn',
          'charset',
          'me',
          'table',
          'defaultCharset',
          'Error',
          'constructor',
          'throw'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier], [ASTIdentifier] ]
      },
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTEvaluationExpression]
        }
      ]
    },
    89 => <ref *56> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 89, character: 5 },
      end: Position { line: 89, character: 14 },
      scope: <ref *15> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 81, character: 22 },
        end: Position { line: 90, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [Circular *56]
        ],
        namespaces: Set(9) {
          'defaultSecret',
          'hashFn',
          'charset',
          'me',
          'table',
          'defaultCharset',
          'Error',
          'constructor',
          'throw'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier], [ASTIdentifier] ]
      },
      argument: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 89, character: 12 },
        end: Position { line: 89, character: 14 },
        scope: <ref *15> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'me'
      }
    },
    81 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 81, character: 1 },
      end: Position { line: 90, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 81, character: 7 },
        end: Position { line: 81, character: 21 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'constructor'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Crypto'
        }
      },
      init: <ref *15> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 81, character: 22 },
        end: Position { line: 90, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'defaultSecret',
          'hashFn',
          'charset',
          'me',
          'table',
          'defaultCharset',
          'Error',
          'constructor',
          'throw'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    93 => <ref *57> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 93, character: 5 },
      end: Position { line: 93, character: 14 },
      scope: <ref *16> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 92, character: 18 },
        end: Position { line: 101, character: 13 },
        scope: [Circular *1],
        body: [
          [Circular *57],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTCallStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'pw', 'me', 'x', 'hashFn', 'reverse' },
        assignments: [
          [Circular *57],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 93, character: 5 },
        end: Position { line: 93, character: 7 },
        scope: <ref *16> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'me'
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 93, character: 10 },
        end: Position { line: 93, character: 14 },
        scope: <ref *16> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'self'
      }
    },
    94 => <ref *58> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 94, character: 5 },
      end: Position { line: 94, character: 14 },
      scope: <ref *16> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 92, character: 18 },
        end: Position { line: 101, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [Circular *58],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTCallStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'pw', 'me', 'x', 'hashFn', 'reverse' },
        assignments: [
          [ASTAssignmentStatement],
          [Circular *58],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 94, character: 5 },
        end: Position { line: 94, character: 9 },
        scope: <ref *16> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'hash'
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 94, character: 12 },
        end: Position { line: 94, character: 14 },
        scope: <ref *16> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        fields: []
      }
    },
    95 => <ref *59> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 95, character: 5 },
      end: Position { line: 95, character: 22 },
      scope: <ref *16> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 92, character: 18 },
        end: Position { line: 101, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *59],
          [ASTForGenericStatement],
          [ASTCallStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'pw', 'me', 'x', 'hashFn', 'reverse' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *59]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 95, character: 5 },
        end: Position { line: 95, character: 6 },
        scope: <ref *16> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'x'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 95, character: 18 },
        end: Position { line: 95, character: 22 },
        scope: <ref *16> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTIdentifier] ]
      }
    },
    97 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 97, character: 9 },
      end: Position { line: 97, character: 29 },
      scope: <ref *16> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 92, character: 18 },
        end: Position { line: 101, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTCallStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'pw', 'me', 'x', 'hashFn', 'reverse' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 97, character: 18 },
        end: Position { line: 97, character: 29 },
        scope: <ref *16> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTMemberExpression] ]
      }
    },
    96 => <ref *60> ASTForGenericStatement {
      type: 'ForGenericStatement',
      start: Position { line: 96, character: 5 },
      end: Position { line: 98, character: 12 },
      scope: <ref *16> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 92, character: 18 },
        end: Position { line: 101, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *60],
          [ASTCallStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'pw', 'me', 'x', 'hashFn', 'reverse' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          expression: [ASTCallExpression]
        }
      ],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 96, character: 9 },
        end: Position { line: 96, character: 13 },
        scope: <ref *16> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'char'
      },
      iterator: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 96, character: 17 },
        end: Position { line: 96, character: 18 },
        scope: <ref *16> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'x'
      }
    },
    99 => <ref *61> ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 99, character: 5 },
      end: Position { line: 99, character: 17 },
      scope: <ref *16> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 92, character: 18 },
        end: Position { line: 101, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [Circular *61],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'pw', 'me', 'x', 'hashFn', 'reverse' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      expression: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 99, character: 9 },
        end: Position { line: 99, character: 17 },
        scope: <ref *16> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'reverse'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'hash'
        }
      }
    },
    100 => <ref *62> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 100, character: 5 },
      end: Position { line: 100, character: 16 },
      scope: <ref *16> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 92, character: 18 },
        end: Position { line: 101, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTCallStatement],
          [Circular *62]
        ],
        namespaces: Set(5) { 'pw', 'me', 'x', 'hashFn', 'reverse' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      argument: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 100, character: 12 },
        end: Position { line: 100, character: 16 },
        scope: <ref *16> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'hash'
      }
    },
    92 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 92, character: 1 },
      end: Position { line: 101, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 92, character: 7 },
        end: Position { line: 92, character: 17 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'getHash'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Crypto'
        }
      },
      init: <ref *16> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 92, character: 18 },
        end: Position { line: 101, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTCallStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'pw', 'me', 'x', 'hashFn', 'reverse' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    104 => <ref *63> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 104, character: 5 },
      end: Position { line: 104, character: 14 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [Circular *63],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [Circular *63],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 104, character: 5 },
        end: Position { line: 104, character: 7 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'me'
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 104, character: 10 },
        end: Position { line: 104, character: 14 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'self'
      }
    },
    105 => <ref *64> ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 105, character: 5 },
      end: Position { line: 105, character: 47 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [Circular *64],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTEvaluationExpression]
        }
      ]
    },
    106 => <ref *65> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 106, character: 5 },
      end: Position { line: 106, character: 26 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [Circular *65],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *65],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 106, character: 5 },
        end: Position { line: 106, character: 9 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'hash'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 106, character: 22 },
        end: Position { line: 106, character: 26 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTIdentifier] ]
      }
    },
    107 => <ref *66> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 107, character: 5 },
      end: Position { line: 107, character: 20 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [Circular *66],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *66],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 107, character: 5 },
        end: Position { line: 107, character: 16 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'hashPointer'
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 107, character: 19 },
        end: Position { line: 107, character: 20 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        value: 0,
        raw: '0'
      }
    },
    108 => <ref *67> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 108, character: 5 },
      end: Position { line: 108, character: 16 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *67],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *67],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 108, character: 5 },
        end: Position { line: 108, character: 11 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'output'
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 108, character: 14 },
        end: Position { line: 108, character: 16 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        fields: []
      }
    },
    109 => <ref *68> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 109, character: 5 },
      end: Position { line: 109, character: 17 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *68],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *68],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 109, character: 5 },
        end: Position { line: 109, character: 13 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'position'
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 109, character: 16 },
        end: Position { line: 109, character: 17 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        value: 0,
        raw: '0'
      }
    },
    110 => <ref *69> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 110, character: 5 },
      end: Position { line: 110, character: 26 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *69],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *69],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 110, character: 5 },
        end: Position { line: 110, character: 12 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'padding'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 110, character: 23 },
        end: Position { line: 110, character: 26 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '%',
        left: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        right: ASTLiteral {
          type: 'NumericLiteral',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          value: 3,
          raw: '3'
        }
      }
    },
    111 => <ref *70> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 111, character: 5 },
      end: Position { line: 111, character: 28 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *70],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *70],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 111, character: 5 },
        end: Position { line: 111, character: 8 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'max'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 111, character: 19 },
        end: Position { line: 111, character: 28 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '-',
        left: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'padding'
        }
      }
    },
    114 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 114, character: 13 },
      end: Position { line: 114, character: 75 },
      scope: <ref *18> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 112, character: 11 },
        end: Position { line: 117, character: 17 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTIfStatement], [ASTReturnStatement] ],
        namespaces: Set(6) { 'v', 'me', 'table', 'Error', 'constructor', 'throw' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 114, character: 73 },
        end: Position { line: 114, character: 75 },
        scope: <ref *18> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTCallExpression]
        },
        arguments: []
      }
    },
    113 => <ref *71> ASTIfStatement {
      type: 'IfStatement',
      start: Position { line: 113, character: 9 },
      end: Position { line: 115, character: 15 },
      scope: <ref *18> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 112, character: 11 },
        end: Position { line: 117, character: 17 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [Circular *71], [ASTReturnStatement] ],
        namespaces: Set(6) { 'v', 'me', 'table', 'Error', 'constructor', 'throw' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      },
      clauses: [
        ASTIfClause {
          type: 'IfClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTUnaryExpression]
        }
      ]
    },
    116 => <ref *72> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 116, character: 9 },
      end: Position { line: 116, character: 27 },
      scope: <ref *18> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 112, character: 11 },
        end: Position { line: 117, character: 17 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTIfStatement], [Circular *72] ],
        namespaces: Set(6) { 'v', 'me', 'table', 'Error', 'constructor', 'throw' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      },
      argument: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 116, character: 25 },
        end: Position { line: 116, character: 27 },
        scope: <ref *18> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        index: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'v'
        }
      }
    },
    112 => <ref *73> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 112, character: 5 },
      end: Position { line: 117, character: 17 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *73],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *73],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 112, character: 5 },
        end: Position { line: 112, character: 8 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'get'
      },
      init: <ref *18> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 112, character: 11 },
        end: Position { line: 117, character: 17 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTIfStatement], [ASTReturnStatement] ],
        namespaces: Set(6) { 'v', 'me', 'table', 'Error', 'constructor', 'throw' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      }
    },
    119 => <ref *74> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 119, character: 9 },
      end: Position { line: 119, character: 34 },
      scope: <ref *19> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 118, character: 11 },
        end: Position { line: 120, character: 17 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [Circular *74] ],
        namespaces: Set(2) { 'a', 'b' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      argument: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 119, character: 23 },
        end: Position { line: 119, character: 34 },
        scope: <ref *19> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'bitwise'
        },
        arguments: [ [ASTLiteral], [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    118 => <ref *75> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 118, character: 5 },
      end: Position { line: 120, character: 17 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *75],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *75],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 118, character: 5 },
        end: Position { line: 118, character: 8 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'AND'
      },
      init: <ref *19> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 118, character: 11 },
        end: Position { line: 120, character: 17 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(2) { 'a', 'b' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    122 => <ref *76> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 122, character: 9 },
      end: Position { line: 122, character: 35 },
      scope: <ref *20> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 121, character: 14 },
        end: Position { line: 123, character: 17 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [Circular *76] ],
        namespaces: Set(2) { 'a', 'b' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      argument: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 122, character: 23 },
        end: Position { line: 122, character: 35 },
        scope: <ref *20> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'bitwise'
        },
        arguments: [ [ASTLiteral], [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    121 => <ref *77> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 121, character: 5 },
      end: Position { line: 123, character: 17 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *77],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *77],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 121, character: 5 },
        end: Position { line: 121, character: 11 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'LSHIFT'
      },
      init: <ref *20> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 121, character: 14 },
        end: Position { line: 123, character: 17 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(2) { 'a', 'b' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    125 => <ref *78> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 125, character: 9 },
      end: Position { line: 125, character: 35 },
      scope: <ref *21> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [Circular *78] ],
        namespaces: Set(2) { 'a', 'b' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      argument: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 125, character: 23 },
        end: Position { line: 125, character: 35 },
        scope: <ref *21> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'bitwise'
        },
        arguments: [ [ASTLiteral], [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    124 => <ref *79> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 124, character: 5 },
      end: Position { line: 126, character: 17 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *79],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *79],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 124, character: 5 },
        end: Position { line: 124, character: 11 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'RSHIFT'
      },
      init: <ref *21> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(2) { 'a', 'b' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    128 => <ref *80> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 128, character: 9 },
      end: Position { line: 128, character: 42 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *80],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 128, character: 9 },
        end: Position { line: 128, character: 10 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'm'
      },
      init: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 128, character: 18 },
        end: Position { line: 128, character: 42 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'hash'
        },
        index: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          operator: '-',
          left: [ASTEvaluationExpression],
          right: [ASTLiteral]
        }
      }
    },
    129 => <ref *81> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 129, character: 9 },
      end: Position { line: 129, character: 47 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *81],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 129, character: 9 },
        end: Position { line: 129, character: 10 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'a'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 129, character: 19 },
        end: Position { line: 129, character: 47 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'LSHIFT'
        },
        arguments: [ [ASTEvaluationExpression], [ASTLiteral] ]
      }
    },
    130 => <ref *82> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 130, character: 9 },
      end: Position { line: 130, character: 50 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *82],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 130, character: 9 },
        end: Position { line: 130, character: 10 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'b'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 130, character: 19 },
        end: Position { line: 130, character: 50 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'LSHIFT'
        },
        arguments: [ [ASTEvaluationExpression], [ASTLiteral] ]
      }
    },
    131 => <ref *83> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 131, character: 9 },
      end: Position { line: 131, character: 39 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *83],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 131, character: 9 },
        end: Position { line: 131, character: 10 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'c'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 131, character: 36 },
        end: Position { line: 131, character: 39 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '+',
        left: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIndexExpression]
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'm'
        }
      }
    },
    132 => <ref *84> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 132, character: 9 },
      end: Position { line: 132, character: 27 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *84],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 132, character: 9 },
        end: Position { line: 132, character: 15 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'buffer'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 132, character: 20 },
        end: Position { line: 132, character: 27 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '+',
        left: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          operator: '+',
          left: [ASTIdentifier],
          right: [ASTIdentifier]
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'c'
        }
      }
    },
    133 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 133, character: 9 },
      end: Position { line: 133, character: 54 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 133, character: 20 },
        end: Position { line: 133, character: 54 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTCallExpression] ]
      }
    },
    134 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 134, character: 9 },
      end: Position { line: 134, character: 54 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 134, character: 20 },
        end: Position { line: 134, character: 54 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTCallExpression] ]
      }
    },
    135 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 135, character: 9 },
      end: Position { line: 135, character: 53 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 135, character: 20 },
        end: Position { line: 135, character: 53 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTCallExpression] ]
      }
    },
    136 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 136, character: 9 },
      end: Position { line: 136, character: 42 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 136, character: 20 },
        end: Position { line: 136, character: 42 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTCallExpression] ]
      }
    },
    137 => <ref *85> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 137, character: 9 },
      end: Position { line: 137, character: 32 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *85],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 137, character: 9 },
        end: Position { line: 137, character: 17 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'position'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 137, character: 29 },
        end: Position { line: 137, character: 32 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '+',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'position'
        },
        right: ASTLiteral {
          type: 'NumericLiteral',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          value: 3,
          raw: '3'
        }
      }
    },
    127 => <ref *86> ASTWhileStatement {
      type: 'WhileStatement',
      start: Position { line: 127, character: 5 },
      end: Position { line: 138, character: 14 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *86],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      body: [
        <ref *80> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTIndexExpression]
        },
        <ref *81> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        <ref *82> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        <ref *83> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        <ref *84> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          expression: [ASTCallExpression]
        },
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          expression: [ASTCallExpression]
        },
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          expression: [ASTCallExpression]
        },
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          expression: [ASTCallExpression]
        },
        <ref *85> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        }
      ],
      condition: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 127, character: 20 },
        end: Position { line: 127, character: 25 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '<',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'position'
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'max'
        }
      }
    },
    140 => <ref *87> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 140, character: 9 },
      end: Position { line: 140, character: 42 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *87],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 140, character: 9 },
        end: Position { line: 140, character: 10 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'm'
      },
      init: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 140, character: 18 },
        end: Position { line: 140, character: 42 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'hash'
        },
        index: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          operator: '-',
          left: [ASTEvaluationExpression],
          right: [ASTLiteral]
        }
      }
    },
    141 => <ref *88> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 141, character: 9 },
      end: Position { line: 141, character: 46 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *88],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 141, character: 9 },
        end: Position { line: 141, character: 10 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'a'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 141, character: 19 },
        end: Position { line: 141, character: 46 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'LSHIFT'
        },
        arguments: [ [ASTEvaluationExpression], [ASTLiteral] ]
      }
    },
    142 => <ref *89> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 142, character: 9 },
      end: Position { line: 142, character: 39 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *89],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 142, character: 9 },
        end: Position { line: 142, character: 10 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'b'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 142, character: 36 },
        end: Position { line: 142, character: 39 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '+',
        left: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIndexExpression]
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'm'
        }
      }
    },
    143 => <ref *90> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 143, character: 9 },
      end: Position { line: 143, character: 23 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *90],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 143, character: 9 },
        end: Position { line: 143, character: 15 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'buffer'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 143, character: 20 },
        end: Position { line: 143, character: 23 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '+',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'a'
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'b'
        }
      }
    },
    144 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 144, character: 9 },
      end: Position { line: 144, character: 45 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 144, character: 20 },
        end: Position { line: 144, character: 45 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTCallExpression] ]
      }
    },
    145 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 145, character: 9 },
      end: Position { line: 145, character: 53 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 145, character: 20 },
        end: Position { line: 145, character: 53 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTCallExpression] ]
      }
    },
    146 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 146, character: 9 },
      end: Position { line: 146, character: 53 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 146, character: 20 },
        end: Position { line: 146, character: 53 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTCallExpression] ]
      }
    },
    147 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 147, character: 9 },
      end: Position { line: 147, character: 25 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 147, character: 20 },
        end: Position { line: 147, character: 25 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    149 => <ref *91> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 149, character: 9 },
      end: Position { line: 149, character: 42 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *91],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 149, character: 9 },
        end: Position { line: 149, character: 10 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'm'
      },
      init: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 149, character: 18 },
        end: Position { line: 149, character: 42 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'hash'
        },
        index: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          operator: '-',
          left: [ASTEvaluationExpression],
          right: [ASTLiteral]
        }
      }
    },
    150 => <ref *92> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 150, character: 9 },
      end: Position { line: 150, character: 40 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *92]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 150, character: 9 },
        end: Position { line: 150, character: 15 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'buffer'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 150, character: 37 },
        end: Position { line: 150, character: 40 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '+',
        left: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIndexExpression]
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'm'
        }
      }
    },
    151 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 151, character: 9 },
      end: Position { line: 151, character: 44 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 151, character: 20 },
        end: Position { line: 151, character: 44 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTCallExpression] ]
      }
    },
    152 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 152, character: 9 },
      end: Position { line: 152, character: 53 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 152, character: 20 },
        end: Position { line: 152, character: 53 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTCallExpression] ]
      }
    },
    153 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 153, character: 9 },
      end: Position { line: 153, character: 26 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 153, character: 20 },
        end: Position { line: 153, character: 26 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    139 => <ref *93> ASTIfStatement {
      type: 'IfStatement',
      start: Position { line: 139, character: 5 },
      end: Position { line: 154, character: 11 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [Circular *93],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      clauses: [
        ASTIfClause {
          type: 'IfClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTEvaluationExpression]
        },
        ASTIfClause {
          type: 'ElseifClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTEvaluationExpression]
        }
      ]
    },
    155 => <ref *94> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 155, character: 5 },
      end: Position { line: 155, character: 27 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [Circular *94]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      argument: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 155, character: 23 },
        end: Position { line: 155, character: 27 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    103 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 103, character: 1 },
      end: Position { line: 156, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 103, character: 7 },
        end: Position { line: 103, character: 17 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'encrypt'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Crypto'
        }
      },
      init: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    159 => <ref *95> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 159, character: 5 },
      end: Position { line: 159, character: 14 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [Circular *95],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [Circular *95],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 159, character: 5 },
        end: Position { line: 159, character: 7 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'me'
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 159, character: 10 },
        end: Position { line: 159, character: 14 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'self'
      }
    },
    160 => <ref *96> ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 160, character: 5 },
      end: Position { line: 160, character: 47 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [Circular *96],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTEvaluationExpression]
        }
      ]
    },
    161 => <ref *97> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 161, character: 5 },
      end: Position { line: 161, character: 26 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [Circular *97],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *97],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 161, character: 5 },
        end: Position { line: 161, character: 9 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'hash'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 161, character: 22 },
        end: Position { line: 161, character: 26 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTIdentifier] ]
      }
    },
    162 => <ref *98> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 162, character: 5 },
      end: Position { line: 162, character: 20 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [Circular *98],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *98],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 162, character: 5 },
        end: Position { line: 162, character: 16 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'hashPointer'
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 162, character: 19 },
        end: Position { line: 162, character: 20 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        value: 0,
        raw: '0'
      }
    },
    163 => <ref *99> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 163, character: 5 },
      end: Position { line: 163, character: 26 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *99],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *99],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 163, character: 5 },
        end: Position { line: 163, character: 15 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'hashLength'
      },
      init: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 163, character: 22 },
        end: Position { line: 163, character: 26 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'len'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'hash'
        }
      }
    },
    164 => <ref *100> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 164, character: 5 },
      end: Position { line: 164, character: 16 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *100],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *100],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 164, character: 5 },
        end: Position { line: 164, character: 11 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'output'
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 164, character: 14 },
        end: Position { line: 164, character: 16 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        fields: []
      }
    },
    165 => <ref *101> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 165, character: 5 },
      end: Position { line: 165, character: 19 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *101],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *101],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 165, character: 5 },
        end: Position { line: 165, character: 15 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'bitCounter'
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 165, character: 18 },
        end: Position { line: 165, character: 19 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        value: 0,
        raw: '0'
      }
    },
    166 => <ref *102> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 166, character: 5 },
      end: Position { line: 166, character: 19 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *102],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *102],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 166, character: 5 },
        end: Position { line: 166, character: 15 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'bitStorage'
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 166, character: 18 },
        end: Position { line: 166, character: 19 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        value: 0,
        raw: '0'
      }
    },
    167 => <ref *103> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 167, character: 5 },
      end: Position { line: 167, character: 17 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *103],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *103],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 167, character: 5 },
        end: Position { line: 167, character: 13 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'position'
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 167, character: 16 },
        end: Position { line: 167, character: 17 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        value: 0,
        raw: '0'
      }
    },
    168 => <ref *104> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 168, character: 5 },
      end: Position { line: 168, character: 20 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *104],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *104],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 168, character: 5 },
        end: Position { line: 168, character: 16 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'hashPointer'
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 168, character: 19 },
        end: Position { line: 168, character: 20 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        value: 0,
        raw: '0'
      }
    },
    169 => <ref *105> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 169, character: 5 },
      end: Position { line: 169, character: 18 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *105],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *105],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 169, character: 5 },
        end: Position { line: 169, character: 8 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'max'
      },
      init: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 169, character: 14 },
        end: Position { line: 169, character: 18 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'len'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'str'
        }
      }
    },
    171 => <ref *106> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 171, character: 9 },
      end: Position { line: 171, character: 34 },
      scope: <ref *23> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 170, character: 11 },
        end: Position { line: 172, character: 17 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [Circular *106] ],
        namespaces: Set(2) { 'a', 'b' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      argument: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 171, character: 23 },
        end: Position { line: 171, character: 34 },
        scope: <ref *23> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'bitwise'
        },
        arguments: [ [ASTLiteral], [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    170 => <ref *107> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 170, character: 5 },
      end: Position { line: 172, character: 17 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *107],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *107],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 170, character: 5 },
        end: Position { line: 170, character: 8 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'AND'
      },
      init: <ref *23> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 170, character: 11 },
        end: Position { line: 172, character: 17 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(2) { 'a', 'b' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    174 => <ref *108> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 174, character: 9 },
      end: Position { line: 174, character: 35 },
      scope: <ref *24> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 173, character: 14 },
        end: Position { line: 175, character: 17 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [Circular *108] ],
        namespaces: Set(2) { 'a', 'b' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      argument: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 174, character: 23 },
        end: Position { line: 174, character: 35 },
        scope: <ref *24> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'bitwise'
        },
        arguments: [ [ASTLiteral], [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    173 => <ref *109> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 173, character: 5 },
      end: Position { line: 175, character: 17 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *109],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *109],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 173, character: 5 },
        end: Position { line: 173, character: 11 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'RSHIFT'
      },
      init: <ref *24> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 173, character: 14 },
        end: Position { line: 175, character: 17 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(2) { 'a', 'b' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    177 => <ref *110> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 177, character: 9 },
      end: Position { line: 177, character: 49 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *110],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 177, character: 9 },
        end: Position { line: 177, character: 15 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'buffer'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 177, character: 34 },
        end: Position { line: 177, character: 49 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTMemberExpression]
        },
        arguments: [ [ASTIndexExpression] ]
      }
    },
    178 => <ref *111> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 178, character: 9 },
      end: Position { line: 178, character: 32 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *111],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 178, character: 9 },
        end: Position { line: 178, character: 19 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'currentBit'
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 178, character: 22 },
        end: Position { line: 178, character: 32 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'bitCounter'
      }
    },
    179 => <ref *112> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 179, character: 9 },
      end: Position { line: 179, character: 36 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *112],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 179, character: 9 },
        end: Position { line: 179, character: 19 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'bitCounter'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 179, character: 33 },
        end: Position { line: 179, character: 36 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '+',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'bitCounter'
        },
        right: ASTLiteral {
          type: 'NumericLiteral',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          value: 1,
          raw: '1'
        }
      }
    },
    181 => <ref *113> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 181, character: 13 },
      end: Position { line: 181, character: 50 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *113],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 181, character: 13 },
        end: Position { line: 181, character: 23 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'bitStorage'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 181, character: 37 },
        end: Position { line: 181, character: 50 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '+',
        left: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          operator: '*',
          left: [ASTIdentifier],
          right: [ASTLiteral]
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'buffer'
        }
      }
    },
    183 => <ref *114> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 183, character: 13 },
      end: Position { line: 183, character: 32 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *114],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 183, character: 13 },
        end: Position { line: 183, character: 23 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'bitStorage'
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 183, character: 26 },
        end: Position { line: 183, character: 32 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'buffer'
      }
    },
    180 => ASTIfStatement {
      type: 'IfStatement',
      start: Position { line: 180, character: 9 },
      end: Position { line: 184, character: 15 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      clauses: [
        ASTIfClause {
          type: 'IfClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTEvaluationExpression]
        },
        ASTElseClause {
          type: 'ElseClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array]
        }
      ]
    },
    186 => <ref *115> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 186, character: 13 },
      end: Position { line: 186, character: 78 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *115],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 186, character: 13 },
        end: Position { line: 186, character: 30 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'expectedHashIndex'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 186, character: 62 },
        end: Position { line: 186, character: 78 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '-',
        left: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          operator: '%',
          left: [ASTEvaluationExpression],
          right: [ASTIdentifier]
        },
        right: ASTLiteral {
          type: 'NumericLiteral',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          value: 1,
          raw: '1'
        }
      }
    },
    187 => ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 187, character: 13 },
      end: Position { line: 187, character: 65 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTUnaryExpression]
        }
      ]
    },
    188 => <ref *116> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 188, character: 13 },
      end: Position { line: 188, character: 40 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *116],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 188, character: 13 },
        end: Position { line: 188, character: 14 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'm'
      },
      init: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 188, character: 22 },
        end: Position { line: 188, character: 40 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'hash'
        },
        index: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'expectedHashIndex'
        }
      }
    },
    189 => <ref *117> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 189, character: 13 },
      end: Position { line: 189, character: 48 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *117],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 189, character: 13 },
        end: Position { line: 189, character: 22 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'operation'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 189, character: 28 },
        end: Position { line: 189, character: 48 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'AND'
        },
        arguments: [ [ASTEvaluationExpression], [ASTLiteral] ]
      }
    },
    190 => <ref *118> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 190, character: 13 },
      end: Position { line: 190, character: 54 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *118],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 190, character: 13 },
        end: Position { line: 190, character: 22 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'operation'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 190, character: 31 },
        end: Position { line: 190, character: 54 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'RSHIFT'
        },
        arguments: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    191 => <ref *119> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 191, character: 13 },
      end: Position { line: 191, character: 44 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *119],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 191, character: 13 },
        end: Position { line: 191, character: 22 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'operation'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 191, character: 28 },
        end: Position { line: 191, character: 44 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'AND'
        },
        arguments: [ [ASTLiteral], [ASTIdentifier] ]
      }
    },
    193 => <ref *120> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 193, character: 17 },
      end: Position { line: 193, character: 41 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *120],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 193, character: 17 },
        end: Position { line: 193, character: 25 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'charCode'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 193, character: 38 },
        end: Position { line: 193, character: 41 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '-',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'operation'
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'm'
        }
      }
    },
    194 => ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 194, character: 17 },
      end: Position { line: 194, character: 58 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTEvaluationExpression]
        }
      ]
    },
    195 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 195, character: 17 },
      end: Position { line: 195, character: 44 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 195, character: 28 },
        end: Position { line: 195, character: 44 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTCallExpression] ]
      }
    },
    192 => ASTIfStatement {
      type: 'IfStatement',
      start: Position { line: 192, character: 13 },
      end: Position { line: 196, character: 19 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      clauses: [
        ASTIfClause {
          type: 'IfClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTEvaluationExpression]
        }
      ]
    },
    197 => <ref *121> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 197, character: 13 },
      end: Position { line: 197, character: 42 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *121],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 197, character: 13 },
        end: Position { line: 197, character: 24 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'hashPointer'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 197, character: 39 },
        end: Position { line: 197, character: 42 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '+',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'hashPointer'
        },
        right: ASTLiteral {
          type: 'NumericLiteral',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          value: 1,
          raw: '1'
        }
      }
    },
    185 => ASTIfStatement {
      type: 'IfStatement',
      start: Position { line: 185, character: 9 },
      end: Position { line: 198, character: 15 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      clauses: [
        ASTIfClause {
          type: 'IfClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTEvaluationExpression]
        }
      ]
    },
    199 => <ref *122> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 199, character: 9 },
      end: Position { line: 199, character: 32 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *122]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 199, character: 9 },
        end: Position { line: 199, character: 17 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'position'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 199, character: 29 },
        end: Position { line: 199, character: 32 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '+',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'position'
        },
        right: ASTLiteral {
          type: 'NumericLiteral',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          value: 1,
          raw: '1'
        }
      }
    },
    176 => <ref *123> ASTWhileStatement {
      type: 'WhileStatement',
      start: Position { line: 176, character: 5 },
      end: Position { line: 200, character: 14 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *123],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      body: [
        <ref *110> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        <ref *111> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        <ref *112> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTIfStatement {
          type: 'IfStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          clauses: [Array]
        },
        ASTIfStatement {
          type: 'IfStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          clauses: [Array]
        },
        <ref *122> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        }
      ],
      condition: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 176, character: 20 },
        end: Position { line: 176, character: 25 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '<',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'position'
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'max'
        }
      }
    },
    201 => <ref *124> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 201, character: 5 },
      end: Position { line: 201, character: 27 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [Circular *124]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      argument: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 201, character: 23 },
        end: Position { line: 201, character: 27 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    158 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 158, character: 1 },
      end: Position { line: 202, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 158, character: 7 },
        end: Position { line: 158, character: 17 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'decrypt'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Crypto'
        }
      },
      init: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    204 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 204, character: 1 },
      end: Position { line: 204, character: 40 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 204, character: 1 },
        end: Position { line: 204, character: 5 },
        scope: [Circular *1],
        name: 'test'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 204, character: 32 },
        end: Position { line: 204, character: 40 },
        scope: [Circular *1],
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTUnaryExpression]
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    206 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 206, character: 1 },
      end: Position { line: 206, character: 14 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 206, character: 1 },
        end: Position { line: 206, character: 4 },
        scope: [Circular *1],
        name: 'pwd'
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 206, character: 7 },
        end: Position { line: 206, character: 14 },
        scope: [Circular *1],
        value: 'abcde',
        raw: '\\"abcde\\"'
      }
    },
    208 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 208, character: 1 },
      end: Position { line: 208, character: 24 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 208, character: 1 },
        end: Position { line: 208, character: 4 },
        scope: [Circular *1],
        name: 'foo'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 208, character: 19 },
        end: Position { line: 208, character: 24 },
        scope: [Circular *1],
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTIdentifier] ]
      }
    },
    209 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 209, character: 1 },
      end: Position { line: 209, character: 30 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 209, character: 1 },
        end: Position { line: 209, character: 10 },
        scope: [Circular *1],
        name: 'decrypted'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 209, character: 25 },
        end: Position { line: 209, character: 30 },
        scope: [Circular *1],
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTIdentifier] ]
      }
    },
    211 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 211, character: 1 },
      end: Position { line: 211, character: 11 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 211, character: 6 },
        end: Position { line: 211, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTIdentifier] ]
      }
    },
    212 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 212, character: 1 },
      end: Position { line: 212, character: 17 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 212, character: 6 },
        end: Position { line: 212, character: 17 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTIdentifier] ]
      }
    }
  }
}"
`;

exports[`parse default scripts pseudo-crypto.src unsafe 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 213, character: 1 },
  scope: null,
  body: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 12 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 7 },
        scope: [Circular *1],
        name: 'String'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 10 },
        end: Position { line: 1, character: 12 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 6, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 3, character: 7 },
        end: Position { line: 3, character: 21 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'constructor'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 3, character: 22 },
        end: Position { line: 6, character: 13 },
        scope: [Circular *1],
        body: [ [ASTAssignmentStatement], [ASTReturnStatement] ],
        namespaces: Set(0) {},
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 8, character: 1 },
      end: Position { line: 19, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 8, character: 7 },
        end: Position { line: 8, character: 15 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'parse'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 16 },
        end: Position { line: 19, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) {
          'result',
          'index',
          'maxIndex',
          'replace',
          'constructor'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 21, character: 1 },
      end: Position { line: 23, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 21, character: 7 },
        end: Position { line: 21, character: 20 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'startsWith'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 21, character: 21 },
        end: Position { line: 23, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(0) {},
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 25, character: 1 },
      end: Position { line: 27, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 25, character: 7 },
        end: Position { line: 25, character: 16 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'substr'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 25, character: 17 },
        end: Position { line: 27, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'startIndex', 'endIndex', 'constructor' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 29, character: 1 },
      end: Position { line: 31, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 29, character: 7 },
        end: Position { line: 29, character: 17 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'indexOf'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 29, character: 18 },
        end: Position { line: 31, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(0) {},
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 33, character: 1 },
      end: Position { line: 35, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 33, character: 7 },
        end: Position { line: 33, character: 17 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'replace'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 18 },
        end: Position { line: 35, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'newStr', 'constructor', 'replace' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 37, character: 1 },
      end: Position { line: 39, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 37, character: 7 },
        end: Position { line: 37, character: 16 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'remove'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 37, character: 17 },
        end: Position { line: 39, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'constructor' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 41, character: 1 },
      end: Position { line: 43, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 41, character: 7 },
        end: Position { line: 41, character: 18 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'toString'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 41, character: 19 },
        end: Position { line: 43, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(0) {},
        assignments: [],
        parameters: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 45, character: 1 },
      end: Position { line: 47, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 45, character: 7 },
        end: Position { line: 45, character: 16 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'length'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 17 },
        end: Position { line: 47, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(0) {},
        assignments: [],
        parameters: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 49, character: 1 },
      end: Position { line: 51, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 49, character: 7 },
        end: Position { line: 49, character: 15 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'split'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 49, character: 16 },
        end: Position { line: 51, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(2) { 'seperator', 'split' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 53, character: 1 },
      end: Position { line: 55, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 53, character: 7 },
        end: Position { line: 53, character: 14 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'trim'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 53, character: 15 },
        end: Position { line: 55, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'seperator', 'constructor', 'trim' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 57, character: 1 },
      end: Position { line: 57, character: 11 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 57, character: 1 },
        end: Position { line: 57, character: 6 },
        scope: [Circular *1],
        name: 'Error'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 57, character: 9 },
        end: Position { line: 57, character: 11 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 59, character: 1 },
      end: Position { line: 59, character: 22 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 59, character: 6 },
        end: Position { line: 59, character: 15 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Error'
        }
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 59, character: 16 },
        end: Position { line: 59, character: 22 },
        scope: [Circular *1],
        name: 'String'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 61, character: 1 },
      end: Position { line: 68, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 61, character: 6 },
        end: Position { line: 61, character: 20 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'constructor'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Error'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 61, character: 21 },
        end: Position { line: 68, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(6) {
          'message',
          'm',
          'String',
          'constructor',
          'parse',
          'toString'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 70, character: 1 },
      end: Position { line: 72, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 70, character: 6 },
        end: Position { line: 70, character: 14 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'throw'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Error'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 70, character: 15 },
        end: Position { line: 72, character: 13 },
        scope: [Circular *1],
        body: [ [ASTCallStatement] ],
        namespaces: Set(1) { 'message' },
        assignments: [],
        parameters: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 74, character: 1 },
      end: Position { line: 74, character: 12 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 74, character: 1 },
        end: Position { line: 74, character: 7 },
        scope: [Circular *1],
        name: 'Crypto'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 74, character: 10 },
        end: Position { line: 74, character: 12 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 76, character: 1 },
      end: Position { line: 76, character: 91 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 76, character: 7 },
        end: Position { line: 76, character: 24 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'defaultCharset'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Crypto'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 76, character: 25 },
        end: Position { line: 76, character: 91 },
        scope: [Circular *1],
        value: 'QWERTZUIOPASDFGHJKLYXCVBNMqwertzuiopasdfghjklyxcvbnm1234567890+-',
        raw: '\\"QWERTZUIOPASDFGHJKLYXCVBNMqwertzuiopasdfghjklyxcvbnm1234567890+-\\"'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 77, character: 1 },
      end: Position { line: 77, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 77, character: 7 },
        end: Position { line: 77, character: 23 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'defaultSecret'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Crypto'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 77, character: 24 },
        end: Position { line: 77, character: 33 },
        scope: [Circular *1],
        value: 'test123',
        raw: '\\"test123\\"'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 78, character: 1 },
      end: Position { line: 78, character: 27 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 78, character: 7 },
        end: Position { line: 78, character: 21 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'maxCharCode'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Crypto'
        }
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 78, character: 22 },
        end: Position { line: 78, character: 27 },
        scope: [Circular *1],
        value: 55295,
        raw: '55295'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 79, character: 1 },
      end: Position { line: 79, character: 21 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 79, character: 7 },
        end: Position { line: 79, character: 15 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Error'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Crypto'
        }
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 79, character: 16 },
        end: Position { line: 79, character: 21 },
        scope: [Circular *1],
        name: 'Error'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 81, character: 1 },
      end: Position { line: 90, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 81, character: 7 },
        end: Position { line: 81, character: 21 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'constructor'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Crypto'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 81, character: 22 },
        end: Position { line: 90, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'defaultSecret',
          'hashFn',
          'charset',
          'me',
          'table',
          'defaultCharset',
          'Error',
          'constructor',
          'throw'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 92, character: 1 },
      end: Position { line: 101, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 92, character: 7 },
        end: Position { line: 92, character: 17 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'getHash'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Crypto'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 92, character: 18 },
        end: Position { line: 101, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTCallStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'pw', 'me', 'x', 'hashFn', 'reverse' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 103, character: 1 },
      end: Position { line: 156, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 103, character: 7 },
        end: Position { line: 103, character: 17 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'encrypt'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Crypto'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 158, character: 1 },
      end: Position { line: 202, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 158, character: 7 },
        end: Position { line: 158, character: 17 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'decrypt'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Crypto'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 204, character: 1 },
      end: Position { line: 204, character: 40 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 204, character: 1 },
        end: Position { line: 204, character: 5 },
        scope: [Circular *1],
        name: 'test'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 204, character: 32 },
        end: Position { line: 204, character: 40 },
        scope: [Circular *1],
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTUnaryExpression]
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 206, character: 1 },
      end: Position { line: 206, character: 14 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 206, character: 1 },
        end: Position { line: 206, character: 4 },
        scope: [Circular *1],
        name: 'pwd'
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 206, character: 7 },
        end: Position { line: 206, character: 14 },
        scope: [Circular *1],
        value: 'abcde',
        raw: '\\"abcde\\"'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 208, character: 1 },
      end: Position { line: 208, character: 24 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 208, character: 1 },
        end: Position { line: 208, character: 4 },
        scope: [Circular *1],
        name: 'foo'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 208, character: 19 },
        end: Position { line: 208, character: 24 },
        scope: [Circular *1],
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 209, character: 1 },
      end: Position { line: 209, character: 30 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 209, character: 1 },
        end: Position { line: 209, character: 10 },
        scope: [Circular *1],
        name: 'decrypted'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 209, character: 25 },
        end: Position { line: 209, character: 30 },
        scope: [Circular *1],
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTIdentifier] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 211, character: 1 },
      end: Position { line: 211, character: 11 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 211, character: 6 },
        end: Position { line: 211, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTIdentifier] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 212, character: 1 },
      end: Position { line: 212, character: 17 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 212, character: 6 },
        end: Position { line: 212, character: 17 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTIdentifier] ]
      }
    }
  ],
  namespaces: Set(23) {
    'String',
    'constructor',
    'parse',
    'startsWith',
    'substr',
    'replace',
    'toString',
    'length',
    'split',
    'trim',
    'Error',
    'throw',
    'Crypto',
    'defaultCharset',
    'defaultSecret',
    'maxCharCode',
    'getHash',
    'encrypt',
    'decrypt',
    'test',
    'pwd',
    'foo',
    'decrypted'
  },
  assignments: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 12 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 7 },
        scope: [Circular *1],
        name: 'String'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 10 },
        end: Position { line: 1, character: 12 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 6, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 3, character: 7 },
        end: Position { line: 3, character: 21 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'constructor'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 3, character: 22 },
        end: Position { line: 6, character: 13 },
        scope: [Circular *1],
        body: [ [ASTAssignmentStatement], [ASTReturnStatement] ],
        namespaces: Set(0) {},
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 8, character: 1 },
      end: Position { line: 19, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 8, character: 7 },
        end: Position { line: 8, character: 15 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'parse'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 16 },
        end: Position { line: 19, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) {
          'result',
          'index',
          'maxIndex',
          'replace',
          'constructor'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 21, character: 1 },
      end: Position { line: 23, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 21, character: 7 },
        end: Position { line: 21, character: 20 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'startsWith'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 21, character: 21 },
        end: Position { line: 23, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(0) {},
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 25, character: 1 },
      end: Position { line: 27, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 25, character: 7 },
        end: Position { line: 25, character: 16 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'substr'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 25, character: 17 },
        end: Position { line: 27, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'startIndex', 'endIndex', 'constructor' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 29, character: 1 },
      end: Position { line: 31, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 29, character: 7 },
        end: Position { line: 29, character: 17 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'indexOf'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 29, character: 18 },
        end: Position { line: 31, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(0) {},
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 33, character: 1 },
      end: Position { line: 35, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 33, character: 7 },
        end: Position { line: 33, character: 17 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'replace'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 18 },
        end: Position { line: 35, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'newStr', 'constructor', 'replace' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 37, character: 1 },
      end: Position { line: 39, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 37, character: 7 },
        end: Position { line: 37, character: 16 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'remove'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 37, character: 17 },
        end: Position { line: 39, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'constructor' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 41, character: 1 },
      end: Position { line: 43, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 41, character: 7 },
        end: Position { line: 41, character: 18 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'toString'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 41, character: 19 },
        end: Position { line: 43, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(0) {},
        assignments: [],
        parameters: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 45, character: 1 },
      end: Position { line: 47, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 45, character: 7 },
        end: Position { line: 45, character: 16 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'length'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 17 },
        end: Position { line: 47, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(0) {},
        assignments: [],
        parameters: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 49, character: 1 },
      end: Position { line: 51, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 49, character: 7 },
        end: Position { line: 49, character: 15 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'split'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 49, character: 16 },
        end: Position { line: 51, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(2) { 'seperator', 'split' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 53, character: 1 },
      end: Position { line: 55, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 53, character: 7 },
        end: Position { line: 53, character: 14 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'trim'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 53, character: 15 },
        end: Position { line: 55, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'seperator', 'constructor', 'trim' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 57, character: 1 },
      end: Position { line: 57, character: 11 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 57, character: 1 },
        end: Position { line: 57, character: 6 },
        scope: [Circular *1],
        name: 'Error'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 57, character: 9 },
        end: Position { line: 57, character: 11 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 59, character: 1 },
      end: Position { line: 59, character: 22 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 59, character: 6 },
        end: Position { line: 59, character: 15 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Error'
        }
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 59, character: 16 },
        end: Position { line: 59, character: 22 },
        scope: [Circular *1],
        name: 'String'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 61, character: 1 },
      end: Position { line: 68, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 61, character: 6 },
        end: Position { line: 61, character: 20 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'constructor'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Error'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 61, character: 21 },
        end: Position { line: 68, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(6) {
          'message',
          'm',
          'String',
          'constructor',
          'parse',
          'toString'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 70, character: 1 },
      end: Position { line: 72, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 70, character: 6 },
        end: Position { line: 70, character: 14 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'throw'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Error'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 70, character: 15 },
        end: Position { line: 72, character: 13 },
        scope: [Circular *1],
        body: [ [ASTCallStatement] ],
        namespaces: Set(1) { 'message' },
        assignments: [],
        parameters: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 74, character: 1 },
      end: Position { line: 74, character: 12 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 74, character: 1 },
        end: Position { line: 74, character: 7 },
        scope: [Circular *1],
        name: 'Crypto'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 74, character: 10 },
        end: Position { line: 74, character: 12 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 76, character: 1 },
      end: Position { line: 76, character: 91 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 76, character: 7 },
        end: Position { line: 76, character: 24 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'defaultCharset'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Crypto'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 76, character: 25 },
        end: Position { line: 76, character: 91 },
        scope: [Circular *1],
        value: 'QWERTZUIOPASDFGHJKLYXCVBNMqwertzuiopasdfghjklyxcvbnm1234567890+-',
        raw: '\\"QWERTZUIOPASDFGHJKLYXCVBNMqwertzuiopasdfghjklyxcvbnm1234567890+-\\"'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 77, character: 1 },
      end: Position { line: 77, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 77, character: 7 },
        end: Position { line: 77, character: 23 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'defaultSecret'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Crypto'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 77, character: 24 },
        end: Position { line: 77, character: 33 },
        scope: [Circular *1],
        value: 'test123',
        raw: '\\"test123\\"'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 78, character: 1 },
      end: Position { line: 78, character: 27 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 78, character: 7 },
        end: Position { line: 78, character: 21 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'maxCharCode'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Crypto'
        }
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 78, character: 22 },
        end: Position { line: 78, character: 27 },
        scope: [Circular *1],
        value: 55295,
        raw: '55295'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 79, character: 1 },
      end: Position { line: 79, character: 21 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 79, character: 7 },
        end: Position { line: 79, character: 15 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Error'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Crypto'
        }
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 79, character: 16 },
        end: Position { line: 79, character: 21 },
        scope: [Circular *1],
        name: 'Error'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 81, character: 1 },
      end: Position { line: 90, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 81, character: 7 },
        end: Position { line: 81, character: 21 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'constructor'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Crypto'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 81, character: 22 },
        end: Position { line: 90, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'defaultSecret',
          'hashFn',
          'charset',
          'me',
          'table',
          'defaultCharset',
          'Error',
          'constructor',
          'throw'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 92, character: 1 },
      end: Position { line: 101, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 92, character: 7 },
        end: Position { line: 92, character: 17 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'getHash'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Crypto'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 92, character: 18 },
        end: Position { line: 101, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTCallStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'pw', 'me', 'x', 'hashFn', 'reverse' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 103, character: 1 },
      end: Position { line: 156, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 103, character: 7 },
        end: Position { line: 103, character: 17 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'encrypt'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Crypto'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 158, character: 1 },
      end: Position { line: 202, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 158, character: 7 },
        end: Position { line: 158, character: 17 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'decrypt'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Crypto'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 204, character: 1 },
      end: Position { line: 204, character: 40 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 204, character: 1 },
        end: Position { line: 204, character: 5 },
        scope: [Circular *1],
        name: 'test'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 204, character: 32 },
        end: Position { line: 204, character: 40 },
        scope: [Circular *1],
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTUnaryExpression]
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 206, character: 1 },
      end: Position { line: 206, character: 14 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 206, character: 1 },
        end: Position { line: 206, character: 4 },
        scope: [Circular *1],
        name: 'pwd'
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 206, character: 7 },
        end: Position { line: 206, character: 14 },
        scope: [Circular *1],
        value: 'abcde',
        raw: '\\"abcde\\"'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 208, character: 1 },
      end: Position { line: 208, character: 24 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 208, character: 1 },
        end: Position { line: 208, character: 4 },
        scope: [Circular *1],
        name: 'foo'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 208, character: 19 },
        end: Position { line: 208, character: 24 },
        scope: [Circular *1],
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 209, character: 1 },
      end: Position { line: 209, character: 30 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 209, character: 1 },
        end: Position { line: 209, character: 10 },
        scope: [Circular *1],
        name: 'decrypted'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 209, character: 25 },
        end: Position { line: 209, character: 30 },
        scope: [Circular *1],
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTIdentifier] ]
      }
    }
  ],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 10, character: 13 },
      end: Position { line: 10, character: 14 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 16 },
        end: Position { line: 19, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) {
          'result',
          'index',
          'maxIndex',
          'replace',
          'constructor'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 14, character: 33 },
      end: Position { line: 14, character: 36 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 16 },
        end: Position { line: 19, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) {
          'result',
          'index',
          'maxIndex',
          'replace',
          'constructor'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      value: '$',
      raw: '\\"$\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 15, character: 25 },
      end: Position { line: 15, character: 26 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 16 },
        end: Position { line: 19, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) {
          'result',
          'index',
          'maxIndex',
          'replace',
          'constructor'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 22, character: 37 },
      end: Position { line: 22, character: 38 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 21, character: 21 },
        end: Position { line: 23, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(0) {},
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NilLiteral',
      start: Position { line: 64, character: 19 },
      end: Position { line: 64, character: 23 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 61, character: 21 },
        end: Position { line: 68, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(6) {
          'message',
          'm',
          'String',
          'constructor',
          'parse',
          'toString'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: null,
      raw: 'null'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 71, character: 10 },
      end: Position { line: 71, character: 27 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 70, character: 15 },
        end: Position { line: 72, character: 13 },
        scope: [Circular *1],
        body: [ [ASTCallStatement] ],
        namespaces: Set(1) { 'message' },
        assignments: [],
        parameters: []
      },
      value: '<color=#ff0000>',
      raw: '\\"<color=#ff0000>\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 71, character: 45 },
      end: Position { line: 71, character: 55 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 70, character: 15 },
        end: Position { line: 72, character: 13 },
        scope: [Circular *1],
        body: [ [ASTCallStatement] ],
        namespaces: Set(1) { 'message' },
        assignments: [],
        parameters: []
      },
      value: '</color>',
      raw: '\\"</color>\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 76, character: 25 },
      end: Position { line: 76, character: 91 },
      scope: [Circular *1],
      value: 'QWERTZUIOPASDFGHJKLYXCVBNMqwertzuiopasdfghjklyxcvbnm1234567890+-',
      raw: '\\"QWERTZUIOPASDFGHJKLYXCVBNMqwertzuiopasdfghjklyxcvbnm1234567890+-\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 77, character: 24 },
      end: Position { line: 77, character: 33 },
      scope: [Circular *1],
      value: 'test123',
      raw: '\\"test123\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 78, character: 22 },
      end: Position { line: 78, character: 27 },
      scope: [Circular *1],
      value: 55295,
      raw: '55295'
    },
    ASTLiteral {
      type: 'NilLiteral',
      start: Position { line: 86, character: 20 },
      end: Position { line: 86, character: 24 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 81, character: 22 },
        end: Position { line: 90, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'defaultSecret',
          'hashFn',
          'charset',
          'me',
          'table',
          'defaultCharset',
          'Error',
          'constructor',
          'throw'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier], [ASTIdentifier] ]
      },
      value: null,
      raw: 'null'
    },
    ASTLiteral {
      type: 'NilLiteral',
      start: Position { line: 87, character: 19 },
      end: Position { line: 87, character: 23 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 81, character: 22 },
        end: Position { line: 90, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'defaultSecret',
          'hashFn',
          'charset',
          'me',
          'table',
          'defaultCharset',
          'Error',
          'constructor',
          'throw'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier], [ASTIdentifier] ]
      },
      value: null,
      raw: 'null'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 88, character: 24 },
      end: Position { line: 88, character: 26 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 81, character: 22 },
        end: Position { line: 90, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'defaultSecret',
          'hashFn',
          'charset',
          'me',
          'table',
          'defaultCharset',
          'Error',
          'constructor',
          'throw'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 64,
      raw: '64'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 88, character: 59 },
      end: Position { line: 88, character: 82 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 81, character: 22 },
        end: Position { line: 90, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'defaultSecret',
          'hashFn',
          'charset',
          'me',
          'table',
          'defaultCharset',
          'Error',
          'constructor',
          'throw'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 'Invalid charset $0...',
      raw: '\\"Invalid charset $0...\\"'
    },
    ASTLiteral {
      type: 'NilLiteral',
      start: Position { line: 105, character: 15 },
      end: Position { line: 105, character: 19 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: null,
      raw: 'null'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 107, character: 19 },
      end: Position { line: 107, character: 20 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 109, character: 16 },
      end: Position { line: 109, character: 17 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 110, character: 25 },
      end: Position { line: 110, character: 26 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 3,
      raw: '3'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 114, character: 40 },
      end: Position { line: 114, character: 61 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 112, character: 11 },
        end: Position { line: 117, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTIfStatement], [ASTReturnStatement] ],
        namespaces: Set(6) { 'v', 'me', 'table', 'Error', 'constructor', 'throw' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      },
      value: 'Invalid index $0...',
      raw: '\\"Invalid index $0...\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 119, character: 24 },
      end: Position { line: 119, character: 27 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 118, character: 11 },
        end: Position { line: 120, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(2) { 'a', 'b' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: '&',
      raw: '\\"&\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 122, character: 24 },
      end: Position { line: 122, character: 28 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 121, character: 14 },
        end: Position { line: 123, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(2) { 'a', 'b' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: '<<',
      raw: '\\"<<\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 125, character: 24 },
      end: Position { line: 125, character: 28 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(2) { 'a', 'b' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: '>>',
      raw: '\\">>\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 128, character: 40 },
      end: Position { line: 128, character: 41 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 129, character: 44 },
      end: Position { line: 129, character: 46 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 16,
      raw: '16'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 130, character: 35 },
      end: Position { line: 130, character: 36 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 130, character: 48 },
      end: Position { line: 130, character: 49 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 8,
      raw: '8'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 131, character: 28 },
      end: Position { line: 131, character: 29 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 2,
      raw: '2'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 133, character: 44 },
      end: Position { line: 133, character: 46 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 18,
      raw: '18'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 133, character: 49 },
      end: Position { line: 133, character: 51 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 63,
      raw: '63'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 134, character: 44 },
      end: Position { line: 134, character: 46 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 12,
      raw: '12'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 134, character: 49 },
      end: Position { line: 134, character: 51 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 63,
      raw: '63'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 135, character: 44 },
      end: Position { line: 135, character: 45 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 6,
      raw: '6'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 135, character: 48 },
      end: Position { line: 135, character: 50 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 63,
      raw: '63'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 136, character: 37 },
      end: Position { line: 136, character: 39 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 63,
      raw: '63'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 137, character: 31 },
      end: Position { line: 137, character: 32 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 3,
      raw: '3'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 139, character: 20 },
      end: Position { line: 139, character: 21 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 2,
      raw: '2'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 140, character: 40 },
      end: Position { line: 140, character: 41 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 141, character: 44 },
      end: Position { line: 141, character: 45 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 8,
      raw: '8'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 142, character: 28 },
      end: Position { line: 142, character: 29 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 144, character: 40 },
      end: Position { line: 144, character: 42 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 10,
      raw: '10'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 145, character: 44 },
      end: Position { line: 145, character: 45 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 4,
      raw: '4'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 145, character: 48 },
      end: Position { line: 145, character: 50 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 63,
      raw: '63'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 146, character: 44 },
      end: Position { line: 146, character: 45 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 2,
      raw: '2'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 146, character: 48 },
      end: Position { line: 146, character: 50 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 63,
      raw: '63'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 147, character: 21 },
      end: Position { line: 147, character: 24 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: '=',
      raw: '\\"=\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 148, character: 25 },
      end: Position { line: 148, character: 26 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 149, character: 40 },
      end: Position { line: 149, character: 41 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 151, character: 40 },
      end: Position { line: 151, character: 41 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 2,
      raw: '2'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 152, character: 44 },
      end: Position { line: 152, character: 45 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 4,
      raw: '4'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 152, character: 48 },
      end: Position { line: 152, character: 50 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 63,
      raw: '63'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 153, character: 21 },
      end: Position { line: 153, character: 25 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: '==',
      raw: '\\"==\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 155, character: 24 },
      end: Position { line: 155, character: 26 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: '',
      raw: '\\"\\"'
    },
    ASTLiteral {
      type: 'NilLiteral',
      start: Position { line: 160, character: 15 },
      end: Position { line: 160, character: 19 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: null,
      raw: 'null'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 162, character: 19 },
      end: Position { line: 162, character: 20 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 165, character: 18 },
      end: Position { line: 165, character: 19 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 166, character: 18 },
      end: Position { line: 166, character: 19 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 167, character: 16 },
      end: Position { line: 167, character: 17 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 168, character: 19 },
      end: Position { line: 168, character: 20 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 171, character: 24 },
      end: Position { line: 171, character: 27 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 170, character: 11 },
        end: Position { line: 172, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(2) { 'a', 'b' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: '&',
      raw: '\\"&\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 174, character: 24 },
      end: Position { line: 174, character: 28 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 173, character: 14 },
        end: Position { line: 175, character: 17 },
        scope: ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(2) { 'a', 'b' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: '>>',
      raw: '\\">>\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 179, character: 35 },
      end: Position { line: 179, character: 36 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 180, character: 26 },
      end: Position { line: 180, character: 27 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 4,
      raw: '4'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 181, character: 39 },
      end: Position { line: 181, character: 41 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 64,
      raw: '64'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 185, character: 26 },
      end: Position { line: 185, character: 27 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 4,
      raw: '4'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 186, character: 54 },
      end: Position { line: 186, character: 55 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 3,
      raw: '3'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 186, character: 59 },
      end: Position { line: 186, character: 60 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 3,
      raw: '3'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 186, character: 77 },
      end: Position { line: 186, character: 78 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 189, character: 30 },
      end: Position { line: 189, character: 31 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 2,
      raw: '2'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 189, character: 46 },
      end: Position { line: 189, character: 47 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 6,
      raw: '6'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 191, character: 29 },
      end: Position { line: 191, character: 32 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 255,
      raw: '255'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 192, character: 30 },
      end: Position { line: 192, character: 31 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 197, character: 41 },
      end: Position { line: 197, character: 42 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 199, character: 31 },
      end: Position { line: 199, character: 32 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 201, character: 24 },
      end: Position { line: 201, character: 26 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: '',
      raw: '\\"\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 204, character: 33 },
      end: Position { line: 204, character: 39 },
      scope: [Circular *1],
      value: 'test',
      raw: '\\"test\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 206, character: 7 },
      end: Position { line: 206, character: 14 },
      scope: [Circular *1],
      value: 'abcde',
      raw: '\\"abcde\\"'
    }
  ],
  scopes: [
    <ref *2> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 3, character: 22 },
      end: Position { line: 6, character: 13 },
      scope: [Circular *1],
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTMemberExpression],
          init: [ASTIdentifier]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          argument: [ASTIdentifier]
        }
      ],
      namespaces: Set(0) {},
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTMemberExpression],
          init: [ASTIdentifier]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          name: 'str'
        }
      ]
    },
    <ref *3> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 8, character: 16 },
      end: Position { line: 19, character: 13 },
      scope: [Circular *1],
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTWhileStatement {
          type: 'WhileStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          body: [Array],
          condition: [ASTEvaluationExpression]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(5) {
        'result',
        'index',
        'maxIndex',
        'replace',
        'constructor'
      },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          name: 'values'
        }
      ]
    },
    <ref *4> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 21, character: 21 },
      end: Position { line: 23, character: 13 },
      scope: [Circular *1],
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          argument: [ASTEvaluationExpression]
        }
      ],
      namespaces: Set(0) {},
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          name: 'str'
        }
      ]
    },
    <ref *5> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 25, character: 17 },
      end: Position { line: 27, character: 13 },
      scope: [Circular *1],
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *5],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(3) { 'startIndex', 'endIndex', 'constructor' },
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *5],
          name: 'startIndex'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *5],
          name: 'endIndex'
        }
      ]
    },
    <ref *6> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 29, character: 18 },
      end: Position { line: 31, character: 13 },
      scope: [Circular *1],
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *6],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(0) {},
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *6],
          name: 'str'
        }
      ]
    },
    <ref *7> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 33, character: 18 },
      end: Position { line: 35, character: 13 },
      scope: [Circular *1],
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *7],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(3) { 'newStr', 'constructor', 'replace' },
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *7],
          name: 'str'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *7],
          name: 'newStr'
        }
      ]
    },
    <ref *8> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 37, character: 17 },
      end: Position { line: 39, character: 13 },
      scope: [Circular *1],
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *8],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(1) { 'constructor' },
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *8],
          name: 'str'
        }
      ]
    },
    <ref *9> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 41, character: 19 },
      end: Position { line: 43, character: 13 },
      scope: [Circular *1],
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *9],
          argument: [ASTMemberExpression]
        }
      ],
      namespaces: Set(0) {},
      assignments: [],
      parameters: []
    },
    <ref *10> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 45, character: 17 },
      end: Position { line: 47, character: 13 },
      scope: [Circular *1],
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *10],
          argument: [ASTMemberExpression]
        }
      ],
      namespaces: Set(0) {},
      assignments: [],
      parameters: []
    },
    <ref *11> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 49, character: 16 },
      end: Position { line: 51, character: 13 },
      scope: [Circular *1],
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(2) { 'seperator', 'split' },
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *11],
          name: 'seperator'
        }
      ]
    },
    <ref *12> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 53, character: 15 },
      end: Position { line: 55, character: 13 },
      scope: [Circular *1],
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *12],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(3) { 'seperator', 'constructor', 'trim' },
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *12],
          name: 'seperator'
        }
      ]
    },
    <ref *13> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 61, character: 21 },
      end: Position { line: 68, character: 13 },
      scope: [Circular *1],
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *13],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *13],
          variable: [ASTMemberExpression],
          init: [ASTIdentifier]
        },
        ASTIfStatement {
          type: 'IfStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *13],
          clauses: [Array]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *13],
          argument: [ASTIdentifier]
        }
      ],
      namespaces: Set(6) {
        'message',
        'm',
        'String',
        'constructor',
        'parse',
        'toString'
      },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *13],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *13],
          variable: [ASTMemberExpression],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *13],
          variable: [ASTMemberExpression],
          init: [ASTCallExpression]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *13],
          name: 'message'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *13],
          name: 'values'
        }
      ]
    },
    <ref *14> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 70, character: 15 },
      end: Position { line: 72, character: 13 },
      scope: [Circular *1],
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *14],
          expression: [ASTCallExpression]
        }
      ],
      namespaces: Set(1) { 'message' },
      assignments: [],
      parameters: []
    },
    <ref *15> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 81, character: 22 },
      end: Position { line: 90, character: 13 },
      scope: [Circular *1],
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *15],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *15],
          variable: [ASTMemberExpression],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *15],
          variable: [ASTMemberExpression],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *15],
          variable: [ASTMemberExpression],
          init: [ASTUnaryExpression]
        },
        ASTIfStatement {
          type: 'IfShortcutStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *15],
          clauses: [Array]
        },
        ASTIfStatement {
          type: 'IfShortcutStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *15],
          clauses: [Array]
        },
        ASTIfStatement {
          type: 'IfShortcutStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *15],
          clauses: [Array]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *15],
          argument: [ASTIdentifier]
        }
      ],
      namespaces: Set(9) {
        'defaultSecret',
        'hashFn',
        'charset',
        'me',
        'table',
        'defaultCharset',
        'Error',
        'constructor',
        'throw'
      },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *15],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *15],
          variable: [ASTMemberExpression],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *15],
          variable: [ASTMemberExpression],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *15],
          variable: [ASTMemberExpression],
          init: [ASTUnaryExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *15],
          variable: [ASTMemberExpression],
          init: [ASTUnaryExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *15],
          variable: [ASTMemberExpression],
          init: [ASTMemberExpression]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *15],
          name: 'defaultSecret'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *15],
          name: 'hashFn'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *15],
          name: 'charset'
        }
      ]
    },
    <ref *16> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 92, character: 18 },
      end: Position { line: 101, character: 13 },
      scope: [Circular *1],
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *16],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *16],
          variable: [ASTIdentifier],
          init: [ASTListConstructorExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *16],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTForGenericStatement {
          type: 'ForGenericStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *16],
          body: [Array],
          variable: [ASTIdentifier],
          iterator: [ASTIdentifier]
        },
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *16],
          expression: [ASTMemberExpression]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *16],
          argument: [ASTIdentifier]
        }
      ],
      namespaces: Set(5) { 'pw', 'me', 'x', 'hashFn', 'reverse' },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *16],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *16],
          variable: [ASTIdentifier],
          init: [ASTListConstructorExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *16],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *16],
          name: 'pw'
        }
      ]
    },
    <ref *17> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 103, character: 18 },
      end: Position { line: 156, character: 13 },
      scope: [Circular *1],
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTIfStatement {
          type: 'IfShortcutStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          clauses: [Array]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTListConstructorExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTFunctionStatement]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTFunctionStatement]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTFunctionStatement]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTFunctionStatement]
        },
        ASTWhileStatement {
          type: 'WhileStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          body: [Array],
          condition: [ASTEvaluationExpression]
        },
        ASTIfStatement {
          type: 'IfStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          clauses: [Array]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(19) {
        'pw',
        'me',
        'defaultSecret',
        'getHash',
        'hashPointer',
        'output',
        'position',
        'padding',
        'max',
        'get',
        'AND',
        'LSHIFT',
        'RSHIFT',
        'm',
        'a',
        'b',
        'c',
        'buffer',
        'join'
      },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTListConstructorExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTFunctionStatement]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTFunctionStatement]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTFunctionStatement]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTFunctionStatement]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTIndexExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTIndexExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTIndexExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          name: 'str'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *17],
          name: 'pw'
        }
      ]
    },
    <ref *18> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 112, character: 11 },
      end: Position { line: 117, character: 17 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      body: [
        ASTIfStatement {
          type: 'IfStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *18],
          clauses: [Array]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *18],
          argument: [ASTIndexExpression]
        }
      ],
      namespaces: Set(6) { 'v', 'me', 'table', 'Error', 'constructor', 'throw' },
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *18],
          name: 'v'
        }
      ]
    },
    <ref *19> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 118, character: 11 },
      end: Position { line: 120, character: 17 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *19],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(2) { 'a', 'b' },
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *19],
          name: 'a'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *19],
          name: 'b'
        }
      ]
    },
    <ref *20> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 121, character: 14 },
      end: Position { line: 123, character: 17 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *20],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(2) { 'a', 'b' },
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *20],
          name: 'a'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *20],
          name: 'b'
        }
      ]
    },
    <ref *21> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 124, character: 14 },
      end: Position { line: 126, character: 17 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *21],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(2) { 'a', 'b' },
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *21],
          name: 'a'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *21],
          name: 'b'
        }
      ]
    },
    <ref *22> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 158, character: 18 },
      end: Position { line: 202, character: 13 },
      scope: [Circular *1],
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTIfStatement {
          type: 'IfShortcutStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          clauses: [Array]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTListConstructorExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTFunctionStatement]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTFunctionStatement]
        },
        ASTWhileStatement {
          type: 'WhileStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          body: [Array],
          condition: [ASTEvaluationExpression]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(22) {
        'pw',
        'me',
        'defaultSecret',
        'getHash',
        'hashPointer',
        'hashLength',
        'output',
        'bitCounter',
        'bitStorage',
        'position',
        'max',
        'AND',
        'RSHIFT',
        'buffer',
        'table',
        'currentBit',
        'expectedHashIndex',
        'm',
        'operation',
        'charCode',
        'maxCharCode',
        'join'
      },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTListConstructorExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTFunctionStatement]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTFunctionStatement]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTIndexExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          name: 'str'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *22],
          name: 'pw'
        }
      ]
    },
    <ref *23> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 170, character: 11 },
      end: Position { line: 172, character: 17 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *23],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(2) { 'a', 'b' },
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *23],
          name: 'a'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *23],
          name: 'b'
        }
      ]
    },
    <ref *24> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 173, character: 14 },
      end: Position { line: 175, character: 17 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *24],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(2) { 'a', 'b' },
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *24],
          name: 'a'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *24],
          name: 'b'
        }
      ]
    }
  ],
  lines: Map(150) {
    1 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 12 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 7 },
        scope: [Circular *1],
        name: 'String'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 10 },
        end: Position { line: 1, character: 12 },
        scope: [Circular *1],
        fields: []
      }
    },
    4 => <ref *25> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 4, character: 5 },
      end: Position { line: 4, character: 19 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 3, character: 22 },
        end: Position { line: 6, character: 13 },
        scope: [Circular *1],
        body: [ [Circular *25], [ASTReturnStatement] ],
        namespaces: Set(0) {},
        assignments: [ [Circular *25] ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 4, character: 9 },
        end: Position { line: 4, character: 15 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: Set(0) {},
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'str'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'self'
        }
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 4, character: 16 },
        end: Position { line: 4, character: 19 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: Set(0) {},
          assignments: [Array],
          parameters: [Array]
        },
        name: 'str'
      }
    },
    5 => <ref *26> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 5, character: 5 },
      end: Position { line: 5, character: 16 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 3, character: 22 },
        end: Position { line: 6, character: 13 },
        scope: [Circular *1],
        body: [ [ASTAssignmentStatement], [Circular *26] ],
        namespaces: Set(0) {},
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier] ]
      },
      argument: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 5, character: 12 },
        end: Position { line: 5, character: 16 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: Set(0) {},
          assignments: [Array],
          parameters: [Array]
        },
        name: 'self'
      }
    },
    3 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 6, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 3, character: 7 },
        end: Position { line: 3, character: 21 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'constructor'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 3, character: 22 },
        end: Position { line: 6, character: 13 },
        scope: [Circular *1],
        body: [ [ASTAssignmentStatement], [ASTReturnStatement] ],
        namespaces: Set(0) {},
        assignments: [ [ASTAssignmentStatement] ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    9 => <ref *27> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 9, character: 5 },
      end: Position { line: 9, character: 22 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 16 },
        end: Position { line: 19, character: 13 },
        scope: [Circular *1],
        body: [
          [Circular *27],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) {
          'result',
          'index',
          'maxIndex',
          'replace',
          'constructor'
        },
        assignments: [
          [Circular *27],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 9, character: 5 },
        end: Position { line: 9, character: 11 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'result'
      },
      init: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 9, character: 18 },
        end: Position { line: 9, character: 22 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'str'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'self'
        }
      }
    },
    10 => <ref *28> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 10, character: 5 },
      end: Position { line: 10, character: 14 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 16 },
        end: Position { line: 19, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [Circular *28],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) {
          'result',
          'index',
          'maxIndex',
          'replace',
          'constructor'
        },
        assignments: [
          [ASTAssignmentStatement],
          [Circular *28],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 10, character: 5 },
        end: Position { line: 10, character: 10 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'index'
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 10, character: 13 },
        end: Position { line: 10, character: 14 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        value: 0,
        raw: '0'
      }
    },
    11 => <ref *29> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 11, character: 5 },
      end: Position { line: 11, character: 26 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 16 },
        end: Position { line: 19, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *29],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) {
          'result',
          'index',
          'maxIndex',
          'replace',
          'constructor'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *29],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 11, character: 5 },
        end: Position { line: 11, character: 13 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'maxIndex'
      },
      init: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 11, character: 22 },
        end: Position { line: 11, character: 26 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'len'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'values'
        }
      }
    },
    14 => <ref *30> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 14, character: 9 },
      end: Position { line: 14, character: 58 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 16 },
        end: Position { line: 19, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) {
          'result',
          'index',
          'maxIndex',
          'replace',
          'constructor'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *30],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 14, character: 9 },
        end: Position { line: 14, character: 15 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'result'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 14, character: 32 },
        end: Position { line: 14, character: 58 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTEvaluationExpression], [ASTIndexExpression] ]
      }
    },
    15 => <ref *31> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 15, character: 9 },
      end: Position { line: 15, character: 26 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 16 },
        end: Position { line: 19, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) {
          'result',
          'index',
          'maxIndex',
          'replace',
          'constructor'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *31]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 15, character: 9 },
        end: Position { line: 15, character: 14 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'index'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 15, character: 23 },
        end: Position { line: 15, character: 26 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '+',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'index'
        },
        right: ASTLiteral {
          type: 'NumericLiteral',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          value: 1,
          raw: '1'
        }
      }
    },
    13 => <ref *32> ASTWhileStatement {
      type: 'WhileStatement',
      start: Position { line: 13, character: 5 },
      end: Position { line: 16, character: 14 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 16 },
        end: Position { line: 19, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *32],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) {
          'result',
          'index',
          'maxIndex',
          'replace',
          'constructor'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      body: [
        <ref *30> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        <ref *31> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        }
      ],
      condition: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 13, character: 17 },
        end: Position { line: 13, character: 27 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '<',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'index'
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'maxIndex'
        }
      }
    },
    18 => <ref *33> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 18, character: 5 },
      end: Position { line: 18, character: 42 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 16 },
        end: Position { line: 19, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [Circular *33]
        ],
        namespaces: Set(5) {
          'result',
          'index',
          'maxIndex',
          'replace',
          'constructor'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      argument: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 18, character: 34 },
        end: Position { line: 18, character: 42 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTUnaryExpression]
        },
        arguments: [ [ASTIdentifier] ]
      }
    },
    8 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 8, character: 1 },
      end: Position { line: 19, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 8, character: 7 },
        end: Position { line: 8, character: 15 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'parse'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 8, character: 16 },
        end: Position { line: 19, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) {
          'result',
          'index',
          'maxIndex',
          'replace',
          'constructor'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    22 => <ref *34> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 22, character: 5 },
      end: Position { line: 22, character: 38 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 21, character: 21 },
        end: Position { line: 23, character: 13 },
        scope: [Circular *1],
        body: [ [Circular *34] ],
        namespaces: Set(0) {},
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      },
      argument: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 22, character: 34 },
        end: Position { line: 22, character: 38 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: Set(0) {},
          assignments: [],
          parameters: [Array]
        },
        operator: '==',
        left: ASTCallExpression {
          type: 'CallExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          base: [ASTMemberExpression],
          arguments: [Array]
        },
        right: ASTLiteral {
          type: 'NumericLiteral',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          value: 0,
          raw: '0'
        }
      }
    },
    21 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 21, character: 1 },
      end: Position { line: 23, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 21, character: 7 },
        end: Position { line: 21, character: 20 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'startsWith'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 21, character: 21 },
        end: Position { line: 23, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(0) {},
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      }
    },
    26 => <ref *35> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 26, character: 5 },
      end: Position { line: 26, character: 73 },
      scope: <ref *5> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 25, character: 17 },
        end: Position { line: 27, character: 13 },
        scope: [Circular *1],
        body: [ [Circular *35] ],
        namespaces: Set(3) { 'startIndex', 'endIndex', 'constructor' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      argument: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 26, character: 34 },
        end: Position { line: 26, character: 73 },
        scope: <ref *5> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTUnaryExpression]
        },
        arguments: [ [ASTCallExpression] ]
      }
    },
    25 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 25, character: 1 },
      end: Position { line: 27, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 25, character: 7 },
        end: Position { line: 25, character: 16 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'substr'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: <ref *5> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 25, character: 17 },
        end: Position { line: 27, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'startIndex', 'endIndex', 'constructor' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    30 => <ref *36> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 30, character: 5 },
      end: Position { line: 30, character: 33 },
      scope: <ref *6> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 29, character: 18 },
        end: Position { line: 31, character: 13 },
        scope: [Circular *1],
        body: [ [Circular *36] ],
        namespaces: Set(0) {},
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      },
      argument: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 30, character: 28 },
        end: Position { line: 30, character: 33 },
        scope: <ref *6> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: Set(0) {},
          assignments: [],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTMemberExpression]
        },
        arguments: [ [ASTIdentifier] ]
      }
    },
    29 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 29, character: 1 },
      end: Position { line: 31, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 29, character: 7 },
        end: Position { line: 29, character: 17 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'indexOf'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: <ref *6> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 29, character: 18 },
        end: Position { line: 31, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(0) {},
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      }
    },
    34 => <ref *37> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 34, character: 5 },
      end: Position { line: 34, character: 65 },
      scope: <ref *7> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 18 },
        end: Position { line: 35, character: 13 },
        scope: [Circular *1],
        body: [ [Circular *37] ],
        namespaces: Set(3) { 'newStr', 'constructor', 'replace' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      argument: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 34, character: 34 },
        end: Position { line: 34, character: 65 },
        scope: <ref *7> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTUnaryExpression]
        },
        arguments: [ [ASTCallExpression] ]
      }
    },
    33 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 33, character: 1 },
      end: Position { line: 35, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 33, character: 7 },
        end: Position { line: 33, character: 17 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'replace'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: <ref *7> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 33, character: 18 },
        end: Position { line: 35, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'newStr', 'constructor', 'replace' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    38 => <ref *38> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 38, character: 5 },
      end: Position { line: 38, character: 56 },
      scope: <ref *8> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 37, character: 17 },
        end: Position { line: 39, character: 13 },
        scope: [Circular *1],
        body: [ [Circular *38] ],
        namespaces: Set(1) { 'constructor' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      },
      argument: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 38, character: 34 },
        end: Position { line: 38, character: 56 },
        scope: <ref *8> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTUnaryExpression]
        },
        arguments: [ [ASTCallExpression] ]
      }
    },
    37 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 37, character: 1 },
      end: Position { line: 39, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 37, character: 7 },
        end: Position { line: 37, character: 16 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'remove'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: <ref *8> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 37, character: 17 },
        end: Position { line: 39, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'constructor' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      }
    },
    42 => <ref *39> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 42, character: 5 },
      end: Position { line: 42, character: 20 },
      scope: <ref *9> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 41, character: 19 },
        end: Position { line: 43, character: 13 },
        scope: [Circular *1],
        body: [ [Circular *39] ],
        namespaces: Set(0) {},
        assignments: [],
        parameters: []
      },
      argument: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 42, character: 16 },
        end: Position { line: 42, character: 20 },
        scope: <ref *9> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: Set(0) {},
          assignments: [],
          parameters: []
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'str'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'self'
        }
      }
    },
    41 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 41, character: 1 },
      end: Position { line: 43, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 41, character: 7 },
        end: Position { line: 41, character: 18 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'toString'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: <ref *9> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 41, character: 19 },
        end: Position { line: 43, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(0) {},
        assignments: [],
        parameters: []
      }
    },
    46 => <ref *40> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 46, character: 5 },
      end: Position { line: 46, character: 24 },
      scope: <ref *10> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 17 },
        end: Position { line: 47, character: 13 },
        scope: [Circular *1],
        body: [ [Circular *40] ],
        namespaces: Set(0) {},
        assignments: [],
        parameters: []
      },
      argument: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 46, character: 20 },
        end: Position { line: 46, character: 24 },
        scope: <ref *10> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: Set(0) {},
          assignments: [],
          parameters: []
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'len'
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        }
      }
    },
    45 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 45, character: 1 },
      end: Position { line: 47, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 45, character: 7 },
        end: Position { line: 45, character: 16 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'length'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: <ref *10> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 45, character: 17 },
        end: Position { line: 47, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(0) {},
        assignments: [],
        parameters: []
      }
    },
    50 => <ref *41> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 50, character: 5 },
      end: Position { line: 50, character: 37 },
      scope: <ref *11> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 49, character: 16 },
        end: Position { line: 51, character: 13 },
        scope: [Circular *1],
        body: [ [Circular *41] ],
        namespaces: Set(2) { 'seperator', 'split' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      },
      argument: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 50, character: 26 },
        end: Position { line: 50, character: 37 },
        scope: <ref *11> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTMemberExpression]
        },
        arguments: [ [ASTIdentifier] ]
      }
    },
    49 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 49, character: 1 },
      end: Position { line: 51, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 49, character: 7 },
        end: Position { line: 49, character: 15 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'split'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: <ref *11> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 49, character: 16 },
        end: Position { line: 51, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(2) { 'seperator', 'split' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      }
    },
    54 => <ref *42> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 54, character: 5 },
      end: Position { line: 54, character: 51 },
      scope: <ref *12> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 53, character: 15 },
        end: Position { line: 55, character: 13 },
        scope: [Circular *1],
        body: [ [Circular *42] ],
        namespaces: Set(3) { 'seperator', 'constructor', 'trim' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      },
      argument: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 54, character: 34 },
        end: Position { line: 54, character: 51 },
        scope: <ref *12> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTUnaryExpression]
        },
        arguments: [ [ASTCallExpression] ]
      }
    },
    53 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 53, character: 1 },
      end: Position { line: 55, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 53, character: 7 },
        end: Position { line: 53, character: 14 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'trim'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        }
      },
      init: <ref *12> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 53, character: 15 },
        end: Position { line: 55, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'seperator', 'constructor', 'trim' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      }
    },
    57 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 57, character: 1 },
      end: Position { line: 57, character: 11 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 57, character: 1 },
        end: Position { line: 57, character: 6 },
        scope: [Circular *1],
        name: 'Error'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 57, character: 9 },
        end: Position { line: 57, character: 11 },
        scope: [Circular *1],
        fields: []
      }
    },
    59 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 59, character: 1 },
      end: Position { line: 59, character: 22 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 59, character: 6 },
        end: Position { line: 59, character: 15 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'String'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Error'
        }
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 59, character: 16 },
        end: Position { line: 59, character: 22 },
        scope: [Circular *1],
        name: 'String'
      }
    },
    62 => <ref *43> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 62, character: 5 },
      end: Position { line: 62, character: 13 },
      scope: <ref *13> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 61, character: 21 },
        end: Position { line: 68, character: 13 },
        scope: [Circular *1],
        body: [
          [Circular *43],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(6) {
          'message',
          'm',
          'String',
          'constructor',
          'parse',
          'toString'
        },
        assignments: [
          [Circular *43],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 62, character: 5 },
        end: Position { line: 62, character: 6 },
        scope: <ref *13> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'm'
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 62, character: 9 },
        end: Position { line: 62, character: 13 },
        scope: <ref *13> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'self'
      }
    },
    63 => <ref *44> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 63, character: 5 },
      end: Position { line: 63, character: 24 },
      scope: <ref *13> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 61, character: 21 },
        end: Position { line: 68, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [Circular *44],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(6) {
          'message',
          'm',
          'String',
          'constructor',
          'parse',
          'toString'
        },
        assignments: [
          [ASTAssignmentStatement],
          [Circular *44],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 63, character: 6 },
        end: Position { line: 63, character: 16 },
        scope: <ref *13> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'message'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'm'
        }
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 63, character: 17 },
        end: Position { line: 63, character: 24 },
        scope: <ref *13> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'message'
      }
    },
    65 => <ref *45> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 65, character: 9 },
      end: Position { line: 65, character: 81 },
      scope: <ref *13> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 61, character: 21 },
        end: Position { line: 68, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(6) {
          'message',
          'm',
          'String',
          'constructor',
          'parse',
          'toString'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *45]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 65, character: 10 },
        end: Position { line: 65, character: 20 },
        scope: <ref *13> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'message'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'm'
        }
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 65, character: 79 },
        end: Position { line: 65, character: 81 },
        scope: <ref *13> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTCallExpression]
        },
        arguments: []
      }
    },
    64 => <ref *46> ASTIfStatement {
      type: 'IfStatement',
      start: Position { line: 64, character: 5 },
      end: Position { line: 66, character: 11 },
      scope: <ref *13> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 61, character: 21 },
        end: Position { line: 68, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *46],
          [ASTReturnStatement]
        ],
        namespaces: Set(6) {
          'message',
          'm',
          'String',
          'constructor',
          'parse',
          'toString'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      clauses: [
        ASTIfClause {
          type: 'IfClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTEvaluationExpression]
        }
      ]
    },
    67 => <ref *47> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 67, character: 5 },
      end: Position { line: 67, character: 13 },
      scope: <ref *13> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 61, character: 21 },
        end: Position { line: 68, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [Circular *47]
        ],
        namespaces: Set(6) {
          'message',
          'm',
          'String',
          'constructor',
          'parse',
          'toString'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      argument: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 67, character: 12 },
        end: Position { line: 67, character: 13 },
        scope: <ref *13> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'm'
      }
    },
    61 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 61, character: 1 },
      end: Position { line: 68, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 61, character: 6 },
        end: Position { line: 61, character: 20 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'constructor'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Error'
        }
      },
      init: <ref *13> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 61, character: 21 },
        end: Position { line: 68, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(6) {
          'message',
          'm',
          'String',
          'constructor',
          'parse',
          'toString'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    71 => <ref *48> ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 71, character: 5 },
      end: Position { line: 71, character: 56 },
      scope: <ref *14> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 70, character: 15 },
        end: Position { line: 72, character: 13 },
        scope: [Circular *1],
        body: [ [Circular *48] ],
        namespaces: Set(1) { 'message' },
        assignments: [],
        parameters: []
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 71, character: 9 },
        end: Position { line: 71, character: 56 },
        scope: <ref *14> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [],
          parameters: []
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'exit'
        },
        arguments: [ [ASTEvaluationExpression] ]
      }
    },
    70 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 70, character: 1 },
      end: Position { line: 72, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 70, character: 6 },
        end: Position { line: 70, character: 14 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'throw'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Error'
        }
      },
      init: <ref *14> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 70, character: 15 },
        end: Position { line: 72, character: 13 },
        scope: [Circular *1],
        body: [ [ASTCallStatement] ],
        namespaces: Set(1) { 'message' },
        assignments: [],
        parameters: []
      }
    },
    74 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 74, character: 1 },
      end: Position { line: 74, character: 12 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 74, character: 1 },
        end: Position { line: 74, character: 7 },
        scope: [Circular *1],
        name: 'Crypto'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 74, character: 10 },
        end: Position { line: 74, character: 12 },
        scope: [Circular *1],
        fields: []
      }
    },
    76 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 76, character: 1 },
      end: Position { line: 76, character: 91 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 76, character: 7 },
        end: Position { line: 76, character: 24 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'defaultCharset'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Crypto'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 76, character: 25 },
        end: Position { line: 76, character: 91 },
        scope: [Circular *1],
        value: 'QWERTZUIOPASDFGHJKLYXCVBNMqwertzuiopasdfghjklyxcvbnm1234567890+-',
        raw: '\\"QWERTZUIOPASDFGHJKLYXCVBNMqwertzuiopasdfghjklyxcvbnm1234567890+-\\"'
      }
    },
    77 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 77, character: 1 },
      end: Position { line: 77, character: 33 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 77, character: 7 },
        end: Position { line: 77, character: 23 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'defaultSecret'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Crypto'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 77, character: 24 },
        end: Position { line: 77, character: 33 },
        scope: [Circular *1],
        value: 'test123',
        raw: '\\"test123\\"'
      }
    },
    78 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 78, character: 1 },
      end: Position { line: 78, character: 27 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 78, character: 7 },
        end: Position { line: 78, character: 21 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'maxCharCode'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Crypto'
        }
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 78, character: 22 },
        end: Position { line: 78, character: 27 },
        scope: [Circular *1],
        value: 55295,
        raw: '55295'
      }
    },
    79 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 79, character: 1 },
      end: Position { line: 79, character: 21 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 79, character: 7 },
        end: Position { line: 79, character: 15 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Error'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Crypto'
        }
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 79, character: 16 },
        end: Position { line: 79, character: 21 },
        scope: [Circular *1],
        name: 'Error'
      }
    },
    82 => <ref *49> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 82, character: 5 },
      end: Position { line: 82, character: 14 },
      scope: <ref *15> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 81, character: 22 },
        end: Position { line: 90, character: 13 },
        scope: [Circular *1],
        body: [
          [Circular *49],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'defaultSecret',
          'hashFn',
          'charset',
          'me',
          'table',
          'defaultCharset',
          'Error',
          'constructor',
          'throw'
        },
        assignments: [
          [Circular *49],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 82, character: 5 },
        end: Position { line: 82, character: 7 },
        scope: <ref *15> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'me'
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 82, character: 10 },
        end: Position { line: 82, character: 14 },
        scope: <ref *15> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'self'
      }
    },
    83 => <ref *50> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 83, character: 5 },
      end: Position { line: 83, character: 37 },
      scope: <ref *15> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 81, character: 22 },
        end: Position { line: 90, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [Circular *50],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'defaultSecret',
          'hashFn',
          'charset',
          'me',
          'table',
          'defaultCharset',
          'Error',
          'constructor',
          'throw'
        },
        assignments: [
          [ASTAssignmentStatement],
          [Circular *50],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 83, character: 7 },
        end: Position { line: 83, character: 23 },
        scope: <ref *15> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'defaultSecret'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'me'
        }
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 83, character: 24 },
        end: Position { line: 83, character: 37 },
        scope: <ref *15> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'defaultSecret'
      }
    },
    84 => <ref *51> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 84, character: 5 },
      end: Position { line: 84, character: 23 },
      scope: <ref *15> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 81, character: 22 },
        end: Position { line: 90, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *51],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'defaultSecret',
          'hashFn',
          'charset',
          'me',
          'table',
          'defaultCharset',
          'Error',
          'constructor',
          'throw'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *51],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 84, character: 7 },
        end: Position { line: 84, character: 15 },
        scope: <ref *15> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'table'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'me'
        }
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 84, character: 16 },
        end: Position { line: 84, character: 23 },
        scope: <ref *15> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'charset'
      }
    },
    85 => <ref *52> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 85, character: 5 },
      end: Position { line: 85, character: 24 },
      scope: <ref *15> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 81, character: 22 },
        end: Position { line: 90, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *52],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'defaultSecret',
          'hashFn',
          'charset',
          'me',
          'table',
          'defaultCharset',
          'Error',
          'constructor',
          'throw'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *52],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 85, character: 7 },
        end: Position { line: 85, character: 16 },
        scope: <ref *15> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'hashFn'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'me'
        }
      },
      init: ASTUnaryExpression {
        type: 'UnaryExpression',
        start: Position { line: 85, character: 17 },
        end: Position { line: 85, character: 24 },
        scope: <ref *15> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        argument: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'hashFn'
        },
        operator: '@'
      }
    },
    86 => <ref *53> ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 86, character: 5 },
      end: Position { line: 86, character: 47 },
      scope: <ref *15> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 81, character: 22 },
        end: Position { line: 90, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *53],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'defaultSecret',
          'hashFn',
          'charset',
          'me',
          'table',
          'defaultCharset',
          'Error',
          'constructor',
          'throw'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier], [ASTIdentifier] ]
      },
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTEvaluationExpression]
        }
      ]
    },
    87 => <ref *54> ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 87, character: 5 },
      end: Position { line: 87, character: 57 },
      scope: <ref *15> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 81, character: 22 },
        end: Position { line: 90, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [Circular *54],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'defaultSecret',
          'hashFn',
          'charset',
          'me',
          'table',
          'defaultCharset',
          'Error',
          'constructor',
          'throw'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier], [ASTIdentifier] ]
      },
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTEvaluationExpression]
        }
      ]
    },
    88 => <ref *55> ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 88, character: 5 },
      end: Position { line: 88, character: 103 },
      scope: <ref *15> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 81, character: 22 },
        end: Position { line: 90, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [Circular *55],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'defaultSecret',
          'hashFn',
          'charset',
          'me',
          'table',
          'defaultCharset',
          'Error',
          'constructor',
          'throw'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier], [ASTIdentifier] ]
      },
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTEvaluationExpression]
        }
      ]
    },
    89 => <ref *56> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 89, character: 5 },
      end: Position { line: 89, character: 14 },
      scope: <ref *15> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 81, character: 22 },
        end: Position { line: 90, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [Circular *56]
        ],
        namespaces: Set(9) {
          'defaultSecret',
          'hashFn',
          'charset',
          'me',
          'table',
          'defaultCharset',
          'Error',
          'constructor',
          'throw'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier], [ASTIdentifier] ]
      },
      argument: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 89, character: 12 },
        end: Position { line: 89, character: 14 },
        scope: <ref *15> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'me'
      }
    },
    81 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 81, character: 1 },
      end: Position { line: 90, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 81, character: 7 },
        end: Position { line: 81, character: 21 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'constructor'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Crypto'
        }
      },
      init: <ref *15> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 81, character: 22 },
        end: Position { line: 90, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(9) {
          'defaultSecret',
          'hashFn',
          'charset',
          'me',
          'table',
          'defaultCharset',
          'Error',
          'constructor',
          'throw'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    93 => <ref *57> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 93, character: 5 },
      end: Position { line: 93, character: 14 },
      scope: <ref *16> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 92, character: 18 },
        end: Position { line: 101, character: 13 },
        scope: [Circular *1],
        body: [
          [Circular *57],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTCallStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'pw', 'me', 'x', 'hashFn', 'reverse' },
        assignments: [
          [Circular *57],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 93, character: 5 },
        end: Position { line: 93, character: 7 },
        scope: <ref *16> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'me'
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 93, character: 10 },
        end: Position { line: 93, character: 14 },
        scope: <ref *16> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'self'
      }
    },
    94 => <ref *58> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 94, character: 5 },
      end: Position { line: 94, character: 14 },
      scope: <ref *16> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 92, character: 18 },
        end: Position { line: 101, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [Circular *58],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTCallStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'pw', 'me', 'x', 'hashFn', 'reverse' },
        assignments: [
          [ASTAssignmentStatement],
          [Circular *58],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 94, character: 5 },
        end: Position { line: 94, character: 9 },
        scope: <ref *16> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'hash'
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 94, character: 12 },
        end: Position { line: 94, character: 14 },
        scope: <ref *16> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        fields: []
      }
    },
    95 => <ref *59> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 95, character: 5 },
      end: Position { line: 95, character: 22 },
      scope: <ref *16> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 92, character: 18 },
        end: Position { line: 101, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *59],
          [ASTForGenericStatement],
          [ASTCallStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'pw', 'me', 'x', 'hashFn', 'reverse' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *59]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 95, character: 5 },
        end: Position { line: 95, character: 6 },
        scope: <ref *16> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'x'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 95, character: 18 },
        end: Position { line: 95, character: 22 },
        scope: <ref *16> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTIdentifier] ]
      }
    },
    97 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 97, character: 9 },
      end: Position { line: 97, character: 29 },
      scope: <ref *16> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 92, character: 18 },
        end: Position { line: 101, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTCallStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'pw', 'me', 'x', 'hashFn', 'reverse' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 97, character: 18 },
        end: Position { line: 97, character: 29 },
        scope: <ref *16> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTMemberExpression] ]
      }
    },
    96 => <ref *60> ASTForGenericStatement {
      type: 'ForGenericStatement',
      start: Position { line: 96, character: 5 },
      end: Position { line: 98, character: 12 },
      scope: <ref *16> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 92, character: 18 },
        end: Position { line: 101, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *60],
          [ASTCallStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'pw', 'me', 'x', 'hashFn', 'reverse' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          expression: [ASTCallExpression]
        }
      ],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 96, character: 9 },
        end: Position { line: 96, character: 13 },
        scope: <ref *16> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'char'
      },
      iterator: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 96, character: 17 },
        end: Position { line: 96, character: 18 },
        scope: <ref *16> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'x'
      }
    },
    99 => <ref *61> ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 99, character: 5 },
      end: Position { line: 99, character: 17 },
      scope: <ref *16> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 92, character: 18 },
        end: Position { line: 101, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [Circular *61],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'pw', 'me', 'x', 'hashFn', 'reverse' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      expression: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 99, character: 9 },
        end: Position { line: 99, character: 17 },
        scope: <ref *16> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'reverse'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'hash'
        }
      }
    },
    100 => <ref *62> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 100, character: 5 },
      end: Position { line: 100, character: 16 },
      scope: <ref *16> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 92, character: 18 },
        end: Position { line: 101, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTCallStatement],
          [Circular *62]
        ],
        namespaces: Set(5) { 'pw', 'me', 'x', 'hashFn', 'reverse' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      argument: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 100, character: 12 },
        end: Position { line: 100, character: 16 },
        scope: <ref *16> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'hash'
      }
    },
    92 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 92, character: 1 },
      end: Position { line: 101, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 92, character: 7 },
        end: Position { line: 92, character: 17 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'getHash'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Crypto'
        }
      },
      init: <ref *16> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 92, character: 18 },
        end: Position { line: 101, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTCallStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'pw', 'me', 'x', 'hashFn', 'reverse' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    104 => <ref *63> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 104, character: 5 },
      end: Position { line: 104, character: 14 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [Circular *63],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [Circular *63],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 104, character: 5 },
        end: Position { line: 104, character: 7 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'me'
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 104, character: 10 },
        end: Position { line: 104, character: 14 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'self'
      }
    },
    105 => <ref *64> ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 105, character: 5 },
      end: Position { line: 105, character: 47 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [Circular *64],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTEvaluationExpression]
        }
      ]
    },
    106 => <ref *65> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 106, character: 5 },
      end: Position { line: 106, character: 26 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [Circular *65],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *65],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 106, character: 5 },
        end: Position { line: 106, character: 9 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'hash'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 106, character: 22 },
        end: Position { line: 106, character: 26 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTIdentifier] ]
      }
    },
    107 => <ref *66> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 107, character: 5 },
      end: Position { line: 107, character: 20 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [Circular *66],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *66],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 107, character: 5 },
        end: Position { line: 107, character: 16 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'hashPointer'
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 107, character: 19 },
        end: Position { line: 107, character: 20 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        value: 0,
        raw: '0'
      }
    },
    108 => <ref *67> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 108, character: 5 },
      end: Position { line: 108, character: 16 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *67],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *67],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 108, character: 5 },
        end: Position { line: 108, character: 11 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'output'
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 108, character: 14 },
        end: Position { line: 108, character: 16 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        fields: []
      }
    },
    109 => <ref *68> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 109, character: 5 },
      end: Position { line: 109, character: 17 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *68],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *68],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 109, character: 5 },
        end: Position { line: 109, character: 13 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'position'
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 109, character: 16 },
        end: Position { line: 109, character: 17 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        value: 0,
        raw: '0'
      }
    },
    110 => <ref *69> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 110, character: 5 },
      end: Position { line: 110, character: 26 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *69],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *69],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 110, character: 5 },
        end: Position { line: 110, character: 12 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'padding'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 110, character: 23 },
        end: Position { line: 110, character: 26 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '%',
        left: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        right: ASTLiteral {
          type: 'NumericLiteral',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          value: 3,
          raw: '3'
        }
      }
    },
    111 => <ref *70> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 111, character: 5 },
      end: Position { line: 111, character: 28 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *70],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *70],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 111, character: 5 },
        end: Position { line: 111, character: 8 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'max'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 111, character: 19 },
        end: Position { line: 111, character: 28 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '-',
        left: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'padding'
        }
      }
    },
    114 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 114, character: 13 },
      end: Position { line: 114, character: 75 },
      scope: <ref *18> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 112, character: 11 },
        end: Position { line: 117, character: 17 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTIfStatement], [ASTReturnStatement] ],
        namespaces: Set(6) { 'v', 'me', 'table', 'Error', 'constructor', 'throw' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 114, character: 73 },
        end: Position { line: 114, character: 75 },
        scope: <ref *18> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTCallExpression]
        },
        arguments: []
      }
    },
    113 => <ref *71> ASTIfStatement {
      type: 'IfStatement',
      start: Position { line: 113, character: 9 },
      end: Position { line: 115, character: 15 },
      scope: <ref *18> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 112, character: 11 },
        end: Position { line: 117, character: 17 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [Circular *71], [ASTReturnStatement] ],
        namespaces: Set(6) { 'v', 'me', 'table', 'Error', 'constructor', 'throw' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      },
      clauses: [
        ASTIfClause {
          type: 'IfClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTUnaryExpression]
        }
      ]
    },
    116 => <ref *72> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 116, character: 9 },
      end: Position { line: 116, character: 27 },
      scope: <ref *18> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 112, character: 11 },
        end: Position { line: 117, character: 17 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTIfStatement], [Circular *72] ],
        namespaces: Set(6) { 'v', 'me', 'table', 'Error', 'constructor', 'throw' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      },
      argument: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 116, character: 25 },
        end: Position { line: 116, character: 27 },
        scope: <ref *18> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        index: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'v'
        }
      }
    },
    112 => <ref *73> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 112, character: 5 },
      end: Position { line: 117, character: 17 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *73],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *73],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 112, character: 5 },
        end: Position { line: 112, character: 8 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'get'
      },
      init: <ref *18> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 112, character: 11 },
        end: Position { line: 117, character: 17 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTIfStatement], [ASTReturnStatement] ],
        namespaces: Set(6) { 'v', 'me', 'table', 'Error', 'constructor', 'throw' },
        assignments: [],
        parameters: [ [ASTIdentifier] ]
      }
    },
    119 => <ref *74> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 119, character: 9 },
      end: Position { line: 119, character: 34 },
      scope: <ref *19> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 118, character: 11 },
        end: Position { line: 120, character: 17 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [Circular *74] ],
        namespaces: Set(2) { 'a', 'b' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      argument: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 119, character: 23 },
        end: Position { line: 119, character: 34 },
        scope: <ref *19> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'bitwise'
        },
        arguments: [ [ASTLiteral], [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    118 => <ref *75> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 118, character: 5 },
      end: Position { line: 120, character: 17 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *75],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *75],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 118, character: 5 },
        end: Position { line: 118, character: 8 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'AND'
      },
      init: <ref *19> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 118, character: 11 },
        end: Position { line: 120, character: 17 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(2) { 'a', 'b' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    122 => <ref *76> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 122, character: 9 },
      end: Position { line: 122, character: 35 },
      scope: <ref *20> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 121, character: 14 },
        end: Position { line: 123, character: 17 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [Circular *76] ],
        namespaces: Set(2) { 'a', 'b' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      argument: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 122, character: 23 },
        end: Position { line: 122, character: 35 },
        scope: <ref *20> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'bitwise'
        },
        arguments: [ [ASTLiteral], [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    121 => <ref *77> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 121, character: 5 },
      end: Position { line: 123, character: 17 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *77],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *77],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 121, character: 5 },
        end: Position { line: 121, character: 11 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'LSHIFT'
      },
      init: <ref *20> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 121, character: 14 },
        end: Position { line: 123, character: 17 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(2) { 'a', 'b' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    125 => <ref *78> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 125, character: 9 },
      end: Position { line: 125, character: 35 },
      scope: <ref *21> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [Circular *78] ],
        namespaces: Set(2) { 'a', 'b' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      argument: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 125, character: 23 },
        end: Position { line: 125, character: 35 },
        scope: <ref *21> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'bitwise'
        },
        arguments: [ [ASTLiteral], [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    124 => <ref *79> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 124, character: 5 },
      end: Position { line: 126, character: 17 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *79],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *79],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 124, character: 5 },
        end: Position { line: 124, character: 11 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'RSHIFT'
      },
      init: <ref *21> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 124, character: 14 },
        end: Position { line: 126, character: 17 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(2) { 'a', 'b' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    128 => <ref *80> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 128, character: 9 },
      end: Position { line: 128, character: 42 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *80],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 128, character: 9 },
        end: Position { line: 128, character: 10 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'm'
      },
      init: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 128, character: 18 },
        end: Position { line: 128, character: 42 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'hash'
        },
        index: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          operator: '-',
          left: [ASTEvaluationExpression],
          right: [ASTLiteral]
        }
      }
    },
    129 => <ref *81> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 129, character: 9 },
      end: Position { line: 129, character: 47 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *81],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 129, character: 9 },
        end: Position { line: 129, character: 10 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'a'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 129, character: 19 },
        end: Position { line: 129, character: 47 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'LSHIFT'
        },
        arguments: [ [ASTEvaluationExpression], [ASTLiteral] ]
      }
    },
    130 => <ref *82> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 130, character: 9 },
      end: Position { line: 130, character: 50 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *82],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 130, character: 9 },
        end: Position { line: 130, character: 10 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'b'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 130, character: 19 },
        end: Position { line: 130, character: 50 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'LSHIFT'
        },
        arguments: [ [ASTEvaluationExpression], [ASTLiteral] ]
      }
    },
    131 => <ref *83> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 131, character: 9 },
      end: Position { line: 131, character: 39 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *83],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 131, character: 9 },
        end: Position { line: 131, character: 10 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'c'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 131, character: 36 },
        end: Position { line: 131, character: 39 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '+',
        left: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIndexExpression]
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'm'
        }
      }
    },
    132 => <ref *84> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 132, character: 9 },
      end: Position { line: 132, character: 27 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *84],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 132, character: 9 },
        end: Position { line: 132, character: 15 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'buffer'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 132, character: 20 },
        end: Position { line: 132, character: 27 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '+',
        left: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          operator: '+',
          left: [ASTIdentifier],
          right: [ASTIdentifier]
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'c'
        }
      }
    },
    133 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 133, character: 9 },
      end: Position { line: 133, character: 54 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 133, character: 20 },
        end: Position { line: 133, character: 54 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTCallExpression] ]
      }
    },
    134 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 134, character: 9 },
      end: Position { line: 134, character: 54 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 134, character: 20 },
        end: Position { line: 134, character: 54 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTCallExpression] ]
      }
    },
    135 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 135, character: 9 },
      end: Position { line: 135, character: 53 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 135, character: 20 },
        end: Position { line: 135, character: 53 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTCallExpression] ]
      }
    },
    136 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 136, character: 9 },
      end: Position { line: 136, character: 42 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 136, character: 20 },
        end: Position { line: 136, character: 42 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTCallExpression] ]
      }
    },
    137 => <ref *85> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 137, character: 9 },
      end: Position { line: 137, character: 32 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *85],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 137, character: 9 },
        end: Position { line: 137, character: 17 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'position'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 137, character: 29 },
        end: Position { line: 137, character: 32 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '+',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'position'
        },
        right: ASTLiteral {
          type: 'NumericLiteral',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          value: 3,
          raw: '3'
        }
      }
    },
    127 => <ref *86> ASTWhileStatement {
      type: 'WhileStatement',
      start: Position { line: 127, character: 5 },
      end: Position { line: 138, character: 14 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *86],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      body: [
        <ref *80> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTIndexExpression]
        },
        <ref *81> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        <ref *82> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        <ref *83> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        <ref *84> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          expression: [ASTCallExpression]
        },
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          expression: [ASTCallExpression]
        },
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          expression: [ASTCallExpression]
        },
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          expression: [ASTCallExpression]
        },
        <ref *85> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        }
      ],
      condition: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 127, character: 20 },
        end: Position { line: 127, character: 25 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '<',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'position'
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'max'
        }
      }
    },
    140 => <ref *87> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 140, character: 9 },
      end: Position { line: 140, character: 42 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *87],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 140, character: 9 },
        end: Position { line: 140, character: 10 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'm'
      },
      init: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 140, character: 18 },
        end: Position { line: 140, character: 42 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'hash'
        },
        index: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          operator: '-',
          left: [ASTEvaluationExpression],
          right: [ASTLiteral]
        }
      }
    },
    141 => <ref *88> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 141, character: 9 },
      end: Position { line: 141, character: 46 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *88],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 141, character: 9 },
        end: Position { line: 141, character: 10 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'a'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 141, character: 19 },
        end: Position { line: 141, character: 46 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'LSHIFT'
        },
        arguments: [ [ASTEvaluationExpression], [ASTLiteral] ]
      }
    },
    142 => <ref *89> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 142, character: 9 },
      end: Position { line: 142, character: 39 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *89],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 142, character: 9 },
        end: Position { line: 142, character: 10 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'b'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 142, character: 36 },
        end: Position { line: 142, character: 39 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '+',
        left: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIndexExpression]
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'm'
        }
      }
    },
    143 => <ref *90> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 143, character: 9 },
      end: Position { line: 143, character: 23 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *90],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 143, character: 9 },
        end: Position { line: 143, character: 15 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'buffer'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 143, character: 20 },
        end: Position { line: 143, character: 23 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '+',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'a'
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'b'
        }
      }
    },
    144 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 144, character: 9 },
      end: Position { line: 144, character: 45 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 144, character: 20 },
        end: Position { line: 144, character: 45 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTCallExpression] ]
      }
    },
    145 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 145, character: 9 },
      end: Position { line: 145, character: 53 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 145, character: 20 },
        end: Position { line: 145, character: 53 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTCallExpression] ]
      }
    },
    146 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 146, character: 9 },
      end: Position { line: 146, character: 53 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 146, character: 20 },
        end: Position { line: 146, character: 53 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTCallExpression] ]
      }
    },
    147 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 147, character: 9 },
      end: Position { line: 147, character: 25 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 147, character: 20 },
        end: Position { line: 147, character: 25 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    149 => <ref *91> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 149, character: 9 },
      end: Position { line: 149, character: 42 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *91],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 149, character: 9 },
        end: Position { line: 149, character: 10 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'm'
      },
      init: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 149, character: 18 },
        end: Position { line: 149, character: 42 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'hash'
        },
        index: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          operator: '-',
          left: [ASTEvaluationExpression],
          right: [ASTLiteral]
        }
      }
    },
    150 => <ref *92> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 150, character: 9 },
      end: Position { line: 150, character: 40 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *92]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 150, character: 9 },
        end: Position { line: 150, character: 15 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'buffer'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 150, character: 37 },
        end: Position { line: 150, character: 40 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '+',
        left: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIndexExpression]
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'm'
        }
      }
    },
    151 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 151, character: 9 },
      end: Position { line: 151, character: 44 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 151, character: 20 },
        end: Position { line: 151, character: 44 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTCallExpression] ]
      }
    },
    152 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 152, character: 9 },
      end: Position { line: 152, character: 53 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 152, character: 20 },
        end: Position { line: 152, character: 53 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTCallExpression] ]
      }
    },
    153 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 153, character: 9 },
      end: Position { line: 153, character: 26 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 153, character: 20 },
        end: Position { line: 153, character: 26 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    139 => <ref *93> ASTIfStatement {
      type: 'IfStatement',
      start: Position { line: 139, character: 5 },
      end: Position { line: 154, character: 11 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [Circular *93],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      clauses: [
        ASTIfClause {
          type: 'IfClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTEvaluationExpression]
        },
        ASTIfClause {
          type: 'ElseifClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTEvaluationExpression]
        }
      ]
    },
    155 => <ref *94> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 155, character: 5 },
      end: Position { line: 155, character: 27 },
      scope: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [Circular *94]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      argument: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 155, character: 23 },
        end: Position { line: 155, character: 27 },
        scope: <ref *17> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    103 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 103, character: 1 },
      end: Position { line: 156, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 103, character: 7 },
        end: Position { line: 103, character: 17 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'encrypt'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Crypto'
        }
      },
      init: <ref *17> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 103, character: 18 },
        end: Position { line: 156, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(19) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'output',
          'position',
          'padding',
          'max',
          'get',
          'AND',
          'LSHIFT',
          'RSHIFT',
          'm',
          'a',
          'b',
          'c',
          'buffer',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    159 => <ref *95> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 159, character: 5 },
      end: Position { line: 159, character: 14 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [Circular *95],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [Circular *95],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 159, character: 5 },
        end: Position { line: 159, character: 7 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'me'
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 159, character: 10 },
        end: Position { line: 159, character: 14 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'self'
      }
    },
    160 => <ref *96> ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 160, character: 5 },
      end: Position { line: 160, character: 47 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [Circular *96],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTEvaluationExpression]
        }
      ]
    },
    161 => <ref *97> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 161, character: 5 },
      end: Position { line: 161, character: 26 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [Circular *97],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *97],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 161, character: 5 },
        end: Position { line: 161, character: 9 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'hash'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 161, character: 22 },
        end: Position { line: 161, character: 26 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTIdentifier] ]
      }
    },
    162 => <ref *98> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 162, character: 5 },
      end: Position { line: 162, character: 20 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [Circular *98],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *98],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 162, character: 5 },
        end: Position { line: 162, character: 16 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'hashPointer'
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 162, character: 19 },
        end: Position { line: 162, character: 20 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        value: 0,
        raw: '0'
      }
    },
    163 => <ref *99> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 163, character: 5 },
      end: Position { line: 163, character: 26 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *99],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *99],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 163, character: 5 },
        end: Position { line: 163, character: 15 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'hashLength'
      },
      init: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 163, character: 22 },
        end: Position { line: 163, character: 26 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'len'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'hash'
        }
      }
    },
    164 => <ref *100> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 164, character: 5 },
      end: Position { line: 164, character: 16 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *100],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *100],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 164, character: 5 },
        end: Position { line: 164, character: 11 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'output'
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 164, character: 14 },
        end: Position { line: 164, character: 16 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        fields: []
      }
    },
    165 => <ref *101> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 165, character: 5 },
      end: Position { line: 165, character: 19 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *101],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *101],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 165, character: 5 },
        end: Position { line: 165, character: 15 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'bitCounter'
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 165, character: 18 },
        end: Position { line: 165, character: 19 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        value: 0,
        raw: '0'
      }
    },
    166 => <ref *102> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 166, character: 5 },
      end: Position { line: 166, character: 19 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *102],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *102],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 166, character: 5 },
        end: Position { line: 166, character: 15 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'bitStorage'
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 166, character: 18 },
        end: Position { line: 166, character: 19 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        value: 0,
        raw: '0'
      }
    },
    167 => <ref *103> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 167, character: 5 },
      end: Position { line: 167, character: 17 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *103],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *103],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 167, character: 5 },
        end: Position { line: 167, character: 13 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'position'
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 167, character: 16 },
        end: Position { line: 167, character: 17 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        value: 0,
        raw: '0'
      }
    },
    168 => <ref *104> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 168, character: 5 },
      end: Position { line: 168, character: 20 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *104],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *104],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 168, character: 5 },
        end: Position { line: 168, character: 16 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'hashPointer'
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 168, character: 19 },
        end: Position { line: 168, character: 20 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        value: 0,
        raw: '0'
      }
    },
    169 => <ref *105> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 169, character: 5 },
      end: Position { line: 169, character: 18 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *105],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *105],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 169, character: 5 },
        end: Position { line: 169, character: 8 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'max'
      },
      init: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 169, character: 14 },
        end: Position { line: 169, character: 18 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'len'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'str'
        }
      }
    },
    171 => <ref *106> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 171, character: 9 },
      end: Position { line: 171, character: 34 },
      scope: <ref *23> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 170, character: 11 },
        end: Position { line: 172, character: 17 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [Circular *106] ],
        namespaces: Set(2) { 'a', 'b' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      argument: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 171, character: 23 },
        end: Position { line: 171, character: 34 },
        scope: <ref *23> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'bitwise'
        },
        arguments: [ [ASTLiteral], [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    170 => <ref *107> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 170, character: 5 },
      end: Position { line: 172, character: 17 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *107],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *107],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 170, character: 5 },
        end: Position { line: 170, character: 8 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'AND'
      },
      init: <ref *23> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 170, character: 11 },
        end: Position { line: 172, character: 17 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(2) { 'a', 'b' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    174 => <ref *108> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 174, character: 9 },
      end: Position { line: 174, character: 35 },
      scope: <ref *24> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 173, character: 14 },
        end: Position { line: 175, character: 17 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [Circular *108] ],
        namespaces: Set(2) { 'a', 'b' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      argument: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 174, character: 23 },
        end: Position { line: 174, character: 35 },
        scope: <ref *24> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          namespaces: [Set],
          assignments: [],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'bitwise'
        },
        arguments: [ [ASTLiteral], [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    173 => <ref *109> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 173, character: 5 },
      end: Position { line: 175, character: 17 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *109],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *109],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 173, character: 5 },
        end: Position { line: 173, character: 11 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'RSHIFT'
      },
      init: <ref *24> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 173, character: 14 },
        end: Position { line: 175, character: 17 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        body: [ [ASTReturnStatement] ],
        namespaces: Set(2) { 'a', 'b' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    177 => <ref *110> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 177, character: 9 },
      end: Position { line: 177, character: 49 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *110],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 177, character: 9 },
        end: Position { line: 177, character: 15 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'buffer'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 177, character: 34 },
        end: Position { line: 177, character: 49 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTMemberExpression]
        },
        arguments: [ [ASTIndexExpression] ]
      }
    },
    178 => <ref *111> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 178, character: 9 },
      end: Position { line: 178, character: 32 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *111],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 178, character: 9 },
        end: Position { line: 178, character: 19 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'currentBit'
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 178, character: 22 },
        end: Position { line: 178, character: 32 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'bitCounter'
      }
    },
    179 => <ref *112> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 179, character: 9 },
      end: Position { line: 179, character: 36 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *112],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 179, character: 9 },
        end: Position { line: 179, character: 19 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'bitCounter'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 179, character: 33 },
        end: Position { line: 179, character: 36 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '+',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'bitCounter'
        },
        right: ASTLiteral {
          type: 'NumericLiteral',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          value: 1,
          raw: '1'
        }
      }
    },
    181 => <ref *113> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 181, character: 13 },
      end: Position { line: 181, character: 50 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *113],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 181, character: 13 },
        end: Position { line: 181, character: 23 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'bitStorage'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 181, character: 37 },
        end: Position { line: 181, character: 50 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '+',
        left: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          operator: '*',
          left: [ASTIdentifier],
          right: [ASTLiteral]
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'buffer'
        }
      }
    },
    183 => <ref *114> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 183, character: 13 },
      end: Position { line: 183, character: 32 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *114],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 183, character: 13 },
        end: Position { line: 183, character: 23 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'bitStorage'
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 183, character: 26 },
        end: Position { line: 183, character: 32 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'buffer'
      }
    },
    180 => ASTIfStatement {
      type: 'IfStatement',
      start: Position { line: 180, character: 9 },
      end: Position { line: 184, character: 15 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      clauses: [
        ASTIfClause {
          type: 'IfClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTEvaluationExpression]
        },
        ASTElseClause {
          type: 'ElseClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array]
        }
      ]
    },
    186 => <ref *115> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 186, character: 13 },
      end: Position { line: 186, character: 78 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *115],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 186, character: 13 },
        end: Position { line: 186, character: 30 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'expectedHashIndex'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 186, character: 62 },
        end: Position { line: 186, character: 78 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '-',
        left: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          operator: '%',
          left: [ASTEvaluationExpression],
          right: [ASTIdentifier]
        },
        right: ASTLiteral {
          type: 'NumericLiteral',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          value: 1,
          raw: '1'
        }
      }
    },
    187 => ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 187, character: 13 },
      end: Position { line: 187, character: 65 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTUnaryExpression]
        }
      ]
    },
    188 => <ref *116> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 188, character: 13 },
      end: Position { line: 188, character: 40 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *116],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 188, character: 13 },
        end: Position { line: 188, character: 14 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'm'
      },
      init: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 188, character: 22 },
        end: Position { line: 188, character: 40 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'hash'
        },
        index: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'expectedHashIndex'
        }
      }
    },
    189 => <ref *117> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 189, character: 13 },
      end: Position { line: 189, character: 48 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *117],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 189, character: 13 },
        end: Position { line: 189, character: 22 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'operation'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 189, character: 28 },
        end: Position { line: 189, character: 48 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'AND'
        },
        arguments: [ [ASTEvaluationExpression], [ASTLiteral] ]
      }
    },
    190 => <ref *118> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 190, character: 13 },
      end: Position { line: 190, character: 54 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *118],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 190, character: 13 },
        end: Position { line: 190, character: 22 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'operation'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 190, character: 31 },
        end: Position { line: 190, character: 54 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'RSHIFT'
        },
        arguments: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    191 => <ref *119> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 191, character: 13 },
      end: Position { line: 191, character: 44 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *119],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 191, character: 13 },
        end: Position { line: 191, character: 22 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'operation'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 191, character: 28 },
        end: Position { line: 191, character: 44 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'AND'
        },
        arguments: [ [ASTLiteral], [ASTIdentifier] ]
      }
    },
    193 => <ref *120> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 193, character: 17 },
      end: Position { line: 193, character: 41 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *120],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 193, character: 17 },
        end: Position { line: 193, character: 25 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'charCode'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 193, character: 38 },
        end: Position { line: 193, character: 41 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '-',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'operation'
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'm'
        }
      }
    },
    194 => ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 194, character: 17 },
      end: Position { line: 194, character: 58 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTEvaluationExpression]
        }
      ]
    },
    195 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 195, character: 17 },
      end: Position { line: 195, character: 44 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 195, character: 28 },
        end: Position { line: 195, character: 44 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTCallExpression] ]
      }
    },
    192 => ASTIfStatement {
      type: 'IfStatement',
      start: Position { line: 192, character: 13 },
      end: Position { line: 196, character: 19 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      clauses: [
        ASTIfClause {
          type: 'IfClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTEvaluationExpression]
        }
      ]
    },
    197 => <ref *121> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 197, character: 13 },
      end: Position { line: 197, character: 42 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *121],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 197, character: 13 },
        end: Position { line: 197, character: 24 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'hashPointer'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 197, character: 39 },
        end: Position { line: 197, character: 42 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '+',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'hashPointer'
        },
        right: ASTLiteral {
          type: 'NumericLiteral',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          value: 1,
          raw: '1'
        }
      }
    },
    185 => ASTIfStatement {
      type: 'IfStatement',
      start: Position { line: 185, character: 9 },
      end: Position { line: 198, character: 15 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      clauses: [
        ASTIfClause {
          type: 'IfClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTEvaluationExpression]
        }
      ]
    },
    199 => <ref *122> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 199, character: 9 },
      end: Position { line: 199, character: 32 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *122]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 199, character: 9 },
        end: Position { line: 199, character: 17 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'position'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 199, character: 29 },
        end: Position { line: 199, character: 32 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '+',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'position'
        },
        right: ASTLiteral {
          type: 'NumericLiteral',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          value: 1,
          raw: '1'
        }
      }
    },
    176 => <ref *123> ASTWhileStatement {
      type: 'WhileStatement',
      start: Position { line: 176, character: 5 },
      end: Position { line: 200, character: 14 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *123],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      body: [
        <ref *110> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        <ref *111> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        <ref *112> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTIfStatement {
          type: 'IfStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          clauses: [Array]
        },
        ASTIfStatement {
          type: 'IfStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          clauses: [Array]
        },
        <ref *122> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        }
      ],
      condition: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 176, character: 20 },
        end: Position { line: 176, character: 25 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '<',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'position'
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'max'
        }
      }
    },
    201 => <ref *124> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 201, character: 5 },
      end: Position { line: 201, character: 27 },
      scope: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [Circular *124]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      argument: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 201, character: 23 },
        end: Position { line: 201, character: 27 },
        scope: <ref *22> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    158 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 158, character: 1 },
      end: Position { line: 202, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 158, character: 7 },
        end: Position { line: 158, character: 17 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'decrypt'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Crypto'
        }
      },
      init: <ref *22> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 158, character: 18 },
        end: Position { line: 202, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(22) {
          'pw',
          'me',
          'defaultSecret',
          'getHash',
          'hashPointer',
          'hashLength',
          'output',
          'bitCounter',
          'bitStorage',
          'position',
          'max',
          'AND',
          'RSHIFT',
          'buffer',
          'table',
          'currentBit',
          'expectedHashIndex',
          'm',
          'operation',
          'charCode',
          'maxCharCode',
          'join'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    204 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 204, character: 1 },
      end: Position { line: 204, character: 40 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 204, character: 1 },
        end: Position { line: 204, character: 5 },
        scope: [Circular *1],
        name: 'test'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 204, character: 32 },
        end: Position { line: 204, character: 40 },
        scope: [Circular *1],
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTUnaryExpression]
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    206 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 206, character: 1 },
      end: Position { line: 206, character: 14 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 206, character: 1 },
        end: Position { line: 206, character: 4 },
        scope: [Circular *1],
        name: 'pwd'
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 206, character: 7 },
        end: Position { line: 206, character: 14 },
        scope: [Circular *1],
        value: 'abcde',
        raw: '\\"abcde\\"'
      }
    },
    208 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 208, character: 1 },
      end: Position { line: 208, character: 24 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 208, character: 1 },
        end: Position { line: 208, character: 4 },
        scope: [Circular *1],
        name: 'foo'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 208, character: 19 },
        end: Position { line: 208, character: 24 },
        scope: [Circular *1],
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTIdentifier] ]
      }
    },
    209 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 209, character: 1 },
      end: Position { line: 209, character: 30 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 209, character: 1 },
        end: Position { line: 209, character: 10 },
        scope: [Circular *1],
        name: 'decrypted'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 209, character: 25 },
        end: Position { line: 209, character: 30 },
        scope: [Circular *1],
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTIdentifier] ]
      }
    },
    211 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 211, character: 1 },
      end: Position { line: 211, character: 11 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 211, character: 6 },
        end: Position { line: 211, character: 11 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTIdentifier] ]
      }
    },
    212 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 212, character: 1 },
      end: Position { line: 212, character: 17 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 212, character: 6 },
        end: Position { line: 212, character: 17 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTIdentifier] ]
      }
    }
  }
}"
`;

exports[`parse default scripts random.src 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 62, character: 39 },
  scope: null,
  body: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 12 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 7 },
        scope: [Circular *1],
        name: 'Random'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 10 },
        end: Position { line: 1, character: 12 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 17 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 3, character: 7 },
        end: Position { line: 3, character: 14 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'pool'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Random'
        }
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 3, character: 15 },
        end: Position { line: 3, character: 17 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 4, character: 30 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 4, character: 7 },
        end: Position { line: 4, character: 21 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'defaultSeed'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Random'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 4, character: 22 },
        end: Position { line: 4, character: 30 },
        scope: [Circular *1],
        value: 'random',
        raw: '\\"random\\"'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 6, character: 1 },
      end: Position { line: 8, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 6, character: 7 },
        end: Position { line: 6, character: 20 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'createPool'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Random'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 6, character: 21 },
        end: Position { line: 8, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'seed' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 10, character: 1 },
      end: Position { line: 20, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 10, character: 7 },
        end: Position { line: 10, character: 18 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'calcSeed'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Random'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 10, character: 19 },
        end: Position { line: 20, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(3) { 'seed', 'seedVal', 'pos' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 22, character: 1 },
      end: Position { line: 42, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 22, character: 7 },
        end: Position { line: 22, character: 13 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'gen'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Random'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'seedVal',
          'calcSeed',
          'createPool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 44, character: 1 },
      end: Position { line: 55, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 44, character: 7 },
        end: Position { line: 44, character: 13 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'seq'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Random'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 44, character: 14 },
        end: Position { line: 55, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(11) {
          'min',
          'max',
          'seed',
          'amount',
          'keepPool',
          'me',
          'index',
          'result',
          'temp',
          'gen',
          'pool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 57, character: 1 },
      end: Position { line: 59, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 57, character: 7 },
        end: Position { line: 57, character: 13 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'get'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Random'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 57, character: 14 },
        end: Position { line: 59, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'min', 'max', 'gen' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 61, character: 1 },
      end: Position { line: 61, character: 27 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 61, character: 6 },
        end: Position { line: 61, character: 27 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTCallExpression] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 62, character: 1 },
      end: Position { line: 62, character: 39 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 62, character: 6 },
        end: Position { line: 62, character: 39 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTCallExpression] ]
      }
    }
  ],
  namespaces: Set(8) {
    'Random',
    'pool',
    'defaultSeed',
    'createPool',
    'calcSeed',
    'gen',
    'seq',
    'get'
  },
  assignments: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 12 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 7 },
        scope: [Circular *1],
        name: 'Random'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 10 },
        end: Position { line: 1, character: 12 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 17 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 3, character: 7 },
        end: Position { line: 3, character: 14 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'pool'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Random'
        }
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 3, character: 15 },
        end: Position { line: 3, character: 17 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 4, character: 30 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 4, character: 7 },
        end: Position { line: 4, character: 21 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'defaultSeed'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Random'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 4, character: 22 },
        end: Position { line: 4, character: 30 },
        scope: [Circular *1],
        value: 'random',
        raw: '\\"random\\"'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 6, character: 1 },
      end: Position { line: 8, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 6, character: 7 },
        end: Position { line: 6, character: 20 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'createPool'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Random'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 6, character: 21 },
        end: Position { line: 8, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'seed' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 10, character: 1 },
      end: Position { line: 20, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 10, character: 7 },
        end: Position { line: 10, character: 18 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'calcSeed'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Random'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 10, character: 19 },
        end: Position { line: 20, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(3) { 'seed', 'seedVal', 'pos' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 22, character: 1 },
      end: Position { line: 42, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 22, character: 7 },
        end: Position { line: 22, character: 13 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'gen'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Random'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'seedVal',
          'calcSeed',
          'createPool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 44, character: 1 },
      end: Position { line: 55, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 44, character: 7 },
        end: Position { line: 44, character: 13 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'seq'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Random'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 44, character: 14 },
        end: Position { line: 55, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(11) {
          'min',
          'max',
          'seed',
          'amount',
          'keepPool',
          'me',
          'index',
          'result',
          'temp',
          'gen',
          'pool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 57, character: 1 },
      end: Position { line: 59, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 57, character: 7 },
        end: Position { line: 57, character: 13 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'get'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Random'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 57, character: 14 },
        end: Position { line: 59, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'min', 'max', 'gen' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    }
  ],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 4, character: 22 },
      end: Position { line: 4, character: 30 },
      scope: [Circular *1],
      value: 'random',
      raw: '\\"random\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 7, character: 14 },
      end: Position { line: 7, character: 20 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 6, character: 21 },
        end: Position { line: 8, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'seed' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 'seed',
      raw: '\\"seed\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 7, character: 28 },
      end: Position { line: 7, character: 35 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 6, character: 21 },
        end: Position { line: 8, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'seed' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 'value',
      raw: '\\"value\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 7, character: 42 },
      end: Position { line: 7, character: 54 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 6, character: 21 },
        end: Position { line: 8, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'seed' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 'generation',
      raw: '\\"generation\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 7, character: 56 },
      end: Position { line: 7, character: 57 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 6, character: 21 },
        end: Position { line: 8, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'seed' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 11, character: 15 },
      end: Position { line: 11, character: 16 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 10, character: 19 },
        end: Position { line: 20, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(3) { 'seed', 'seedVal', 'pos' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 16, character: 21 },
      end: Position { line: 16, character: 22 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 10, character: 19 },
        end: Position { line: 20, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(3) { 'seed', 'seedVal', 'pos' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NilLiteral',
      start: Position { line: 25, character: 16 },
      end: Position { line: 25, character: 20 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'seedVal',
          'calcSeed',
          'createPool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      value: null,
      raw: 'null'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 25, character: 33 },
      end: Position { line: 25, character: 37 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'seedVal',
          'calcSeed',
          'createPool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'NilLiteral',
      start: Position { line: 26, character: 17 },
      end: Position { line: 26, character: 21 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'seedVal',
          'calcSeed',
          'createPool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      value: null,
      raw: 'null'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 30, character: 41 },
      end: Position { line: 30, character: 42 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'seedVal',
          'calcSeed',
          'createPool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 46, character: 13 },
      end: Position { line: 46, character: 14 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 44, character: 14 },
        end: Position { line: 55, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(11) {
          'min',
          'max',
          'seed',
          'amount',
          'keepPool',
          'me',
          'index',
          'result',
          'temp',
          'gen',
          'pool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 51, character: 25 },
      end: Position { line: 51, character: 26 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 44, character: 14 },
        end: Position { line: 55, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(11) {
          'min',
          'max',
          'seed',
          'amount',
          'keepPool',
          'me',
          'index',
          'result',
          'temp',
          'gen',
          'pool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 53, character: 21 },
      end: Position { line: 53, character: 25 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 44, character: 14 },
        end: Position { line: 55, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(11) {
          'min',
          'max',
          'seed',
          'amount',
          'keepPool',
          'me',
          'index',
          'result',
          'temp',
          'gen',
          'pool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 61, character: 18 },
      end: Position { line: 61, character: 21 },
      scope: [Circular *1],
      value: 100,
      raw: '100'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 61, character: 22 },
      end: Position { line: 61, character: 25 },
      scope: [Circular *1],
      value: 500,
      raw: '500'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 62, character: 18 },
      end: Position { line: 62, character: 21 },
      scope: [Circular *1],
      value: 100,
      raw: '100'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 62, character: 22 },
      end: Position { line: 62, character: 25 },
      scope: [Circular *1],
      value: 500,
      raw: '500'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 62, character: 27 },
      end: Position { line: 62, character: 33 },
      scope: [Circular *1],
      value: 'test',
      raw: '\\"test\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 62, character: 35 },
      end: Position { line: 62, character: 37 },
      scope: [Circular *1],
      value: 10,
      raw: '10'
    }
  ],
  scopes: [
    <ref *2> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 6, character: 21 },
      end: Position { line: 8, character: 13 },
      scope: [Circular *1],
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          argument: [ASTMapConstructorExpression]
        }
      ],
      namespaces: Set(1) { 'seed' },
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          name: 'seed'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          name: 'val'
        }
      ]
    },
    <ref *3> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 10, character: 19 },
      end: Position { line: 20, character: 13 },
      scope: [Circular *1],
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTForGenericStatement {
          type: 'ForGenericStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          body: [Array],
          variable: [ASTIdentifier],
          iterator: [ASTIdentifier]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          argument: [ASTIdentifier]
        }
      ],
      namespaces: Set(3) { 'seed', 'seedVal', 'pos' },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          name: 'seed'
        }
      ]
    },
    <ref *4> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 22, character: 14 },
      end: Position { line: 42, character: 13 },
      scope: [Circular *1],
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTIfStatement {
          type: 'IfShortcutStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          clauses: [Array]
        },
        ASTIfStatement {
          type: 'IfShortcutStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          clauses: [Array]
        },
        ASTIfStatement {
          type: 'IfStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          clauses: [Array]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIndexExpression],
          init: [ASTCallExpression]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          argument: [ASTIdentifier]
        }
      ],
      namespaces: Set(13) {
        'min',
        'max',
        'seed',
        'inc',
        'me',
        'pool',
        'defaultSeed',
        'ps',
        'value',
        'generation',
        'seedVal',
        'calcSeed',
        'createPool'
      },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIdentifier],
          init: [ASTIndexExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTMemberExpression],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTMemberExpression],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIndexExpression],
          init: [ASTCallExpression]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          name: 'min'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          name: 'max'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          name: 'seed'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          name: 'inc'
        }
      ]
    },
    <ref *5> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 44, character: 14 },
      end: Position { line: 55, character: 13 },
      scope: [Circular *1],
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *5],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *5],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *5],
          variable: [ASTIdentifier],
          init: [ASTListConstructorExpression]
        },
        ASTWhileStatement {
          type: 'WhileStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *5],
          body: [Array],
          condition: [ASTEvaluationExpression]
        },
        ASTIfStatement {
          type: 'IfShortcutStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *5],
          clauses: [Array]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *5],
          argument: [ASTIdentifier]
        }
      ],
      namespaces: Set(11) {
        'min',
        'max',
        'seed',
        'amount',
        'keepPool',
        'me',
        'index',
        'result',
        'temp',
        'gen',
        'pool'
      },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *5],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *5],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *5],
          variable: [ASTIdentifier],
          init: [ASTListConstructorExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *5],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *5],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *5],
          name: 'min'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *5],
          name: 'max'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *5],
          name: 'seed'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *5],
          name: 'amount'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *5],
          name: 'keepPool'
        }
      ]
    },
    <ref *6> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 57, character: 14 },
      end: Position { line: 59, character: 13 },
      scope: [Circular *1],
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *6],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(3) { 'min', 'max', 'gen' },
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *6],
          name: 'min'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *6],
          name: 'max'
        }
      ]
    }
  ],
  lines: Map(42) {
    1 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 12 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 7 },
        scope: [Circular *1],
        name: 'Random'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 10 },
        end: Position { line: 1, character: 12 },
        scope: [Circular *1],
        fields: []
      }
    },
    3 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 17 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 3, character: 7 },
        end: Position { line: 3, character: 14 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'pool'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Random'
        }
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 3, character: 15 },
        end: Position { line: 3, character: 17 },
        scope: [Circular *1],
        fields: []
      }
    },
    4 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 4, character: 30 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 4, character: 7 },
        end: Position { line: 4, character: 21 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'defaultSeed'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Random'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 4, character: 22 },
        end: Position { line: 4, character: 30 },
        scope: [Circular *1],
        value: 'random',
        raw: '\\"random\\"'
      }
    },
    7 => <ref *7> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 7, character: 5 },
      end: Position { line: 7, character: 59 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 6, character: 21 },
        end: Position { line: 8, character: 13 },
        scope: [Circular *1],
        body: [ [Circular *7] ],
        namespaces: Set(1) { 'seed' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      argument: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 7, character: 12 },
        end: Position { line: 7, character: 59 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [],
          parameters: [Array]
        },
        fields: [ [ASTMapKeyString], [ASTMapKeyString], [ASTMapKeyString] ]
      }
    },
    6 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 6, character: 1 },
      end: Position { line: 8, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 6, character: 7 },
        end: Position { line: 6, character: 20 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'createPool'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Random'
        }
      },
      init: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 6, character: 21 },
        end: Position { line: 8, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'seed' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    11 => <ref *8> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 11, character: 5 },
      end: Position { line: 11, character: 16 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 10, character: 19 },
        end: Position { line: 20, character: 13 },
        scope: [Circular *1],
        body: [
          [Circular *8],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(3) { 'seed', 'seedVal', 'pos' },
        assignments: [
          [Circular *8],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 11, character: 5 },
        end: Position { line: 11, character: 12 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'seedVal'
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 11, character: 15 },
        end: Position { line: 11, character: 16 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        value: 0,
        raw: '0'
      }
    },
    12 => <ref *9> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 12, character: 5 },
      end: Position { line: 12, character: 19 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 10, character: 19 },
        end: Position { line: 20, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [Circular *9],
          [ASTForGenericStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(3) { 'seed', 'seedVal', 'pos' },
        assignments: [
          [ASTAssignmentStatement],
          [Circular *9],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 12, character: 5 },
        end: Position { line: 12, character: 8 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'pos'
      },
      init: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 12, character: 15 },
        end: Position { line: 12, character: 19 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'len'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'seed'
        }
      }
    },
    15 => <ref *10> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 15, character: 9 },
      end: Position { line: 15, character: 44 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 10, character: 19 },
        end: Position { line: 20, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(3) { 'seed', 'seedVal', 'pos' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *10],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 15, character: 9 },
        end: Position { line: 15, character: 16 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'seedVal'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 15, character: 27 },
        end: Position { line: 15, character: 44 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '+',
        left: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          operator: '+',
          left: [ASTIdentifier],
          right: [ASTMemberExpression]
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'pos'
        }
      }
    },
    16 => <ref *11> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 16, character: 9 },
      end: Position { line: 16, character: 22 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 10, character: 19 },
        end: Position { line: 20, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(3) { 'seed', 'seedVal', 'pos' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *11]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 16, character: 9 },
        end: Position { line: 16, character: 12 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'pos'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 16, character: 19 },
        end: Position { line: 16, character: 22 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '-',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'pos'
        },
        right: ASTLiteral {
          type: 'NumericLiteral',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          value: 1,
          raw: '1'
        }
      }
    },
    14 => <ref *12> ASTForGenericStatement {
      type: 'ForGenericStatement',
      start: Position { line: 14, character: 5 },
      end: Position { line: 17, character: 12 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 10, character: 19 },
        end: Position { line: 20, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *12],
          [ASTReturnStatement]
        ],
        namespaces: Set(3) { 'seed', 'seedVal', 'pos' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      body: [
        <ref *10> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        <ref *11> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        }
      ],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 14, character: 9 },
        end: Position { line: 14, character: 13 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'char'
      },
      iterator: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 14, character: 17 },
        end: Position { line: 14, character: 21 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'seed'
      }
    },
    19 => <ref *13> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 19, character: 5 },
      end: Position { line: 19, character: 19 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 10, character: 19 },
        end: Position { line: 20, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [Circular *13]
        ],
        namespaces: Set(3) { 'seed', 'seedVal', 'pos' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      argument: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 19, character: 12 },
        end: Position { line: 19, character: 19 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'seedVal'
      }
    },
    10 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 10, character: 1 },
      end: Position { line: 20, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 10, character: 7 },
        end: Position { line: 10, character: 18 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'calcSeed'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Random'
        }
      },
      init: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 10, character: 19 },
        end: Position { line: 20, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(3) { 'seed', 'seedVal', 'pos' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    23 => <ref *14> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 23, character: 5 },
      end: Position { line: 23, character: 14 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: [Circular *1],
        body: [
          [Circular *14],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'seedVal',
          'calcSeed',
          'createPool'
        },
        assignments: [
          [Circular *14],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 23, character: 5 },
        end: Position { line: 23, character: 7 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'me'
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 23, character: 10 },
        end: Position { line: 23, character: 14 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'self'
      }
    },
    24 => <ref *15> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 24, character: 5 },
      end: Position { line: 24, character: 19 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [Circular *15],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'seedVal',
          'calcSeed',
          'createPool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [Circular *15],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 24, character: 5 },
        end: Position { line: 24, character: 9 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'pool'
      },
      init: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 24, character: 14 },
        end: Position { line: 24, character: 19 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'pool'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'me'
        }
      }
    },
    25 => <ref *16> ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 25, character: 5 },
      end: Position { line: 25, character: 37 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *16],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'seedVal',
          'calcSeed',
          'createPool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTEvaluationExpression]
        }
      ]
    },
    26 => <ref *17> ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 26, character: 5 },
      end: Position { line: 26, character: 49 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [Circular *17],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'seedVal',
          'calcSeed',
          'createPool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTEvaluationExpression]
        }
      ]
    },
    28 => <ref *18> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 28, character: 9 },
      end: Position { line: 28, character: 24 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'seedVal',
          'calcSeed',
          'createPool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *18],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 28, character: 9 },
        end: Position { line: 28, character: 11 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'ps'
      },
      init: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 28, character: 19 },
        end: Position { line: 28, character: 24 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'pool'
        },
        index: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'seed'
        }
      }
    },
    29 => ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 29, character: 9 },
      end: Position { line: 29, character: 42 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'seedVal',
          'calcSeed',
          'createPool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTUnaryExpression]
        }
      ]
    },
    30 => <ref *19> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 30, character: 9 },
      end: Position { line: 30, character: 42 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'seedVal',
          'calcSeed',
          'createPool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *19],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 30, character: 11 },
        end: Position { line: 30, character: 24 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'generation'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'ps'
        }
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 30, character: 39 },
        end: Position { line: 30, character: 42 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '+',
        left: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        right: ASTLiteral {
          type: 'NumericLiteral',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          value: 1,
          raw: '1'
        }
      }
    },
    31 => <ref *20> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 31, character: 9 },
      end: Position { line: 31, character: 73 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'seedVal',
          'calcSeed',
          'createPool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *20],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 31, character: 9 },
        end: Position { line: 31, character: 12 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'val'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 31, character: 20 },
        end: Position { line: 31, character: 73 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'floor'
        },
        arguments: [ [ASTEvaluationExpression] ]
      }
    },
    32 => <ref *21> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 32, character: 9 },
      end: Position { line: 32, character: 23 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'seedVal',
          'calcSeed',
          'createPool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *21],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 32, character: 11 },
        end: Position { line: 32, character: 19 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'value'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'ps'
        }
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 32, character: 20 },
        end: Position { line: 32, character: 23 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'val'
      }
    },
    33 => ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 33, character: 9 },
      end: Position { line: 33, character: 19 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'seedVal',
          'calcSeed',
          'createPool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      argument: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 33, character: 16 },
        end: Position { line: 33, character: 19 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'val'
      }
    },
    27 => <ref *22> ASTIfStatement {
      type: 'IfStatement',
      start: Position { line: 27, character: 5 },
      end: Position { line: 34, character: 11 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [Circular *22],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'seedVal',
          'calcSeed',
          'createPool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      clauses: [
        ASTIfClause {
          type: 'IfClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTCallExpression]
        }
      ]
    },
    36 => <ref *23> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 36, character: 5 },
      end: Position { line: 36, character: 32 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [Circular *23],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'seedVal',
          'calcSeed',
          'createPool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *23],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 36, character: 5 },
        end: Position { line: 36, character: 12 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'seedVal'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 36, character: 26 },
        end: Position { line: 36, character: 32 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTIdentifier] ]
      }
    },
    38 => <ref *24> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 38, character: 5 },
      end: Position { line: 38, character: 52 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [Circular *24],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'seedVal',
          'calcSeed',
          'createPool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *24],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 38, character: 5 },
        end: Position { line: 38, character: 8 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'val'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 38, character: 16 },
        end: Position { line: 38, character: 52 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'floor'
        },
        arguments: [ [ASTEvaluationExpression] ]
      }
    },
    39 => <ref *25> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 39, character: 5 },
      end: Position { line: 39, character: 45 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *25],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'seedVal',
          'calcSeed',
          'createPool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *25]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 39, character: 10 },
        end: Position { line: 39, character: 17 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'pool'
        },
        index: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'seed'
        }
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 39, character: 31 },
        end: Position { line: 39, character: 45 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    41 => <ref *26> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 41, character: 5 },
      end: Position { line: 41, character: 15 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *26]
        ],
        namespaces: Set(13) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'seedVal',
          'calcSeed',
          'createPool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      argument: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 41, character: 12 },
        end: Position { line: 41, character: 15 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'val'
      }
    },
    22 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 22, character: 1 },
      end: Position { line: 42, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 22, character: 7 },
        end: Position { line: 22, character: 13 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'gen'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Random'
        }
      },
      init: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'seedVal',
          'calcSeed',
          'createPool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      }
    },
    45 => <ref *27> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 45, character: 5 },
      end: Position { line: 45, character: 14 },
      scope: <ref *5> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 44, character: 14 },
        end: Position { line: 55, character: 13 },
        scope: [Circular *1],
        body: [
          [Circular *27],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(11) {
          'min',
          'max',
          'seed',
          'amount',
          'keepPool',
          'me',
          'index',
          'result',
          'temp',
          'gen',
          'pool'
        },
        assignments: [
          [Circular *27],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 45, character: 5 },
        end: Position { line: 45, character: 7 },
        scope: <ref *5> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'me'
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 45, character: 10 },
        end: Position { line: 45, character: 14 },
        scope: <ref *5> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'self'
      }
    },
    46 => <ref *28> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 46, character: 5 },
      end: Position { line: 46, character: 14 },
      scope: <ref *5> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 44, character: 14 },
        end: Position { line: 55, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [Circular *28],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(11) {
          'min',
          'max',
          'seed',
          'amount',
          'keepPool',
          'me',
          'index',
          'result',
          'temp',
          'gen',
          'pool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [Circular *28],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 46, character: 5 },
        end: Position { line: 46, character: 10 },
        scope: <ref *5> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'index'
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 46, character: 13 },
        end: Position { line: 46, character: 14 },
        scope: <ref *5> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        value: 0,
        raw: '0'
      }
    },
    47 => <ref *29> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 47, character: 5 },
      end: Position { line: 47, character: 16 },
      scope: <ref *5> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 44, character: 14 },
        end: Position { line: 55, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *29],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(11) {
          'min',
          'max',
          'seed',
          'amount',
          'keepPool',
          'me',
          'index',
          'result',
          'temp',
          'gen',
          'pool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *29],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 47, character: 5 },
        end: Position { line: 47, character: 11 },
        scope: <ref *5> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'result'
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 47, character: 14 },
        end: Position { line: 47, character: 16 },
        scope: <ref *5> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        fields: []
      }
    },
    49 => <ref *30> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 49, character: 9 },
      end: Position { line: 49, character: 38 },
      scope: <ref *5> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 44, character: 14 },
        end: Position { line: 55, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(11) {
          'min',
          'max',
          'seed',
          'amount',
          'keepPool',
          'me',
          'index',
          'result',
          'temp',
          'gen',
          'pool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *30],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 49, character: 9 },
        end: Position { line: 49, character: 13 },
        scope: <ref *5> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'temp'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 49, character: 22 },
        end: Position { line: 49, character: 38 },
        scope: <ref *5> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTIdentifier], [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    50 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 50, character: 9 },
      end: Position { line: 50, character: 27 },
      scope: <ref *5> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 44, character: 14 },
        end: Position { line: 55, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(11) {
          'min',
          'max',
          'seed',
          'amount',
          'keepPool',
          'me',
          'index',
          'result',
          'temp',
          'gen',
          'pool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 50, character: 20 },
        end: Position { line: 50, character: 27 },
        scope: <ref *5> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTIdentifier] ]
      }
    },
    51 => <ref *31> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 51, character: 9 },
      end: Position { line: 51, character: 26 },
      scope: <ref *5> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 44, character: 14 },
        end: Position { line: 55, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(11) {
          'min',
          'max',
          'seed',
          'amount',
          'keepPool',
          'me',
          'index',
          'result',
          'temp',
          'gen',
          'pool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *31]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 51, character: 9 },
        end: Position { line: 51, character: 14 },
        scope: <ref *5> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'index'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 51, character: 23 },
        end: Position { line: 51, character: 26 },
        scope: <ref *5> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '+',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'index'
        },
        right: ASTLiteral {
          type: 'NumericLiteral',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          value: 1,
          raw: '1'
        }
      }
    },
    48 => <ref *32> ASTWhileStatement {
      type: 'WhileStatement',
      start: Position { line: 48, character: 5 },
      end: Position { line: 52, character: 14 },
      scope: <ref *5> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 44, character: 14 },
        end: Position { line: 55, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *32],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(11) {
          'min',
          'max',
          'seed',
          'amount',
          'keepPool',
          'me',
          'index',
          'result',
          'temp',
          'gen',
          'pool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      body: [
        <ref *30> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          expression: [ASTCallExpression]
        },
        <ref *31> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        }
      ],
      condition: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 48, character: 17 },
        end: Position { line: 48, character: 25 },
        scope: <ref *5> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '<',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'index'
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'amount'
        }
      }
    },
    53 => <ref *33> ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 53, character: 5 },
      end: Position { line: 53, character: 52 },
      scope: <ref *5> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 44, character: 14 },
        end: Position { line: 55, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [Circular *33],
          [ASTReturnStatement]
        ],
        namespaces: Set(11) {
          'min',
          'max',
          'seed',
          'amount',
          'keepPool',
          'me',
          'index',
          'result',
          'temp',
          'gen',
          'pool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTEvaluationExpression]
        }
      ]
    },
    54 => <ref *34> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 54, character: 5 },
      end: Position { line: 54, character: 18 },
      scope: <ref *5> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 44, character: 14 },
        end: Position { line: 55, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [Circular *34]
        ],
        namespaces: Set(11) {
          'min',
          'max',
          'seed',
          'amount',
          'keepPool',
          'me',
          'index',
          'result',
          'temp',
          'gen',
          'pool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      argument: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 54, character: 12 },
        end: Position { line: 54, character: 18 },
        scope: <ref *5> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'result'
      }
    },
    44 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 44, character: 1 },
      end: Position { line: 55, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 44, character: 7 },
        end: Position { line: 44, character: 13 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'seq'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Random'
        }
      },
      init: <ref *5> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 44, character: 14 },
        end: Position { line: 55, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(11) {
          'min',
          'max',
          'seed',
          'amount',
          'keepPool',
          'me',
          'index',
          'result',
          'temp',
          'gen',
          'pool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      }
    },
    58 => <ref *35> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 58, character: 5 },
      end: Position { line: 58, character: 30 },
      scope: <ref *6> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 57, character: 14 },
        end: Position { line: 59, character: 13 },
        scope: [Circular *1],
        body: [ [Circular *35] ],
        namespaces: Set(3) { 'min', 'max', 'gen' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      argument: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 58, character: 20 },
        end: Position { line: 58, character: 30 },
        scope: <ref *6> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    57 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 57, character: 1 },
      end: Position { line: 59, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 57, character: 7 },
        end: Position { line: 57, character: 13 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'get'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Random'
        }
      },
      init: <ref *6> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 57, character: 14 },
        end: Position { line: 59, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'min', 'max', 'gen' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    61 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 61, character: 1 },
      end: Position { line: 61, character: 27 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 61, character: 6 },
        end: Position { line: 61, character: 27 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTCallExpression] ]
      }
    },
    62 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 62, character: 1 },
      end: Position { line: 62, character: 39 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 62, character: 6 },
        end: Position { line: 62, character: 39 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTCallExpression] ]
      }
    }
  }
}"
`;

exports[`parse default scripts random.src unsafe 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 62, character: 39 },
  scope: null,
  body: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 12 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 7 },
        scope: [Circular *1],
        name: 'Random'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 10 },
        end: Position { line: 1, character: 12 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 17 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 3, character: 7 },
        end: Position { line: 3, character: 14 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'pool'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Random'
        }
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 3, character: 15 },
        end: Position { line: 3, character: 17 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 4, character: 30 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 4, character: 7 },
        end: Position { line: 4, character: 21 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'defaultSeed'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Random'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 4, character: 22 },
        end: Position { line: 4, character: 30 },
        scope: [Circular *1],
        value: 'random',
        raw: '\\"random\\"'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 6, character: 1 },
      end: Position { line: 8, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 6, character: 7 },
        end: Position { line: 6, character: 20 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'createPool'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Random'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 6, character: 21 },
        end: Position { line: 8, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'seed' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 10, character: 1 },
      end: Position { line: 20, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 10, character: 7 },
        end: Position { line: 10, character: 18 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'calcSeed'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Random'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 10, character: 19 },
        end: Position { line: 20, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(3) { 'seed', 'seedVal', 'pos' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 22, character: 1 },
      end: Position { line: 42, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 22, character: 7 },
        end: Position { line: 22, character: 13 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'gen'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Random'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'seedVal',
          'calcSeed',
          'createPool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 44, character: 1 },
      end: Position { line: 55, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 44, character: 7 },
        end: Position { line: 44, character: 13 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'seq'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Random'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 44, character: 14 },
        end: Position { line: 55, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(11) {
          'min',
          'max',
          'seed',
          'amount',
          'keepPool',
          'me',
          'index',
          'result',
          'temp',
          'gen',
          'pool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 57, character: 1 },
      end: Position { line: 59, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 57, character: 7 },
        end: Position { line: 57, character: 13 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'get'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Random'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 57, character: 14 },
        end: Position { line: 59, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'min', 'max', 'gen' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 61, character: 1 },
      end: Position { line: 61, character: 27 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 61, character: 6 },
        end: Position { line: 61, character: 27 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTCallExpression] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 62, character: 1 },
      end: Position { line: 62, character: 39 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 62, character: 6 },
        end: Position { line: 62, character: 39 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTCallExpression] ]
      }
    }
  ],
  namespaces: Set(8) {
    'Random',
    'pool',
    'defaultSeed',
    'createPool',
    'calcSeed',
    'gen',
    'seq',
    'get'
  },
  assignments: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 12 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 7 },
        scope: [Circular *1],
        name: 'Random'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 10 },
        end: Position { line: 1, character: 12 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 17 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 3, character: 7 },
        end: Position { line: 3, character: 14 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'pool'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Random'
        }
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 3, character: 15 },
        end: Position { line: 3, character: 17 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 4, character: 30 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 4, character: 7 },
        end: Position { line: 4, character: 21 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'defaultSeed'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Random'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 4, character: 22 },
        end: Position { line: 4, character: 30 },
        scope: [Circular *1],
        value: 'random',
        raw: '\\"random\\"'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 6, character: 1 },
      end: Position { line: 8, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 6, character: 7 },
        end: Position { line: 6, character: 20 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'createPool'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Random'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 6, character: 21 },
        end: Position { line: 8, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'seed' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 10, character: 1 },
      end: Position { line: 20, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 10, character: 7 },
        end: Position { line: 10, character: 18 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'calcSeed'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Random'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 10, character: 19 },
        end: Position { line: 20, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(3) { 'seed', 'seedVal', 'pos' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 22, character: 1 },
      end: Position { line: 42, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 22, character: 7 },
        end: Position { line: 22, character: 13 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'gen'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Random'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'seedVal',
          'calcSeed',
          'createPool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 44, character: 1 },
      end: Position { line: 55, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 44, character: 7 },
        end: Position { line: 44, character: 13 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'seq'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Random'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 44, character: 14 },
        end: Position { line: 55, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(11) {
          'min',
          'max',
          'seed',
          'amount',
          'keepPool',
          'me',
          'index',
          'result',
          'temp',
          'gen',
          'pool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 57, character: 1 },
      end: Position { line: 59, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 57, character: 7 },
        end: Position { line: 57, character: 13 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'get'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Random'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 57, character: 14 },
        end: Position { line: 59, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'min', 'max', 'gen' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    }
  ],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 4, character: 22 },
      end: Position { line: 4, character: 30 },
      scope: [Circular *1],
      value: 'random',
      raw: '\\"random\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 7, character: 14 },
      end: Position { line: 7, character: 20 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 6, character: 21 },
        end: Position { line: 8, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'seed' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 'seed',
      raw: '\\"seed\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 7, character: 28 },
      end: Position { line: 7, character: 35 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 6, character: 21 },
        end: Position { line: 8, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'seed' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 'value',
      raw: '\\"value\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 7, character: 42 },
      end: Position { line: 7, character: 54 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 6, character: 21 },
        end: Position { line: 8, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'seed' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 'generation',
      raw: '\\"generation\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 7, character: 56 },
      end: Position { line: 7, character: 57 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 6, character: 21 },
        end: Position { line: 8, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'seed' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 11, character: 15 },
      end: Position { line: 11, character: 16 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 10, character: 19 },
        end: Position { line: 20, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(3) { 'seed', 'seedVal', 'pos' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 16, character: 21 },
      end: Position { line: 16, character: 22 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 10, character: 19 },
        end: Position { line: 20, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(3) { 'seed', 'seedVal', 'pos' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NilLiteral',
      start: Position { line: 25, character: 16 },
      end: Position { line: 25, character: 20 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'seedVal',
          'calcSeed',
          'createPool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      value: null,
      raw: 'null'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 25, character: 33 },
      end: Position { line: 25, character: 37 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'seedVal',
          'calcSeed',
          'createPool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'NilLiteral',
      start: Position { line: 26, character: 17 },
      end: Position { line: 26, character: 21 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'seedVal',
          'calcSeed',
          'createPool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      value: null,
      raw: 'null'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 30, character: 41 },
      end: Position { line: 30, character: 42 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'seedVal',
          'calcSeed',
          'createPool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 46, character: 13 },
      end: Position { line: 46, character: 14 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 44, character: 14 },
        end: Position { line: 55, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(11) {
          'min',
          'max',
          'seed',
          'amount',
          'keepPool',
          'me',
          'index',
          'result',
          'temp',
          'gen',
          'pool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 51, character: 25 },
      end: Position { line: 51, character: 26 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 44, character: 14 },
        end: Position { line: 55, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(11) {
          'min',
          'max',
          'seed',
          'amount',
          'keepPool',
          'me',
          'index',
          'result',
          'temp',
          'gen',
          'pool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 53, character: 21 },
      end: Position { line: 53, character: 25 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 44, character: 14 },
        end: Position { line: 55, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(11) {
          'min',
          'max',
          'seed',
          'amount',
          'keepPool',
          'me',
          'index',
          'result',
          'temp',
          'gen',
          'pool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 61, character: 18 },
      end: Position { line: 61, character: 21 },
      scope: [Circular *1],
      value: 100,
      raw: '100'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 61, character: 22 },
      end: Position { line: 61, character: 25 },
      scope: [Circular *1],
      value: 500,
      raw: '500'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 62, character: 18 },
      end: Position { line: 62, character: 21 },
      scope: [Circular *1],
      value: 100,
      raw: '100'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 62, character: 22 },
      end: Position { line: 62, character: 25 },
      scope: [Circular *1],
      value: 500,
      raw: '500'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 62, character: 27 },
      end: Position { line: 62, character: 33 },
      scope: [Circular *1],
      value: 'test',
      raw: '\\"test\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 62, character: 35 },
      end: Position { line: 62, character: 37 },
      scope: [Circular *1],
      value: 10,
      raw: '10'
    }
  ],
  scopes: [
    <ref *2> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 6, character: 21 },
      end: Position { line: 8, character: 13 },
      scope: [Circular *1],
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          argument: [ASTMapConstructorExpression]
        }
      ],
      namespaces: Set(1) { 'seed' },
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          name: 'seed'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          name: 'val'
        }
      ]
    },
    <ref *3> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 10, character: 19 },
      end: Position { line: 20, character: 13 },
      scope: [Circular *1],
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTForGenericStatement {
          type: 'ForGenericStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          body: [Array],
          variable: [ASTIdentifier],
          iterator: [ASTIdentifier]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          argument: [ASTIdentifier]
        }
      ],
      namespaces: Set(3) { 'seed', 'seedVal', 'pos' },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *3],
          name: 'seed'
        }
      ]
    },
    <ref *4> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 22, character: 14 },
      end: Position { line: 42, character: 13 },
      scope: [Circular *1],
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTIfStatement {
          type: 'IfShortcutStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          clauses: [Array]
        },
        ASTIfStatement {
          type: 'IfShortcutStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          clauses: [Array]
        },
        ASTIfStatement {
          type: 'IfStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          clauses: [Array]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIndexExpression],
          init: [ASTCallExpression]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          argument: [ASTIdentifier]
        }
      ],
      namespaces: Set(13) {
        'min',
        'max',
        'seed',
        'inc',
        'me',
        'pool',
        'defaultSeed',
        'ps',
        'value',
        'generation',
        'seedVal',
        'calcSeed',
        'createPool'
      },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIdentifier],
          init: [ASTIndexExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTMemberExpression],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTMemberExpression],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          variable: [ASTIndexExpression],
          init: [ASTCallExpression]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          name: 'min'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          name: 'max'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          name: 'seed'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *4],
          name: 'inc'
        }
      ]
    },
    <ref *5> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 44, character: 14 },
      end: Position { line: 55, character: 13 },
      scope: [Circular *1],
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *5],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *5],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *5],
          variable: [ASTIdentifier],
          init: [ASTListConstructorExpression]
        },
        ASTWhileStatement {
          type: 'WhileStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *5],
          body: [Array],
          condition: [ASTEvaluationExpression]
        },
        ASTIfStatement {
          type: 'IfShortcutStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *5],
          clauses: [Array]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *5],
          argument: [ASTIdentifier]
        }
      ],
      namespaces: Set(11) {
        'min',
        'max',
        'seed',
        'amount',
        'keepPool',
        'me',
        'index',
        'result',
        'temp',
        'gen',
        'pool'
      },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *5],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *5],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *5],
          variable: [ASTIdentifier],
          init: [ASTListConstructorExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *5],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *5],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *5],
          name: 'min'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *5],
          name: 'max'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *5],
          name: 'seed'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *5],
          name: 'amount'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *5],
          name: 'keepPool'
        }
      ]
    },
    <ref *6> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 57, character: 14 },
      end: Position { line: 59, character: 13 },
      scope: [Circular *1],
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *6],
          argument: [ASTCallExpression]
        }
      ],
      namespaces: Set(3) { 'min', 'max', 'gen' },
      assignments: [],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *6],
          name: 'min'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *6],
          name: 'max'
        }
      ]
    }
  ],
  lines: Map(42) {
    1 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 12 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 7 },
        scope: [Circular *1],
        name: 'Random'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 10 },
        end: Position { line: 1, character: 12 },
        scope: [Circular *1],
        fields: []
      }
    },
    3 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 17 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 3, character: 7 },
        end: Position { line: 3, character: 14 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'pool'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Random'
        }
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 3, character: 15 },
        end: Position { line: 3, character: 17 },
        scope: [Circular *1],
        fields: []
      }
    },
    4 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 4, character: 1 },
      end: Position { line: 4, character: 30 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 4, character: 7 },
        end: Position { line: 4, character: 21 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'defaultSeed'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Random'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 4, character: 22 },
        end: Position { line: 4, character: 30 },
        scope: [Circular *1],
        value: 'random',
        raw: '\\"random\\"'
      }
    },
    7 => <ref *7> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 7, character: 5 },
      end: Position { line: 7, character: 59 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 6, character: 21 },
        end: Position { line: 8, character: 13 },
        scope: [Circular *1],
        body: [ [Circular *7] ],
        namespaces: Set(1) { 'seed' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      argument: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 7, character: 12 },
        end: Position { line: 7, character: 59 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [],
          parameters: [Array]
        },
        fields: [ [ASTMapKeyString], [ASTMapKeyString], [ASTMapKeyString] ]
      }
    },
    6 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 6, character: 1 },
      end: Position { line: 8, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 6, character: 7 },
        end: Position { line: 6, character: 20 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'createPool'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Random'
        }
      },
      init: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 6, character: 21 },
        end: Position { line: 8, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(1) { 'seed' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    11 => <ref *8> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 11, character: 5 },
      end: Position { line: 11, character: 16 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 10, character: 19 },
        end: Position { line: 20, character: 13 },
        scope: [Circular *1],
        body: [
          [Circular *8],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(3) { 'seed', 'seedVal', 'pos' },
        assignments: [
          [Circular *8],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 11, character: 5 },
        end: Position { line: 11, character: 12 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'seedVal'
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 11, character: 15 },
        end: Position { line: 11, character: 16 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        value: 0,
        raw: '0'
      }
    },
    12 => <ref *9> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 12, character: 5 },
      end: Position { line: 12, character: 19 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 10, character: 19 },
        end: Position { line: 20, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [Circular *9],
          [ASTForGenericStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(3) { 'seed', 'seedVal', 'pos' },
        assignments: [
          [ASTAssignmentStatement],
          [Circular *9],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 12, character: 5 },
        end: Position { line: 12, character: 8 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'pos'
      },
      init: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 12, character: 15 },
        end: Position { line: 12, character: 19 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'len'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'seed'
        }
      }
    },
    15 => <ref *10> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 15, character: 9 },
      end: Position { line: 15, character: 44 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 10, character: 19 },
        end: Position { line: 20, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(3) { 'seed', 'seedVal', 'pos' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *10],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 15, character: 9 },
        end: Position { line: 15, character: 16 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'seedVal'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 15, character: 27 },
        end: Position { line: 15, character: 44 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '+',
        left: ASTEvaluationExpression {
          type: 'BinaryExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          operator: '+',
          left: [ASTIdentifier],
          right: [ASTMemberExpression]
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'pos'
        }
      }
    },
    16 => <ref *11> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 16, character: 9 },
      end: Position { line: 16, character: 22 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 10, character: 19 },
        end: Position { line: 20, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(3) { 'seed', 'seedVal', 'pos' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *11]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 16, character: 9 },
        end: Position { line: 16, character: 12 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'pos'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 16, character: 19 },
        end: Position { line: 16, character: 22 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '-',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'pos'
        },
        right: ASTLiteral {
          type: 'NumericLiteral',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          value: 1,
          raw: '1'
        }
      }
    },
    14 => <ref *12> ASTForGenericStatement {
      type: 'ForGenericStatement',
      start: Position { line: 14, character: 5 },
      end: Position { line: 17, character: 12 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 10, character: 19 },
        end: Position { line: 20, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *12],
          [ASTReturnStatement]
        ],
        namespaces: Set(3) { 'seed', 'seedVal', 'pos' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      body: [
        <ref *10> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        <ref *11> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        }
      ],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 14, character: 9 },
        end: Position { line: 14, character: 13 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'char'
      },
      iterator: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 14, character: 17 },
        end: Position { line: 14, character: 21 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'seed'
      }
    },
    19 => <ref *13> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 19, character: 5 },
      end: Position { line: 19, character: 19 },
      scope: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 10, character: 19 },
        end: Position { line: 20, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [Circular *13]
        ],
        namespaces: Set(3) { 'seed', 'seedVal', 'pos' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      },
      argument: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 19, character: 12 },
        end: Position { line: 19, character: 19 },
        scope: <ref *3> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'seedVal'
      }
    },
    10 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 10, character: 1 },
      end: Position { line: 20, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 10, character: 7 },
        end: Position { line: 10, character: 18 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'calcSeed'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Random'
        }
      },
      init: <ref *3> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 10, character: 19 },
        end: Position { line: 20, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTForGenericStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(3) { 'seed', 'seedVal', 'pos' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier] ]
      }
    },
    23 => <ref *14> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 23, character: 5 },
      end: Position { line: 23, character: 14 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: [Circular *1],
        body: [
          [Circular *14],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'seedVal',
          'calcSeed',
          'createPool'
        },
        assignments: [
          [Circular *14],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 23, character: 5 },
        end: Position { line: 23, character: 7 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'me'
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 23, character: 10 },
        end: Position { line: 23, character: 14 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'self'
      }
    },
    24 => <ref *15> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 24, character: 5 },
      end: Position { line: 24, character: 19 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [Circular *15],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'seedVal',
          'calcSeed',
          'createPool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [Circular *15],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 24, character: 5 },
        end: Position { line: 24, character: 9 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'pool'
      },
      init: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 24, character: 14 },
        end: Position { line: 24, character: 19 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'pool'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'me'
        }
      }
    },
    25 => <ref *16> ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 25, character: 5 },
      end: Position { line: 25, character: 37 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *16],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'seedVal',
          'calcSeed',
          'createPool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTEvaluationExpression]
        }
      ]
    },
    26 => <ref *17> ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 26, character: 5 },
      end: Position { line: 26, character: 49 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [Circular *17],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'seedVal',
          'calcSeed',
          'createPool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTEvaluationExpression]
        }
      ]
    },
    28 => <ref *18> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 28, character: 9 },
      end: Position { line: 28, character: 24 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'seedVal',
          'calcSeed',
          'createPool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *18],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 28, character: 9 },
        end: Position { line: 28, character: 11 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'ps'
      },
      init: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 28, character: 19 },
        end: Position { line: 28, character: 24 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'pool'
        },
        index: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'seed'
        }
      }
    },
    29 => ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 29, character: 9 },
      end: Position { line: 29, character: 42 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'seedVal',
          'calcSeed',
          'createPool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTUnaryExpression]
        }
      ]
    },
    30 => <ref *19> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 30, character: 9 },
      end: Position { line: 30, character: 42 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'seedVal',
          'calcSeed',
          'createPool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *19],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 30, character: 11 },
        end: Position { line: 30, character: 24 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'generation'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'ps'
        }
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 30, character: 39 },
        end: Position { line: 30, character: 42 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '+',
        left: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        right: ASTLiteral {
          type: 'NumericLiteral',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          value: 1,
          raw: '1'
        }
      }
    },
    31 => <ref *20> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 31, character: 9 },
      end: Position { line: 31, character: 73 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'seedVal',
          'calcSeed',
          'createPool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *20],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 31, character: 9 },
        end: Position { line: 31, character: 12 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'val'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 31, character: 20 },
        end: Position { line: 31, character: 73 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'floor'
        },
        arguments: [ [ASTEvaluationExpression] ]
      }
    },
    32 => <ref *21> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 32, character: 9 },
      end: Position { line: 32, character: 23 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'seedVal',
          'calcSeed',
          'createPool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *21],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 32, character: 11 },
        end: Position { line: 32, character: 19 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'value'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'ps'
        }
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 32, character: 20 },
        end: Position { line: 32, character: 23 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'val'
      }
    },
    33 => ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 33, character: 9 },
      end: Position { line: 33, character: 19 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'seedVal',
          'calcSeed',
          'createPool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      argument: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 33, character: 16 },
        end: Position { line: 33, character: 19 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'val'
      }
    },
    27 => <ref *22> ASTIfStatement {
      type: 'IfStatement',
      start: Position { line: 27, character: 5 },
      end: Position { line: 34, character: 11 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [Circular *22],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'seedVal',
          'calcSeed',
          'createPool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      clauses: [
        ASTIfClause {
          type: 'IfClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTCallExpression]
        }
      ]
    },
    36 => <ref *23> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 36, character: 5 },
      end: Position { line: 36, character: 32 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [Circular *23],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'seedVal',
          'calcSeed',
          'createPool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *23],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 36, character: 5 },
        end: Position { line: 36, character: 12 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'seedVal'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 36, character: 26 },
        end: Position { line: 36, character: 32 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTIdentifier] ]
      }
    },
    38 => <ref *24> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 38, character: 5 },
      end: Position { line: 38, character: 52 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [Circular *24],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'seedVal',
          'calcSeed',
          'createPool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *24],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 38, character: 5 },
        end: Position { line: 38, character: 8 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'val'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 38, character: 16 },
        end: Position { line: 38, character: 52 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'floor'
        },
        arguments: [ [ASTEvaluationExpression] ]
      }
    },
    39 => <ref *25> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 39, character: 5 },
      end: Position { line: 39, character: 45 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *25],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'seedVal',
          'calcSeed',
          'createPool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *25]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 39, character: 10 },
        end: Position { line: 39, character: 17 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'pool'
        },
        index: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'seed'
        }
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 39, character: 31 },
        end: Position { line: 39, character: 45 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    41 => <ref *26> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 41, character: 5 },
      end: Position { line: 41, character: 15 },
      scope: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *26]
        ],
        namespaces: Set(13) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'seedVal',
          'calcSeed',
          'createPool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      argument: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 41, character: 12 },
        end: Position { line: 41, character: 15 },
        scope: <ref *4> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'val'
      }
    },
    22 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 22, character: 1 },
      end: Position { line: 42, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 22, character: 7 },
        end: Position { line: 22, character: 13 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'gen'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Random'
        }
      },
      init: <ref *4> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 22, character: 14 },
        end: Position { line: 42, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTIfStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(13) {
          'min',
          'max',
          'seed',
          'inc',
          'me',
          'pool',
          'defaultSeed',
          'ps',
          'value',
          'generation',
          'seedVal',
          'calcSeed',
          'createPool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      }
    },
    45 => <ref *27> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 45, character: 5 },
      end: Position { line: 45, character: 14 },
      scope: <ref *5> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 44, character: 14 },
        end: Position { line: 55, character: 13 },
        scope: [Circular *1],
        body: [
          [Circular *27],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(11) {
          'min',
          'max',
          'seed',
          'amount',
          'keepPool',
          'me',
          'index',
          'result',
          'temp',
          'gen',
          'pool'
        },
        assignments: [
          [Circular *27],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 45, character: 5 },
        end: Position { line: 45, character: 7 },
        scope: <ref *5> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'me'
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 45, character: 10 },
        end: Position { line: 45, character: 14 },
        scope: <ref *5> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'self'
      }
    },
    46 => <ref *28> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 46, character: 5 },
      end: Position { line: 46, character: 14 },
      scope: <ref *5> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 44, character: 14 },
        end: Position { line: 55, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [Circular *28],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(11) {
          'min',
          'max',
          'seed',
          'amount',
          'keepPool',
          'me',
          'index',
          'result',
          'temp',
          'gen',
          'pool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [Circular *28],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 46, character: 5 },
        end: Position { line: 46, character: 10 },
        scope: <ref *5> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'index'
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 46, character: 13 },
        end: Position { line: 46, character: 14 },
        scope: <ref *5> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        value: 0,
        raw: '0'
      }
    },
    47 => <ref *29> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 47, character: 5 },
      end: Position { line: 47, character: 16 },
      scope: <ref *5> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 44, character: 14 },
        end: Position { line: 55, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *29],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(11) {
          'min',
          'max',
          'seed',
          'amount',
          'keepPool',
          'me',
          'index',
          'result',
          'temp',
          'gen',
          'pool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *29],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 47, character: 5 },
        end: Position { line: 47, character: 11 },
        scope: <ref *5> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'result'
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 47, character: 14 },
        end: Position { line: 47, character: 16 },
        scope: <ref *5> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        fields: []
      }
    },
    49 => <ref *30> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 49, character: 9 },
      end: Position { line: 49, character: 38 },
      scope: <ref *5> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 44, character: 14 },
        end: Position { line: 55, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(11) {
          'min',
          'max',
          'seed',
          'amount',
          'keepPool',
          'me',
          'index',
          'result',
          'temp',
          'gen',
          'pool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *30],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 49, character: 9 },
        end: Position { line: 49, character: 13 },
        scope: <ref *5> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'temp'
      },
      init: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 49, character: 22 },
        end: Position { line: 49, character: 38 },
        scope: <ref *5> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTIdentifier], [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    50 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 50, character: 9 },
      end: Position { line: 50, character: 27 },
      scope: <ref *5> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 44, character: 14 },
        end: Position { line: 55, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(11) {
          'min',
          'max',
          'seed',
          'amount',
          'keepPool',
          'me',
          'index',
          'result',
          'temp',
          'gen',
          'pool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 50, character: 20 },
        end: Position { line: 50, character: 27 },
        scope: <ref *5> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTIdentifier] ]
      }
    },
    51 => <ref *31> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 51, character: 9 },
      end: Position { line: 51, character: 26 },
      scope: <ref *5> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 44, character: 14 },
        end: Position { line: 55, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(11) {
          'min',
          'max',
          'seed',
          'amount',
          'keepPool',
          'me',
          'index',
          'result',
          'temp',
          'gen',
          'pool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *31]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 51, character: 9 },
        end: Position { line: 51, character: 14 },
        scope: <ref *5> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'index'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 51, character: 23 },
        end: Position { line: 51, character: 26 },
        scope: <ref *5> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '+',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'index'
        },
        right: ASTLiteral {
          type: 'NumericLiteral',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          value: 1,
          raw: '1'
        }
      }
    },
    48 => <ref *32> ASTWhileStatement {
      type: 'WhileStatement',
      start: Position { line: 48, character: 5 },
      end: Position { line: 52, character: 14 },
      scope: <ref *5> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 44, character: 14 },
        end: Position { line: 55, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *32],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(11) {
          'min',
          'max',
          'seed',
          'amount',
          'keepPool',
          'me',
          'index',
          'result',
          'temp',
          'gen',
          'pool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      body: [
        <ref *30> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTCallExpression]
        },
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          expression: [ASTCallExpression]
        },
        <ref *31> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        }
      ],
      condition: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 48, character: 17 },
        end: Position { line: 48, character: 25 },
        scope: <ref *5> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '<',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'index'
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'amount'
        }
      }
    },
    53 => <ref *33> ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 53, character: 5 },
      end: Position { line: 53, character: 52 },
      scope: <ref *5> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 44, character: 14 },
        end: Position { line: 55, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [Circular *33],
          [ASTReturnStatement]
        ],
        namespaces: Set(11) {
          'min',
          'max',
          'seed',
          'amount',
          'keepPool',
          'me',
          'index',
          'result',
          'temp',
          'gen',
          'pool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          body: [Array],
          condition: [ASTEvaluationExpression]
        }
      ]
    },
    54 => <ref *34> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 54, character: 5 },
      end: Position { line: 54, character: 18 },
      scope: <ref *5> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 44, character: 14 },
        end: Position { line: 55, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [Circular *34]
        ],
        namespaces: Set(11) {
          'min',
          'max',
          'seed',
          'amount',
          'keepPool',
          'me',
          'index',
          'result',
          'temp',
          'gen',
          'pool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      },
      argument: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 54, character: 12 },
        end: Position { line: 54, character: 18 },
        scope: <ref *5> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'result'
      }
    },
    44 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 44, character: 1 },
      end: Position { line: 55, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 44, character: 7 },
        end: Position { line: 44, character: 13 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'seq'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Random'
        }
      },
      init: <ref *5> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 44, character: 14 },
        end: Position { line: 55, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTIfStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(11) {
          'min',
          'max',
          'seed',
          'amount',
          'keepPool',
          'me',
          'index',
          'result',
          'temp',
          'gen',
          'pool'
        },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier],
          [ASTIdentifier]
        ]
      }
    },
    58 => <ref *35> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 58, character: 5 },
      end: Position { line: 58, character: 30 },
      scope: <ref *6> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 57, character: 14 },
        end: Position { line: 59, character: 13 },
        scope: [Circular *1],
        body: [ [Circular *35] ],
        namespaces: Set(3) { 'min', 'max', 'gen' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      argument: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 58, character: 20 },
        end: Position { line: 58, character: 30 },
        scope: <ref *6> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    57 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 57, character: 1 },
      end: Position { line: 59, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 57, character: 7 },
        end: Position { line: 57, character: 13 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'get'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'Random'
        }
      },
      init: <ref *6> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 57, character: 14 },
        end: Position { line: 59, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(3) { 'min', 'max', 'gen' },
        assignments: [],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    61 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 61, character: 1 },
      end: Position { line: 61, character: 27 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 61, character: 6 },
        end: Position { line: 61, character: 27 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTCallExpression] ]
      }
    },
    62 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 62, character: 1 },
      end: Position { line: 62, character: 39 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 62, character: 6 },
        end: Position { line: 62, character: 39 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTCallExpression] ]
      }
    }
  }
}"
`;

exports[`parse default scripts scuffed-if-clauses.src 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 28, character: 7 },
  scope: null,
  body: [
    ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 33 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        }
      ]
    },
    ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 5, character: 1 },
      end: Position { line: 6, character: 38 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTIfClause {
          type: 'ElseifShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        }
      ]
    },
    ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 9, character: 1 },
      end: Position { line: 11, character: 38 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTIfClause {
          type: 'ElseifShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTIfClause {
          type: 'ElseifShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        }
      ]
    },
    ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 15, character: 1 },
      end: Position { line: 18, character: 23 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTIfClause {
          type: 'ElseifShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTIfClause {
          type: 'ElseifShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTElseClause {
          type: 'ElseShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array]
        }
      ]
    },
    ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 21, character: 1 },
      end: Position { line: 23, character: 23 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTIfClause {
          type: 'ElseifShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTElseClause {
          type: 'ElseShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array]
        }
      ]
    },
    ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 26, character: 1 },
      end: Position { line: 27, character: 23 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTElseClause {
          type: 'ElseShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array]
        }
      ]
    }
  ],
  namespaces: Set(0) {},
  assignments: [],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 1, character: 5 },
      end: Position { line: 1, character: 9 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 1, character: 22 },
      end: Position { line: 1, character: 32 },
      scope: [Circular *1],
      value: 'true - 1',
      raw: '\\"true - 1\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 5, character: 5 },
      end: Position { line: 5, character: 9 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 5, character: 22 },
      end: Position { line: 5, character: 32 },
      scope: [Circular *1],
      value: 'true - 2',
      raw: '\\"true - 2\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 6, character: 10 },
      end: Position { line: 6, character: 14 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 6, character: 27 },
      end: Position { line: 6, character: 37 },
      scope: [Circular *1],
      value: 'true - 2',
      raw: '\\"true - 2\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 9, character: 5 },
      end: Position { line: 9, character: 9 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 9, character: 22 },
      end: Position { line: 9, character: 32 },
      scope: [Circular *1],
      value: 'true - 3',
      raw: '\\"true - 3\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 10, character: 10 },
      end: Position { line: 10, character: 14 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 10, character: 27 },
      end: Position { line: 10, character: 37 },
      scope: [Circular *1],
      value: 'true - 3',
      raw: '\\"true - 3\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 11, character: 10 },
      end: Position { line: 11, character: 14 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 11, character: 27 },
      end: Position { line: 11, character: 37 },
      scope: [Circular *1],
      value: 'true - 3',
      raw: '\\"true - 3\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 15, character: 5 },
      end: Position { line: 15, character: 9 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 15, character: 22 },
      end: Position { line: 15, character: 32 },
      scope: [Circular *1],
      value: 'true - 4',
      raw: '\\"true - 4\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 16, character: 10 },
      end: Position { line: 16, character: 14 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 16, character: 27 },
      end: Position { line: 16, character: 37 },
      scope: [Circular *1],
      value: 'true - 4',
      raw: '\\"true - 4\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 17, character: 10 },
      end: Position { line: 17, character: 14 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 17, character: 27 },
      end: Position { line: 17, character: 37 },
      scope: [Circular *1],
      value: 'true - 4',
      raw: '\\"true - 4\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 18, character: 12 },
      end: Position { line: 18, character: 22 },
      scope: [Circular *1],
      value: 'true - 4',
      raw: '\\"true - 4\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 21, character: 5 },
      end: Position { line: 21, character: 9 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 21, character: 22 },
      end: Position { line: 21, character: 32 },
      scope: [Circular *1],
      value: 'true - 5',
      raw: '\\"true - 5\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 22, character: 10 },
      end: Position { line: 22, character: 14 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 22, character: 27 },
      end: Position { line: 22, character: 37 },
      scope: [Circular *1],
      value: 'true - 5',
      raw: '\\"true - 5\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 23, character: 12 },
      end: Position { line: 23, character: 22 },
      scope: [Circular *1],
      value: 'true - 5',
      raw: '\\"true - 5\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 26, character: 5 },
      end: Position { line: 26, character: 9 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 26, character: 22 },
      end: Position { line: 26, character: 32 },
      scope: [Circular *1],
      value: 'true - 6',
      raw: '\\"true - 6\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 27, character: 12 },
      end: Position { line: 27, character: 22 },
      scope: [Circular *1],
      value: 'true - 6',
      raw: '\\"true - 6\\"'
    }
  ],
  scopes: [],
  lines: Map(15) {
    1 => ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 33 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        }
      ]
    },
    5 => ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 5, character: 1 },
      end: Position { line: 6, character: 38 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTIfClause {
          type: 'ElseifShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        }
      ]
    },
    6 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 6, character: 21 },
      end: Position { line: 6, character: 38 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 6, character: 26 },
        end: Position { line: 6, character: 38 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    9 => ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 9, character: 1 },
      end: Position { line: 11, character: 38 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTIfClause {
          type: 'ElseifShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTIfClause {
          type: 'ElseifShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        }
      ]
    },
    10 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 10, character: 21 },
      end: Position { line: 10, character: 38 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 10, character: 26 },
        end: Position { line: 10, character: 38 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    11 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 11, character: 21 },
      end: Position { line: 11, character: 38 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 11, character: 26 },
        end: Position { line: 11, character: 38 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    15 => ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 15, character: 1 },
      end: Position { line: 18, character: 23 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTIfClause {
          type: 'ElseifShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTIfClause {
          type: 'ElseifShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTElseClause {
          type: 'ElseShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array]
        }
      ]
    },
    16 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 16, character: 21 },
      end: Position { line: 16, character: 38 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 16, character: 26 },
        end: Position { line: 16, character: 38 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    17 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 17, character: 21 },
      end: Position { line: 17, character: 38 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 17, character: 26 },
        end: Position { line: 17, character: 38 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    18 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 18, character: 6 },
      end: Position { line: 18, character: 23 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 18, character: 11 },
        end: Position { line: 18, character: 23 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    21 => ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 21, character: 1 },
      end: Position { line: 23, character: 23 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTIfClause {
          type: 'ElseifShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTElseClause {
          type: 'ElseShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array]
        }
      ]
    },
    22 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 22, character: 21 },
      end: Position { line: 22, character: 38 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 22, character: 26 },
        end: Position { line: 22, character: 38 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    23 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 23, character: 6 },
      end: Position { line: 23, character: 23 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 23, character: 11 },
        end: Position { line: 23, character: 23 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    26 => ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 26, character: 1 },
      end: Position { line: 27, character: 23 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTElseClause {
          type: 'ElseShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array]
        }
      ]
    },
    27 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 27, character: 6 },
      end: Position { line: 27, character: 23 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 27, character: 11 },
        end: Position { line: 27, character: 23 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTLiteral] ]
      }
    }
  }
}"
`;

exports[`parse default scripts scuffed-if-clauses.src unsafe 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 28, character: 7 },
  scope: null,
  body: [
    ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 33 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        }
      ]
    },
    ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 5, character: 1 },
      end: Position { line: 6, character: 38 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTIfClause {
          type: 'ElseifShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        }
      ]
    },
    ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 9, character: 1 },
      end: Position { line: 11, character: 38 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTIfClause {
          type: 'ElseifShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTIfClause {
          type: 'ElseifShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        }
      ]
    },
    ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 15, character: 1 },
      end: Position { line: 18, character: 23 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTIfClause {
          type: 'ElseifShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTIfClause {
          type: 'ElseifShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTElseClause {
          type: 'ElseShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array]
        }
      ]
    },
    ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 21, character: 1 },
      end: Position { line: 23, character: 23 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTIfClause {
          type: 'ElseifShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTElseClause {
          type: 'ElseShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array]
        }
      ]
    },
    ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 26, character: 1 },
      end: Position { line: 27, character: 23 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTElseClause {
          type: 'ElseShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array]
        }
      ]
    }
  ],
  namespaces: Set(0) {},
  assignments: [],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 1, character: 5 },
      end: Position { line: 1, character: 9 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 1, character: 22 },
      end: Position { line: 1, character: 32 },
      scope: [Circular *1],
      value: 'true - 1',
      raw: '\\"true - 1\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 5, character: 5 },
      end: Position { line: 5, character: 9 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 5, character: 22 },
      end: Position { line: 5, character: 32 },
      scope: [Circular *1],
      value: 'true - 2',
      raw: '\\"true - 2\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 6, character: 10 },
      end: Position { line: 6, character: 14 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 6, character: 27 },
      end: Position { line: 6, character: 37 },
      scope: [Circular *1],
      value: 'true - 2',
      raw: '\\"true - 2\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 9, character: 5 },
      end: Position { line: 9, character: 9 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 9, character: 22 },
      end: Position { line: 9, character: 32 },
      scope: [Circular *1],
      value: 'true - 3',
      raw: '\\"true - 3\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 10, character: 10 },
      end: Position { line: 10, character: 14 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 10, character: 27 },
      end: Position { line: 10, character: 37 },
      scope: [Circular *1],
      value: 'true - 3',
      raw: '\\"true - 3\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 11, character: 10 },
      end: Position { line: 11, character: 14 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 11, character: 27 },
      end: Position { line: 11, character: 37 },
      scope: [Circular *1],
      value: 'true - 3',
      raw: '\\"true - 3\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 15, character: 5 },
      end: Position { line: 15, character: 9 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 15, character: 22 },
      end: Position { line: 15, character: 32 },
      scope: [Circular *1],
      value: 'true - 4',
      raw: '\\"true - 4\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 16, character: 10 },
      end: Position { line: 16, character: 14 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 16, character: 27 },
      end: Position { line: 16, character: 37 },
      scope: [Circular *1],
      value: 'true - 4',
      raw: '\\"true - 4\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 17, character: 10 },
      end: Position { line: 17, character: 14 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 17, character: 27 },
      end: Position { line: 17, character: 37 },
      scope: [Circular *1],
      value: 'true - 4',
      raw: '\\"true - 4\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 18, character: 12 },
      end: Position { line: 18, character: 22 },
      scope: [Circular *1],
      value: 'true - 4',
      raw: '\\"true - 4\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 21, character: 5 },
      end: Position { line: 21, character: 9 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 21, character: 22 },
      end: Position { line: 21, character: 32 },
      scope: [Circular *1],
      value: 'true - 5',
      raw: '\\"true - 5\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 22, character: 10 },
      end: Position { line: 22, character: 14 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 22, character: 27 },
      end: Position { line: 22, character: 37 },
      scope: [Circular *1],
      value: 'true - 5',
      raw: '\\"true - 5\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 23, character: 12 },
      end: Position { line: 23, character: 22 },
      scope: [Circular *1],
      value: 'true - 5',
      raw: '\\"true - 5\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 26, character: 5 },
      end: Position { line: 26, character: 9 },
      scope: [Circular *1],
      value: true,
      raw: 'true'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 26, character: 22 },
      end: Position { line: 26, character: 32 },
      scope: [Circular *1],
      value: 'true - 6',
      raw: '\\"true - 6\\"'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 27, character: 12 },
      end: Position { line: 27, character: 22 },
      scope: [Circular *1],
      value: 'true - 6',
      raw: '\\"true - 6\\"'
    }
  ],
  scopes: [],
  lines: Map(15) {
    1 => ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 33 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        }
      ]
    },
    5 => ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 5, character: 1 },
      end: Position { line: 6, character: 38 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTIfClause {
          type: 'ElseifShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        }
      ]
    },
    6 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 6, character: 21 },
      end: Position { line: 6, character: 38 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 6, character: 26 },
        end: Position { line: 6, character: 38 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    9 => ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 9, character: 1 },
      end: Position { line: 11, character: 38 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTIfClause {
          type: 'ElseifShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTIfClause {
          type: 'ElseifShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        }
      ]
    },
    10 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 10, character: 21 },
      end: Position { line: 10, character: 38 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 10, character: 26 },
        end: Position { line: 10, character: 38 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    11 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 11, character: 21 },
      end: Position { line: 11, character: 38 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 11, character: 26 },
        end: Position { line: 11, character: 38 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    15 => ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 15, character: 1 },
      end: Position { line: 18, character: 23 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTIfClause {
          type: 'ElseifShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTIfClause {
          type: 'ElseifShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTElseClause {
          type: 'ElseShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array]
        }
      ]
    },
    16 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 16, character: 21 },
      end: Position { line: 16, character: 38 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 16, character: 26 },
        end: Position { line: 16, character: 38 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    17 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 17, character: 21 },
      end: Position { line: 17, character: 38 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 17, character: 26 },
        end: Position { line: 17, character: 38 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    18 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 18, character: 6 },
      end: Position { line: 18, character: 23 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 18, character: 11 },
        end: Position { line: 18, character: 23 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    21 => ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 21, character: 1 },
      end: Position { line: 23, character: 23 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTIfClause {
          type: 'ElseifShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTElseClause {
          type: 'ElseShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array]
        }
      ]
    },
    22 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 22, character: 21 },
      end: Position { line: 22, character: 38 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 22, character: 26 },
        end: Position { line: 22, character: 38 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    23 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 23, character: 6 },
      end: Position { line: 23, character: 23 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 23, character: 11 },
        end: Position { line: 23, character: 23 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTLiteral] ]
      }
    },
    26 => ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 26, character: 1 },
      end: Position { line: 27, character: 23 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTLiteral]
        },
        ASTElseClause {
          type: 'ElseShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array]
        }
      ]
    },
    27 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 27, character: 6 },
      end: Position { line: 27, character: 23 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 27, character: 11 },
        end: Position { line: 27, character: 23 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTLiteral] ]
      }
    }
  }
}"
`;

exports[`parse default scripts simple-object.src 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 9, character: 18 },
  scope: null,
  body: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 10 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 5 },
        scope: [Circular *1],
        name: 'test'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 8 },
        end: Position { line: 1, character: 10 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 18 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 3, character: 5 },
        end: Position { line: 3, character: 12 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'here'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'test'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 3, character: 13 },
        end: Position { line: 3, character: 18 },
        scope: [Circular *1],
        value: 'was',
        raw: '\\"was\\"'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 5, character: 1 },
      end: Position { line: 7, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 5, character: 5 },
        end: Position { line: 5, character: 11 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'was'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'test'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 5, character: 12 },
        end: Position { line: 7, character: 13 },
        scope: [Circular *1],
        body: [ [ASTCallStatement] ],
        namespaces: Set(1) { 'here' },
        assignments: [],
        parameters: []
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 9, character: 1 },
      end: Position { line: 9, character: 18 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 9, character: 6 },
        end: Position { line: 9, character: 18 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTCallExpression] ]
      }
    }
  ],
  namespaces: Set(3) { 'test', 'here', 'was' },
  assignments: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 10 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 5 },
        scope: [Circular *1],
        name: 'test'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 8 },
        end: Position { line: 1, character: 10 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 18 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 3, character: 5 },
        end: Position { line: 3, character: 12 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'here'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'test'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 3, character: 13 },
        end: Position { line: 3, character: 18 },
        scope: [Circular *1],
        value: 'was',
        raw: '\\"was\\"'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 5, character: 1 },
      end: Position { line: 7, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 5, character: 5 },
        end: Position { line: 5, character: 11 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'was'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'test'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 5, character: 12 },
        end: Position { line: 7, character: 13 },
        scope: [Circular *1],
        body: [ [ASTCallStatement] ],
        namespaces: Set(1) { 'here' },
        assignments: [],
        parameters: []
      }
    }
  ],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 3, character: 13 },
      end: Position { line: 3, character: 18 },
      scope: [Circular *1],
      value: 'was',
      raw: '\\"was\\"'
    }
  ],
  scopes: [
    <ref *2> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 5, character: 12 },
      end: Position { line: 7, character: 13 },
      scope: [Circular *1],
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          expression: [ASTCallExpression]
        }
      ],
      namespaces: Set(1) { 'here' },
      assignments: [],
      parameters: []
    }
  ],
  lines: Map(5) {
    1 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 10 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 5 },
        scope: [Circular *1],
        name: 'test'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 8 },
        end: Position { line: 1, character: 10 },
        scope: [Circular *1],
        fields: []
      }
    },
    3 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 18 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 3, character: 5 },
        end: Position { line: 3, character: 12 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'here'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'test'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 3, character: 13 },
        end: Position { line: 3, character: 18 },
        scope: [Circular *1],
        value: 'was',
        raw: '\\"was\\"'
      }
    },
    6 => <ref *3> ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 6, character: 5 },
      end: Position { line: 6, character: 21 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 5, character: 12 },
        end: Position { line: 7, character: 13 },
        scope: [Circular *1],
        body: [ [Circular *3] ],
        namespaces: Set(1) { 'here' },
        assignments: [],
        parameters: []
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 6, character: 10 },
        end: Position { line: 6, character: 21 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [],
          parameters: []
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'print'
        },
        arguments: [ [ASTMemberExpression] ]
      }
    },
    5 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 5, character: 1 },
      end: Position { line: 7, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 5, character: 5 },
        end: Position { line: 5, character: 11 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'was'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'test'
        }
      },
      init: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 5, character: 12 },
        end: Position { line: 7, character: 13 },
        scope: [Circular *1],
        body: [ [ASTCallStatement] ],
        namespaces: Set(1) { 'here' },
        assignments: [],
        parameters: []
      }
    },
    9 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 9, character: 1 },
      end: Position { line: 9, character: 18 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 9, character: 6 },
        end: Position { line: 9, character: 18 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTCallExpression] ]
      }
    }
  }
}"
`;

exports[`parse default scripts simple-object.src unsafe 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 9, character: 18 },
  scope: null,
  body: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 10 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 5 },
        scope: [Circular *1],
        name: 'test'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 8 },
        end: Position { line: 1, character: 10 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 18 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 3, character: 5 },
        end: Position { line: 3, character: 12 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'here'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'test'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 3, character: 13 },
        end: Position { line: 3, character: 18 },
        scope: [Circular *1],
        value: 'was',
        raw: '\\"was\\"'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 5, character: 1 },
      end: Position { line: 7, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 5, character: 5 },
        end: Position { line: 5, character: 11 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'was'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'test'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 5, character: 12 },
        end: Position { line: 7, character: 13 },
        scope: [Circular *1],
        body: [ [ASTCallStatement] ],
        namespaces: Set(1) { 'here' },
        assignments: [],
        parameters: []
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 9, character: 1 },
      end: Position { line: 9, character: 18 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 9, character: 6 },
        end: Position { line: 9, character: 18 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTCallExpression] ]
      }
    }
  ],
  namespaces: Set(3) { 'test', 'here', 'was' },
  assignments: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 10 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 5 },
        scope: [Circular *1],
        name: 'test'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 8 },
        end: Position { line: 1, character: 10 },
        scope: [Circular *1],
        fields: []
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 18 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 3, character: 5 },
        end: Position { line: 3, character: 12 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'here'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'test'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 3, character: 13 },
        end: Position { line: 3, character: 18 },
        scope: [Circular *1],
        value: 'was',
        raw: '\\"was\\"'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 5, character: 1 },
      end: Position { line: 7, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 5, character: 5 },
        end: Position { line: 5, character: 11 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'was'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'test'
        }
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 5, character: 12 },
        end: Position { line: 7, character: 13 },
        scope: [Circular *1],
        body: [ [ASTCallStatement] ],
        namespaces: Set(1) { 'here' },
        assignments: [],
        parameters: []
      }
    }
  ],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 3, character: 13 },
      end: Position { line: 3, character: 18 },
      scope: [Circular *1],
      value: 'was',
      raw: '\\"was\\"'
    }
  ],
  scopes: [
    <ref *2> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 5, character: 12 },
      end: Position { line: 7, character: 13 },
      scope: [Circular *1],
      body: [
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          expression: [ASTCallExpression]
        }
      ],
      namespaces: Set(1) { 'here' },
      assignments: [],
      parameters: []
    }
  ],
  lines: Map(5) {
    1 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 1, character: 10 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 5 },
        scope: [Circular *1],
        name: 'test'
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 1, character: 8 },
        end: Position { line: 1, character: 10 },
        scope: [Circular *1],
        fields: []
      }
    },
    3 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 1 },
      end: Position { line: 3, character: 18 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 3, character: 5 },
        end: Position { line: 3, character: 12 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'here'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'test'
        }
      },
      init: ASTLiteral {
        type: 'StringLiteral',
        start: Position { line: 3, character: 13 },
        end: Position { line: 3, character: 18 },
        scope: [Circular *1],
        value: 'was',
        raw: '\\"was\\"'
      }
    },
    6 => <ref *3> ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 6, character: 5 },
      end: Position { line: 6, character: 21 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 5, character: 12 },
        end: Position { line: 7, character: 13 },
        scope: [Circular *1],
        body: [ [Circular *3] ],
        namespaces: Set(1) { 'here' },
        assignments: [],
        parameters: []
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 6, character: 10 },
        end: Position { line: 6, character: 21 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [],
          parameters: []
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'print'
        },
        arguments: [ [ASTMemberExpression] ]
      }
    },
    5 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 5, character: 1 },
      end: Position { line: 7, character: 13 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 5, character: 5 },
        end: Position { line: 5, character: 11 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'was'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'test'
        }
      },
      init: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 5, character: 12 },
        end: Position { line: 7, character: 13 },
        scope: [Circular *1],
        body: [ [ASTCallStatement] ],
        namespaces: Set(1) { 'here' },
        assignments: [],
        parameters: []
      }
    },
    9 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 9, character: 1 },
      end: Position { line: 9, character: 18 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 9, character: 6 },
        end: Position { line: 9, character: 18 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTCallExpression] ]
      }
    }
  }
}"
`;

exports[`parse default scripts slice.src 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 27, character: 21 },
  scope: null,
  body: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 13, character: 13 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 13 },
        scope: [Circular *1],
        name: 'divideString'
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 16 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'limit', 'offset', 'maxLen', 'frags', 'next' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 15, character: 1 },
      end: Position { line: 15, character: 59 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 15, character: 6 },
        end: Position { line: 15, character: 59 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTCallExpression] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 17, character: 1 },
      end: Position { line: 17, character: 81 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 17, character: 5 },
        end: Position { line: 17, character: 20 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'current_path'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'test'
        }
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 17, character: 29 },
        end: Position { line: 17, character: 81 },
        scope: [Circular *1],
        operator: '+',
        left: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '/home/',
          raw: '\\"/home/\\"'
        },
        right: ASTIndexExpression {
          type: 'IndexExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          base: [ASTMemberExpression],
          index: [ASTSliceExpression]
        }
      }
    },
    ASTForGenericStatement {
      type: 'ForGenericStatement',
      start: Position { line: 19, character: 1 },
      end: Position { line: 21, character: 8 },
      scope: [Circular *1],
      body: [
        ASTIfStatement {
          type: 'IfShortcutStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          clauses: [Array]
        }
      ],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 19, character: 5 },
        end: Position { line: 19, character: 6 },
        scope: [Circular *1],
        name: 'i'
      },
      iterator: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 19, character: 15 },
        end: Position { line: 19, character: 26 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'range'
        },
        arguments: [ [ASTLiteral], [ASTEvaluationExpression] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 23, character: 1 },
      end: Position { line: 23, character: 8 },
      scope: [Circular *1],
      expression: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 23, character: 5 },
        end: Position { line: 23, character: 8 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'foo'
        },
        index: ASTSliceExpression {
          type: 'SliceExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          left: [ASTLiteral],
          right: [ASTBase]
        }
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 24, character: 1 },
      end: Position { line: 24, character: 8 },
      scope: [Circular *1],
      expression: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 24, character: 5 },
        end: Position { line: 24, character: 8 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'foo'
        },
        index: ASTSliceExpression {
          type: 'SliceExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          left: [ASTBase],
          right: [ASTLiteral]
        }
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 25, character: 1 },
      end: Position { line: 25, character: 14 },
      scope: [Circular *1],
      expression: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 25, character: 5 },
        end: Position { line: 25, character: 14 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'foo'
        },
        index: ASTSliceExpression {
          type: 'SliceExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          left: [ASTIndexExpression],
          right: [ASTBase]
        }
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 26, character: 1 },
      end: Position { line: 26, character: 14 },
      scope: [Circular *1],
      expression: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 26, character: 5 },
        end: Position { line: 26, character: 14 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'foo'
        },
        index: ASTSliceExpression {
          type: 'SliceExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          left: [ASTBase],
          right: [ASTIndexExpression]
        }
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 27, character: 1 },
      end: Position { line: 27, character: 21 },
      scope: [Circular *1],
      expression: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 27, character: 5 },
        end: Position { line: 27, character: 21 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'foo'
        },
        index: ASTSliceExpression {
          type: 'SliceExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          left: [ASTIndexExpression],
          right: [ASTIndexExpression]
        }
      }
    }
  ],
  namespaces: Set(9) {
    'divideString',
    'test',
    'moo',
    'user',
    'bar',
    'foo',
    'i',
    's',
    'f'
  },
  assignments: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 13, character: 13 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 13 },
        scope: [Circular *1],
        name: 'divideString'
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 16 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'limit', 'offset', 'maxLen', 'frags', 'next' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 17, character: 1 },
      end: Position { line: 17, character: 81 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 17, character: 5 },
        end: Position { line: 17, character: 20 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'current_path'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'test'
        }
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 17, character: 29 },
        end: Position { line: 17, character: 81 },
        scope: [Circular *1],
        operator: '+',
        left: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '/home/',
          raw: '\\"/home/\\"'
        },
        right: ASTIndexExpression {
          type: 'IndexExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          base: [ASTMemberExpression],
          index: [ASTSliceExpression]
        }
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 20, character: 34 },
      end: Position { line: 20, character: 59 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 20, character: 46 },
        end: Position { line: 20, character: 53 },
        scope: [Circular *1],
        base: ASTIndexExpression {
          type: 'IndexExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          base: [ASTIdentifier],
          index: [ASTIndexExpression]
        },
        index: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        }
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 20, character: 53 },
        end: Position { line: 20, character: 54 },
        scope: [Circular *1],
        value: 1,
        raw: '1'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 20, character: 60 },
      end: Position { line: 20, character: 81 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 20, character: 62 },
        end: Position { line: 20, character: 72 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'f'
        },
        index: ASTIndexExpression {
          type: 'IndexExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          base: [ASTIdentifier],
          index: [ASTSliceExpression]
        }
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 20, character: 72 },
        end: Position { line: 20, character: 81 },
        scope: [Circular *1],
        fields: [ [ASTMapKeyString] ]
      }
    }
  ],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 2, character: 14 },
      end: Position { line: 2, character: 15 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 16 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'limit', 'offset', 'maxLen', 'frags', 'next' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 15, character: 20 },
      end: Position { line: 15, character: 55 },
      scope: [Circular *1],
      value: 'blahhblahhblahhblahhblahhblahhgad',
      raw: '\\"blahhblahhblahhblahhblahhblahhgad\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 15, character: 56 },
      end: Position { line: 15, character: 57 },
      scope: [Circular *1],
      value: 5,
      raw: '5'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 17, character: 21 },
      end: Position { line: 17, character: 29 },
      scope: [Circular *1],
      value: '/home/',
      raw: '\\"/home/\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 17, character: 40 },
      end: Position { line: 17, character: 41 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 17, character: 58 },
      end: Position { line: 17, character: 59 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 17, character: 73 },
      end: Position { line: 17, character: 76 },
      scope: [Circular *1],
      value: '@',
      raw: '\\"@\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 17, character: 78 },
      end: Position { line: 17, character: 79 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 19, character: 16 },
      end: Position { line: 19, character: 17 },
      scope: [Circular *1],
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 19, character: 24 },
      end: Position { line: 19, character: 25 },
      scope: [Circular *1],
      value: 4,
      raw: '4'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 20, character: 25 },
      end: Position { line: 20, character: 26 },
      scope: [Circular *1],
      value: 3,
      raw: '3'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 20, character: 42 },
      end: Position { line: 20, character: 43 },
      scope: [Circular *1],
      value: 3,
      raw: '3'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 20, character: 53 },
      end: Position { line: 20, character: 54 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 20, character: 68 },
      end: Position { line: 20, character: 69 },
      scope: [Circular *1],
      value: 3,
      raw: '3'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 20, character: 79 },
      end: Position { line: 20, character: 80 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 23, character: 5 },
      end: Position { line: 23, character: 6 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 24, character: 6 },
      end: Position { line: 24, character: 7 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 25, character: 9 },
      end: Position { line: 25, character: 10 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 26, character: 11 },
      end: Position { line: 26, character: 12 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 27, character: 9 },
      end: Position { line: 27, character: 10 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 27, character: 18 },
      end: Position { line: 27, character: 19 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    }
  ],
  scopes: [
    <ref *2> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 1, character: 16 },
      end: Position { line: 13, character: 13 },
      scope: [Circular *1],
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTIdentifier],
          init: [ASTListConstructorExpression]
        },
        ASTWhileStatement {
          type: 'WhileStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          body: [Array],
          condition: [ASTEvaluationExpression]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          argument: [ASTIdentifier]
        }
      ],
      namespaces: Set(5) { 'limit', 'offset', 'maxLen', 'frags', 'next' },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTIdentifier],
          init: [ASTListConstructorExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          name: 'str'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          name: 'limit'
        }
      ]
    }
  ],
  lines: Map(18) {
    2 => <ref *3> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 2, character: 5 },
      end: Position { line: 2, character: 15 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 16 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [Circular *3],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'limit', 'offset', 'maxLen', 'frags', 'next' },
        assignments: [
          [Circular *3],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 2, character: 5 },
        end: Position { line: 2, character: 11 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'offset'
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 2, character: 14 },
        end: Position { line: 2, character: 15 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        value: 0,
        raw: '0'
      }
    },
    3 => <ref *4> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 5 },
      end: Position { line: 3, character: 21 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 16 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [Circular *4],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'limit', 'offset', 'maxLen', 'frags', 'next' },
        assignments: [
          [ASTAssignmentStatement],
          [Circular *4],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 3, character: 5 },
        end: Position { line: 3, character: 11 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'maxLen'
      },
      init: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 3, character: 17 },
        end: Position { line: 3, character: 21 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'len'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'str'
        }
      }
    },
    4 => <ref *5> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 4, character: 5 },
      end: Position { line: 4, character: 15 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 16 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *5],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'limit', 'offset', 'maxLen', 'frags', 'next' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *5],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 4, character: 5 },
        end: Position { line: 4, character: 10 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'frags'
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 4, character: 13 },
        end: Position { line: 4, character: 15 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        fields: []
      }
    },
    7 => <ref *6> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 7, character: 9 },
      end: Position { line: 7, character: 30 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 16 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'limit', 'offset', 'maxLen', 'frags', 'next' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *6],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 7, character: 9 },
        end: Position { line: 7, character: 13 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'next'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 7, character: 23 },
        end: Position { line: 7, character: 30 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '+',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'offset'
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'limit'
        }
      }
    },
    8 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 8, character: 9 },
      end: Position { line: 8, character: 37 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 16 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'limit', 'offset', 'maxLen', 'frags', 'next' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 8, character: 19 },
        end: Position { line: 8, character: 37 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTIndexExpression] ]
      }
    },
    9 => <ref *7> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 9, character: 9 },
      end: Position { line: 9, character: 22 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 16 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'limit', 'offset', 'maxLen', 'frags', 'next' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *7]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 9, character: 9 },
        end: Position { line: 9, character: 15 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'offset'
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 9, character: 18 },
        end: Position { line: 9, character: 22 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'next'
      }
    },
    6 => <ref *8> ASTWhileStatement {
      type: 'WhileStatement',
      start: Position { line: 6, character: 5 },
      end: Position { line: 10, character: 14 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 16 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *8],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'limit', 'offset', 'maxLen', 'frags', 'next' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      body: [
        <ref *6> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          expression: [ASTCallExpression]
        },
        <ref *7> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        }
      ],
      condition: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 6, character: 18 },
        end: Position { line: 6, character: 26 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '<',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'offset'
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'maxLen'
        }
      }
    },
    12 => <ref *9> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 12, character: 5 },
      end: Position { line: 12, character: 17 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 16 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [Circular *9]
        ],
        namespaces: Set(5) { 'limit', 'offset', 'maxLen', 'frags', 'next' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      argument: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 12, character: 12 },
        end: Position { line: 12, character: 17 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'frags'
      }
    },
    1 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 13, character: 13 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 13 },
        scope: [Circular *1],
        name: 'divideString'
      },
      init: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 16 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'limit', 'offset', 'maxLen', 'frags', 'next' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    15 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 15, character: 1 },
      end: Position { line: 15, character: 59 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 15, character: 6 },
        end: Position { line: 15, character: 59 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTCallExpression] ]
      }
    },
    17 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 17, character: 1 },
      end: Position { line: 17, character: 81 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 17, character: 5 },
        end: Position { line: 17, character: 20 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'current_path'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'test'
        }
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 17, character: 29 },
        end: Position { line: 17, character: 81 },
        scope: [Circular *1],
        operator: '+',
        left: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '/home/',
          raw: '\\"/home/\\"'
        },
        right: ASTIndexExpression {
          type: 'IndexExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          base: [ASTMemberExpression],
          index: [ASTSliceExpression]
        }
      }
    },
    20 => ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 20, character: 5 },
      end: Position { line: 20, character: 81 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTCallExpression]
        },
        ASTElseClause {
          type: 'ElseShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array]
        }
      ]
    },
    19 => ASTForGenericStatement {
      type: 'ForGenericStatement',
      start: Position { line: 19, character: 1 },
      end: Position { line: 21, character: 8 },
      scope: [Circular *1],
      body: [
        ASTIfStatement {
          type: 'IfShortcutStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          clauses: [Array]
        }
      ],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 19, character: 5 },
        end: Position { line: 19, character: 6 },
        scope: [Circular *1],
        name: 'i'
      },
      iterator: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 19, character: 15 },
        end: Position { line: 19, character: 26 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'range'
        },
        arguments: [ [ASTLiteral], [ASTEvaluationExpression] ]
      }
    },
    23 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 23, character: 1 },
      end: Position { line: 23, character: 8 },
      scope: [Circular *1],
      expression: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 23, character: 5 },
        end: Position { line: 23, character: 8 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'foo'
        },
        index: ASTSliceExpression {
          type: 'SliceExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          left: [ASTLiteral],
          right: [ASTBase]
        }
      }
    },
    24 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 24, character: 1 },
      end: Position { line: 24, character: 8 },
      scope: [Circular *1],
      expression: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 24, character: 5 },
        end: Position { line: 24, character: 8 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'foo'
        },
        index: ASTSliceExpression {
          type: 'SliceExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          left: [ASTBase],
          right: [ASTLiteral]
        }
      }
    },
    25 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 25, character: 1 },
      end: Position { line: 25, character: 14 },
      scope: [Circular *1],
      expression: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 25, character: 5 },
        end: Position { line: 25, character: 14 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'foo'
        },
        index: ASTSliceExpression {
          type: 'SliceExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          left: [ASTIndexExpression],
          right: [ASTBase]
        }
      }
    },
    26 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 26, character: 1 },
      end: Position { line: 26, character: 14 },
      scope: [Circular *1],
      expression: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 26, character: 5 },
        end: Position { line: 26, character: 14 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'foo'
        },
        index: ASTSliceExpression {
          type: 'SliceExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          left: [ASTBase],
          right: [ASTIndexExpression]
        }
      }
    },
    27 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 27, character: 1 },
      end: Position { line: 27, character: 21 },
      scope: [Circular *1],
      expression: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 27, character: 5 },
        end: Position { line: 27, character: 21 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'foo'
        },
        index: ASTSliceExpression {
          type: 'SliceExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          left: [ASTIndexExpression],
          right: [ASTIndexExpression]
        }
      }
    }
  }
}"
`;

exports[`parse default scripts slice.src unsafe 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 27, character: 21 },
  scope: null,
  body: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 13, character: 13 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 13 },
        scope: [Circular *1],
        name: 'divideString'
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 16 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'limit', 'offset', 'maxLen', 'frags', 'next' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 15, character: 1 },
      end: Position { line: 15, character: 59 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 15, character: 6 },
        end: Position { line: 15, character: 59 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTCallExpression] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 17, character: 1 },
      end: Position { line: 17, character: 81 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 17, character: 5 },
        end: Position { line: 17, character: 20 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'current_path'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'test'
        }
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 17, character: 29 },
        end: Position { line: 17, character: 81 },
        scope: [Circular *1],
        operator: '+',
        left: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '/home/',
          raw: '\\"/home/\\"'
        },
        right: ASTIndexExpression {
          type: 'IndexExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          base: [ASTMemberExpression],
          index: [ASTSliceExpression]
        }
      }
    },
    ASTForGenericStatement {
      type: 'ForGenericStatement',
      start: Position { line: 19, character: 1 },
      end: Position { line: 21, character: 8 },
      scope: [Circular *1],
      body: [
        ASTIfStatement {
          type: 'IfShortcutStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          clauses: [Array]
        }
      ],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 19, character: 5 },
        end: Position { line: 19, character: 6 },
        scope: [Circular *1],
        name: 'i'
      },
      iterator: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 19, character: 15 },
        end: Position { line: 19, character: 26 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'range'
        },
        arguments: [ [ASTLiteral], [ASTEvaluationExpression] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 23, character: 1 },
      end: Position { line: 23, character: 8 },
      scope: [Circular *1],
      expression: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 23, character: 5 },
        end: Position { line: 23, character: 8 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'foo'
        },
        index: ASTSliceExpression {
          type: 'SliceExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          left: [ASTLiteral],
          right: [ASTBase]
        }
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 24, character: 1 },
      end: Position { line: 24, character: 8 },
      scope: [Circular *1],
      expression: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 24, character: 5 },
        end: Position { line: 24, character: 8 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'foo'
        },
        index: ASTSliceExpression {
          type: 'SliceExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          left: [ASTBase],
          right: [ASTLiteral]
        }
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 25, character: 1 },
      end: Position { line: 25, character: 14 },
      scope: [Circular *1],
      expression: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 25, character: 5 },
        end: Position { line: 25, character: 14 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'foo'
        },
        index: ASTSliceExpression {
          type: 'SliceExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          left: [ASTIndexExpression],
          right: [ASTBase]
        }
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 26, character: 1 },
      end: Position { line: 26, character: 14 },
      scope: [Circular *1],
      expression: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 26, character: 5 },
        end: Position { line: 26, character: 14 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'foo'
        },
        index: ASTSliceExpression {
          type: 'SliceExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          left: [ASTBase],
          right: [ASTIndexExpression]
        }
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 27, character: 1 },
      end: Position { line: 27, character: 21 },
      scope: [Circular *1],
      expression: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 27, character: 5 },
        end: Position { line: 27, character: 21 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'foo'
        },
        index: ASTSliceExpression {
          type: 'SliceExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          left: [ASTIndexExpression],
          right: [ASTIndexExpression]
        }
      }
    }
  ],
  namespaces: Set(9) {
    'divideString',
    'test',
    'moo',
    'user',
    'bar',
    'foo',
    'i',
    's',
    'f'
  },
  assignments: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 13, character: 13 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 13 },
        scope: [Circular *1],
        name: 'divideString'
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 16 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'limit', 'offset', 'maxLen', 'frags', 'next' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 17, character: 1 },
      end: Position { line: 17, character: 81 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 17, character: 5 },
        end: Position { line: 17, character: 20 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'current_path'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'test'
        }
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 17, character: 29 },
        end: Position { line: 17, character: 81 },
        scope: [Circular *1],
        operator: '+',
        left: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '/home/',
          raw: '\\"/home/\\"'
        },
        right: ASTIndexExpression {
          type: 'IndexExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          base: [ASTMemberExpression],
          index: [ASTSliceExpression]
        }
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 20, character: 34 },
      end: Position { line: 20, character: 59 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 20, character: 46 },
        end: Position { line: 20, character: 53 },
        scope: [Circular *1],
        base: ASTIndexExpression {
          type: 'IndexExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          base: [ASTIdentifier],
          index: [ASTIndexExpression]
        },
        index: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        }
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 20, character: 53 },
        end: Position { line: 20, character: 54 },
        scope: [Circular *1],
        value: 1,
        raw: '1'
      }
    },
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 20, character: 60 },
      end: Position { line: 20, character: 81 },
      scope: [Circular *1],
      variable: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 20, character: 62 },
        end: Position { line: 20, character: 72 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'f'
        },
        index: ASTIndexExpression {
          type: 'IndexExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          base: [ASTIdentifier],
          index: [ASTSliceExpression]
        }
      },
      init: ASTMapConstructorExpression {
        type: 'MapConstructorExpression',
        start: Position { line: 20, character: 72 },
        end: Position { line: 20, character: 81 },
        scope: [Circular *1],
        fields: [ [ASTMapKeyString] ]
      }
    }
  ],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 2, character: 14 },
      end: Position { line: 2, character: 15 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 16 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'limit', 'offset', 'maxLen', 'frags', 'next' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 15, character: 20 },
      end: Position { line: 15, character: 55 },
      scope: [Circular *1],
      value: 'blahhblahhblahhblahhblahhblahhgad',
      raw: '\\"blahhblahhblahhblahhblahhblahhgad\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 15, character: 56 },
      end: Position { line: 15, character: 57 },
      scope: [Circular *1],
      value: 5,
      raw: '5'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 17, character: 21 },
      end: Position { line: 17, character: 29 },
      scope: [Circular *1],
      value: '/home/',
      raw: '\\"/home/\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 17, character: 40 },
      end: Position { line: 17, character: 41 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 17, character: 58 },
      end: Position { line: 17, character: 59 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 17, character: 73 },
      end: Position { line: 17, character: 76 },
      scope: [Circular *1],
      value: '@',
      raw: '\\"@\\"'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 17, character: 78 },
      end: Position { line: 17, character: 79 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 19, character: 16 },
      end: Position { line: 19, character: 17 },
      scope: [Circular *1],
      value: 0,
      raw: '0'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 19, character: 24 },
      end: Position { line: 19, character: 25 },
      scope: [Circular *1],
      value: 4,
      raw: '4'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 20, character: 25 },
      end: Position { line: 20, character: 26 },
      scope: [Circular *1],
      value: 3,
      raw: '3'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 20, character: 42 },
      end: Position { line: 20, character: 43 },
      scope: [Circular *1],
      value: 3,
      raw: '3'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 20, character: 53 },
      end: Position { line: 20, character: 54 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 20, character: 68 },
      end: Position { line: 20, character: 69 },
      scope: [Circular *1],
      value: 3,
      raw: '3'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 20, character: 79 },
      end: Position { line: 20, character: 80 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 23, character: 5 },
      end: Position { line: 23, character: 6 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 24, character: 6 },
      end: Position { line: 24, character: 7 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 25, character: 9 },
      end: Position { line: 25, character: 10 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 26, character: 11 },
      end: Position { line: 26, character: 12 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 27, character: 9 },
      end: Position { line: 27, character: 10 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 27, character: 18 },
      end: Position { line: 27, character: 19 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    }
  ],
  scopes: [
    <ref *2> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 1, character: 16 },
      end: Position { line: 13, character: 13 },
      scope: [Circular *1],
      body: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTIdentifier],
          init: [ASTListConstructorExpression]
        },
        ASTWhileStatement {
          type: 'WhileStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          body: [Array],
          condition: [ASTEvaluationExpression]
        },
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          argument: [ASTIdentifier]
        }
      ],
      namespaces: Set(5) { 'limit', 'offset', 'maxLen', 'frags', 'next' },
      assignments: [
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTIdentifier],
          init: [ASTLiteral]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTIdentifier],
          init: [ASTMemberExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTIdentifier],
          init: [ASTListConstructorExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        }
      ],
      parameters: [
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          name: 'str'
        },
        ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          name: 'limit'
        }
      ]
    }
  ],
  lines: Map(18) {
    2 => <ref *3> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 2, character: 5 },
      end: Position { line: 2, character: 15 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 16 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [Circular *3],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'limit', 'offset', 'maxLen', 'frags', 'next' },
        assignments: [
          [Circular *3],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 2, character: 5 },
        end: Position { line: 2, character: 11 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'offset'
      },
      init: ASTLiteral {
        type: 'NumericLiteral',
        start: Position { line: 2, character: 14 },
        end: Position { line: 2, character: 15 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        value: 0,
        raw: '0'
      }
    },
    3 => <ref *4> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 3, character: 5 },
      end: Position { line: 3, character: 21 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 16 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [Circular *4],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'limit', 'offset', 'maxLen', 'frags', 'next' },
        assignments: [
          [ASTAssignmentStatement],
          [Circular *4],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 3, character: 5 },
        end: Position { line: 3, character: 11 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'maxLen'
      },
      init: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 3, character: 17 },
        end: Position { line: 3, character: 21 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'len'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'str'
        }
      }
    },
    4 => <ref *5> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 4, character: 5 },
      end: Position { line: 4, character: 15 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 16 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *5],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'limit', 'offset', 'maxLen', 'frags', 'next' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *5],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 4, character: 5 },
        end: Position { line: 4, character: 10 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'frags'
      },
      init: ASTListConstructorExpression {
        type: 'ListConstructorExpression',
        start: Position { line: 4, character: 13 },
        end: Position { line: 4, character: 15 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        fields: []
      }
    },
    7 => <ref *6> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 7, character: 9 },
      end: Position { line: 7, character: 30 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 16 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'limit', 'offset', 'maxLen', 'frags', 'next' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *6],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 7, character: 9 },
        end: Position { line: 7, character: 13 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'next'
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 7, character: 23 },
        end: Position { line: 7, character: 30 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '+',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'offset'
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'limit'
        }
      }
    },
    8 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 8, character: 9 },
      end: Position { line: 8, character: 37 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 16 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'limit', 'offset', 'maxLen', 'frags', 'next' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 8, character: 19 },
        end: Position { line: 8, character: 37 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        base: ASTMemberExpression {
          type: 'MemberExpression',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          indexer: '.',
          identifier: [ASTIdentifier],
          base: [ASTIdentifier]
        },
        arguments: [ [ASTIndexExpression] ]
      }
    },
    9 => <ref *7> ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 9, character: 9 },
      end: Position { line: 9, character: 22 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 16 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'limit', 'offset', 'maxLen', 'frags', 'next' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *7]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 9, character: 9 },
        end: Position { line: 9, character: 15 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'offset'
      },
      init: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 9, character: 18 },
        end: Position { line: 9, character: 22 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'next'
      }
    },
    6 => <ref *8> ASTWhileStatement {
      type: 'WhileStatement',
      start: Position { line: 6, character: 5 },
      end: Position { line: 10, character: 14 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 16 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [Circular *8],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'limit', 'offset', 'maxLen', 'frags', 'next' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      body: [
        <ref *6> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTEvaluationExpression]
        },
        ASTCallStatement {
          type: 'CallStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          expression: [ASTCallExpression]
        },
        <ref *7> ASTAssignmentStatement {
          type: 'AssignmentStatement',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          variable: [ASTIdentifier],
          init: [ASTIdentifier]
        }
      ],
      condition: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 6, character: 18 },
        end: Position { line: 6, character: 26 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        operator: '<',
        left: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'offset'
        },
        right: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [ASTFunctionStatement],
          name: 'maxLen'
        }
      }
    },
    12 => <ref *9> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 12, character: 5 },
      end: Position { line: 12, character: 17 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 16 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [Circular *9]
        ],
        namespaces: Set(5) { 'limit', 'offset', 'maxLen', 'frags', 'next' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      },
      argument: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 12, character: 12 },
        end: Position { line: 12, character: 17 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: [Set],
          assignments: [Array],
          parameters: [Array]
        },
        name: 'frags'
      }
    },
    1 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 13, character: 13 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 13 },
        scope: [Circular *1],
        name: 'divideString'
      },
      init: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 16 },
        end: Position { line: 13, character: 13 },
        scope: [Circular *1],
        body: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTWhileStatement],
          [ASTReturnStatement]
        ],
        namespaces: Set(5) { 'limit', 'offset', 'maxLen', 'frags', 'next' },
        assignments: [
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement],
          [ASTAssignmentStatement]
        ],
        parameters: [ [ASTIdentifier], [ASTIdentifier] ]
      }
    },
    15 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 15, character: 1 },
      end: Position { line: 15, character: 59 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 15, character: 6 },
        end: Position { line: 15, character: 59 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTCallExpression] ]
      }
    },
    17 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 17, character: 1 },
      end: Position { line: 17, character: 81 },
      scope: [Circular *1],
      variable: ASTMemberExpression {
        type: 'MemberExpression',
        start: Position { line: 17, character: 5 },
        end: Position { line: 17, character: 20 },
        scope: [Circular *1],
        indexer: '.',
        identifier: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'current_path'
        },
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'test'
        }
      },
      init: ASTEvaluationExpression {
        type: 'BinaryExpression',
        start: Position { line: 17, character: 29 },
        end: Position { line: 17, character: 81 },
        scope: [Circular *1],
        operator: '+',
        left: ASTLiteral {
          type: 'StringLiteral',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          value: '/home/',
          raw: '\\"/home/\\"'
        },
        right: ASTIndexExpression {
          type: 'IndexExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          base: [ASTMemberExpression],
          index: [ASTSliceExpression]
        }
      }
    },
    20 => ASTIfStatement {
      type: 'IfShortcutStatement',
      start: Position { line: 20, character: 5 },
      end: Position { line: 20, character: 81 },
      scope: [Circular *1],
      clauses: [
        ASTIfClause {
          type: 'IfShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          condition: [ASTCallExpression]
        },
        ASTElseClause {
          type: 'ElseShortcutClause',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array]
        }
      ]
    },
    19 => ASTForGenericStatement {
      type: 'ForGenericStatement',
      start: Position { line: 19, character: 1 },
      end: Position { line: 21, character: 8 },
      scope: [Circular *1],
      body: [
        ASTIfStatement {
          type: 'IfShortcutStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          clauses: [Array]
        }
      ],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 19, character: 5 },
        end: Position { line: 19, character: 6 },
        scope: [Circular *1],
        name: 'i'
      },
      iterator: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 19, character: 15 },
        end: Position { line: 19, character: 26 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'range'
        },
        arguments: [ [ASTLiteral], [ASTEvaluationExpression] ]
      }
    },
    23 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 23, character: 1 },
      end: Position { line: 23, character: 8 },
      scope: [Circular *1],
      expression: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 23, character: 5 },
        end: Position { line: 23, character: 8 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'foo'
        },
        index: ASTSliceExpression {
          type: 'SliceExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          left: [ASTLiteral],
          right: [ASTBase]
        }
      }
    },
    24 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 24, character: 1 },
      end: Position { line: 24, character: 8 },
      scope: [Circular *1],
      expression: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 24, character: 5 },
        end: Position { line: 24, character: 8 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'foo'
        },
        index: ASTSliceExpression {
          type: 'SliceExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          left: [ASTBase],
          right: [ASTLiteral]
        }
      }
    },
    25 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 25, character: 1 },
      end: Position { line: 25, character: 14 },
      scope: [Circular *1],
      expression: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 25, character: 5 },
        end: Position { line: 25, character: 14 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'foo'
        },
        index: ASTSliceExpression {
          type: 'SliceExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          left: [ASTIndexExpression],
          right: [ASTBase]
        }
      }
    },
    26 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 26, character: 1 },
      end: Position { line: 26, character: 14 },
      scope: [Circular *1],
      expression: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 26, character: 5 },
        end: Position { line: 26, character: 14 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'foo'
        },
        index: ASTSliceExpression {
          type: 'SliceExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          left: [ASTBase],
          right: [ASTIndexExpression]
        }
      }
    },
    27 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 27, character: 1 },
      end: Position { line: 27, character: 21 },
      scope: [Circular *1],
      expression: ASTIndexExpression {
        type: 'IndexExpression',
        start: Position { line: 27, character: 5 },
        end: Position { line: 27, character: 21 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'foo'
        },
        index: ASTSliceExpression {
          type: 'SliceExpression',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          left: [ASTIndexExpression],
          right: [ASTIndexExpression]
        }
      }
    }
  }
}"
`;

exports[`parse default scripts unary.src 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 11, character: 1 },
  scope: null,
  body: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 3, character: 13 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 5 },
        scope: [Circular *1],
        name: 'test'
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(0) {},
        assignments: [],
        parameters: []
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 5, character: 1 },
      end: Position { line: 5, character: 45 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 5, character: 6 },
        end: Position { line: 5, character: 45 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTEvaluationExpression] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 6, character: 1 },
      end: Position { line: 6, character: 47 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 6, character: 6 },
        end: Position { line: 6, character: 47 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTUnaryExpression] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 7, character: 1 },
      end: Position { line: 7, character: 48 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 7, character: 6 },
        end: Position { line: 7, character: 48 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTEvaluationExpression] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 8, character: 1 },
      end: Position { line: 8, character: 50 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 8, character: 6 },
        end: Position { line: 8, character: 50 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTUnaryExpression] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 9, character: 1 },
      end: Position { line: 9, character: 14 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 9, character: 6 },
        end: Position { line: 9, character: 14 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTEvaluationExpression] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 10, character: 1 },
      end: Position { line: 10, character: 16 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 10, character: 6 },
        end: Position { line: 10, character: 16 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTUnaryExpression] ]
      }
    }
  ],
  namespaces: Set(2) { 'test', 'split' },
  assignments: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 3, character: 13 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 5 },
        scope: [Circular *1],
        name: 'test'
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(0) {},
        assignments: [],
        parameters: []
      }
    }
  ],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'NilLiteral',
      start: Position { line: 2, character: 12 },
      end: Position { line: 2, character: 16 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(0) {},
        assignments: [],
        parameters: []
      },
      value: null,
      raw: 'null'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 5, character: 8 },
      end: Position { line: 5, character: 13 },
      scope: [Circular *1],
      value: 'was',
      raw: '\\"was\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 5, character: 25 },
      end: Position { line: 5, character: 30 },
      scope: [Circular *1],
      value: false,
      raw: 'false'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 5, character: 38 },
      end: Position { line: 5, character: 43 },
      scope: [Circular *1],
      value: false,
      raw: 'false'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 6, character: 9 },
      end: Position { line: 6, character: 14 },
      scope: [Circular *1],
      value: 'was',
      raw: '\\"was\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 6, character: 26 },
      end: Position { line: 6, character: 31 },
      scope: [Circular *1],
      value: false,
      raw: 'false'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 6, character: 39 },
      end: Position { line: 6, character: 44 },
      scope: [Circular *1],
      value: false,
      raw: 'false'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 7, character: 11 },
      end: Position { line: 7, character: 16 },
      scope: [Circular *1],
      value: 'was',
      raw: '\\"was\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 7, character: 28 },
      end: Position { line: 7, character: 33 },
      scope: [Circular *1],
      value: false,
      raw: 'false'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 7, character: 41 },
      end: Position { line: 7, character: 46 },
      scope: [Circular *1],
      value: false,
      raw: 'false'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 8, character: 12 },
      end: Position { line: 8, character: 17 },
      scope: [Circular *1],
      value: 'was',
      raw: '\\"was\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 8, character: 29 },
      end: Position { line: 8, character: 34 },
      scope: [Circular *1],
      value: false,
      raw: 'false'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 8, character: 42 },
      end: Position { line: 8, character: 47 },
      scope: [Circular *1],
      value: false,
      raw: 'false'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 9, character: 8 },
      end: Position { line: 9, character: 9 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 9, character: 12 },
      end: Position { line: 9, character: 13 },
      scope: [Circular *1],
      value: 2,
      raw: '2'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 10, character: 9 },
      end: Position { line: 10, character: 10 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 10, character: 13 },
      end: Position { line: 10, character: 14 },
      scope: [Circular *1],
      value: 2,
      raw: '2'
    }
  ],
  scopes: [
    <ref *2> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 1, character: 8 },
      end: Position { line: 3, character: 13 },
      scope: [Circular *1],
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          argument: [ASTLiteral]
        }
      ],
      namespaces: Set(0) {},
      assignments: [],
      parameters: []
    }
  ],
  lines: Map(8) {
    2 => <ref *3> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 2, character: 5 },
      end: Position { line: 2, character: 16 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [Circular *3] ],
        namespaces: Set(0) {},
        assignments: [],
        parameters: []
      },
      argument: ASTLiteral {
        type: 'NilLiteral',
        start: Position { line: 2, character: 12 },
        end: Position { line: 2, character: 16 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: Set(0) {},
          assignments: [],
          parameters: []
        },
        value: null,
        raw: 'null'
      }
    },
    1 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 3, character: 13 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 5 },
        scope: [Circular *1],
        name: 'test'
      },
      init: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(0) {},
        assignments: [],
        parameters: []
      }
    },
    5 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 5, character: 1 },
      end: Position { line: 5, character: 45 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 5, character: 6 },
        end: Position { line: 5, character: 45 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTEvaluationExpression] ]
      }
    },
    6 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 6, character: 1 },
      end: Position { line: 6, character: 47 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 6, character: 6 },
        end: Position { line: 6, character: 47 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTUnaryExpression] ]
      }
    },
    7 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 7, character: 1 },
      end: Position { line: 7, character: 48 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 7, character: 6 },
        end: Position { line: 7, character: 48 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTEvaluationExpression] ]
      }
    },
    8 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 8, character: 1 },
      end: Position { line: 8, character: 50 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 8, character: 6 },
        end: Position { line: 8, character: 50 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTUnaryExpression] ]
      }
    },
    9 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 9, character: 1 },
      end: Position { line: 9, character: 14 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 9, character: 6 },
        end: Position { line: 9, character: 14 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTEvaluationExpression] ]
      }
    },
    10 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 10, character: 1 },
      end: Position { line: 10, character: 16 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 10, character: 6 },
        end: Position { line: 10, character: 16 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTUnaryExpression] ]
      }
    }
  }
}"
`;

exports[`parse default scripts unary.src unsafe 1`] = `
"<ref *1> ASTChunk {
  type: 'Chunk',
  start: Position { line: 1, character: 1 },
  end: Position { line: 11, character: 1 },
  scope: null,
  body: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 3, character: 13 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 5 },
        scope: [Circular *1],
        name: 'test'
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(0) {},
        assignments: [],
        parameters: []
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 5, character: 1 },
      end: Position { line: 5, character: 45 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 5, character: 6 },
        end: Position { line: 5, character: 45 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTEvaluationExpression] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 6, character: 1 },
      end: Position { line: 6, character: 47 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 6, character: 6 },
        end: Position { line: 6, character: 47 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTUnaryExpression] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 7, character: 1 },
      end: Position { line: 7, character: 48 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 7, character: 6 },
        end: Position { line: 7, character: 48 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTEvaluationExpression] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 8, character: 1 },
      end: Position { line: 8, character: 50 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 8, character: 6 },
        end: Position { line: 8, character: 50 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTUnaryExpression] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 9, character: 1 },
      end: Position { line: 9, character: 14 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 9, character: 6 },
        end: Position { line: 9, character: 14 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTEvaluationExpression] ]
      }
    },
    ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 10, character: 1 },
      end: Position { line: 10, character: 16 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 10, character: 6 },
        end: Position { line: 10, character: 16 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTUnaryExpression] ]
      }
    }
  ],
  namespaces: Set(2) { 'test', 'split' },
  assignments: [
    ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 3, character: 13 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 5 },
        scope: [Circular *1],
        name: 'test'
      },
      init: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(0) {},
        assignments: [],
        parameters: []
      }
    }
  ],
  nativeImports: [],
  literals: [
    ASTLiteral {
      type: 'NilLiteral',
      start: Position { line: 2, character: 12 },
      end: Position { line: 2, character: 16 },
      scope: ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(0) {},
        assignments: [],
        parameters: []
      },
      value: null,
      raw: 'null'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 5, character: 8 },
      end: Position { line: 5, character: 13 },
      scope: [Circular *1],
      value: 'was',
      raw: '\\"was\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 5, character: 25 },
      end: Position { line: 5, character: 30 },
      scope: [Circular *1],
      value: false,
      raw: 'false'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 5, character: 38 },
      end: Position { line: 5, character: 43 },
      scope: [Circular *1],
      value: false,
      raw: 'false'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 6, character: 9 },
      end: Position { line: 6, character: 14 },
      scope: [Circular *1],
      value: 'was',
      raw: '\\"was\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 6, character: 26 },
      end: Position { line: 6, character: 31 },
      scope: [Circular *1],
      value: false,
      raw: 'false'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 6, character: 39 },
      end: Position { line: 6, character: 44 },
      scope: [Circular *1],
      value: false,
      raw: 'false'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 7, character: 11 },
      end: Position { line: 7, character: 16 },
      scope: [Circular *1],
      value: 'was',
      raw: '\\"was\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 7, character: 28 },
      end: Position { line: 7, character: 33 },
      scope: [Circular *1],
      value: false,
      raw: 'false'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 7, character: 41 },
      end: Position { line: 7, character: 46 },
      scope: [Circular *1],
      value: false,
      raw: 'false'
    },
    ASTLiteral {
      type: 'StringLiteral',
      start: Position { line: 8, character: 12 },
      end: Position { line: 8, character: 17 },
      scope: [Circular *1],
      value: 'was',
      raw: '\\"was\\"'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 8, character: 29 },
      end: Position { line: 8, character: 34 },
      scope: [Circular *1],
      value: false,
      raw: 'false'
    },
    ASTLiteral {
      type: 'BooleanLiteral',
      start: Position { line: 8, character: 42 },
      end: Position { line: 8, character: 47 },
      scope: [Circular *1],
      value: false,
      raw: 'false'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 9, character: 8 },
      end: Position { line: 9, character: 9 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 9, character: 12 },
      end: Position { line: 9, character: 13 },
      scope: [Circular *1],
      value: 2,
      raw: '2'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 10, character: 9 },
      end: Position { line: 10, character: 10 },
      scope: [Circular *1],
      value: 1,
      raw: '1'
    },
    ASTLiteral {
      type: 'NumericLiteral',
      start: Position { line: 10, character: 13 },
      end: Position { line: 10, character: 14 },
      scope: [Circular *1],
      value: 2,
      raw: '2'
    }
  ],
  scopes: [
    <ref *2> ASTFunctionStatement {
      type: 'FunctionDeclaration',
      start: Position { line: 1, character: 8 },
      end: Position { line: 3, character: 13 },
      scope: [Circular *1],
      body: [
        ASTReturnStatement {
          type: 'ReturnStatement',
          start: [Position],
          end: [Position],
          scope: [Circular *2],
          argument: [ASTLiteral]
        }
      ],
      namespaces: Set(0) {},
      assignments: [],
      parameters: []
    }
  ],
  lines: Map(8) {
    2 => <ref *3> ASTReturnStatement {
      type: 'ReturnStatement',
      start: Position { line: 2, character: 5 },
      end: Position { line: 2, character: 16 },
      scope: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [Circular *3] ],
        namespaces: Set(0) {},
        assignments: [],
        parameters: []
      },
      argument: ASTLiteral {
        type: 'NilLiteral',
        start: Position { line: 2, character: 12 },
        end: Position { line: 2, character: 16 },
        scope: <ref *2> ASTFunctionStatement {
          type: 'FunctionDeclaration',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          body: [Array],
          namespaces: Set(0) {},
          assignments: [],
          parameters: []
        },
        value: null,
        raw: 'null'
      }
    },
    1 => ASTAssignmentStatement {
      type: 'AssignmentStatement',
      start: Position { line: 1, character: 1 },
      end: Position { line: 3, character: 13 },
      scope: [Circular *1],
      variable: ASTIdentifier {
        type: 'Identifier',
        start: Position { line: 1, character: 1 },
        end: Position { line: 1, character: 5 },
        scope: [Circular *1],
        name: 'test'
      },
      init: <ref *2> ASTFunctionStatement {
        type: 'FunctionDeclaration',
        start: Position { line: 1, character: 8 },
        end: Position { line: 3, character: 13 },
        scope: [Circular *1],
        body: [ [ASTReturnStatement] ],
        namespaces: Set(0) {},
        assignments: [],
        parameters: []
      }
    },
    5 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 5, character: 1 },
      end: Position { line: 5, character: 45 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 5, character: 6 },
        end: Position { line: 5, character: 45 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTEvaluationExpression] ]
      }
    },
    6 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 6, character: 1 },
      end: Position { line: 6, character: 47 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 6, character: 6 },
        end: Position { line: 6, character: 47 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTUnaryExpression] ]
      }
    },
    7 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 7, character: 1 },
      end: Position { line: 7, character: 48 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 7, character: 6 },
        end: Position { line: 7, character: 48 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTEvaluationExpression] ]
      }
    },
    8 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 8, character: 1 },
      end: Position { line: 8, character: 50 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 8, character: 6 },
        end: Position { line: 8, character: 50 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTUnaryExpression] ]
      }
    },
    9 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 9, character: 1 },
      end: Position { line: 9, character: 14 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 9, character: 6 },
        end: Position { line: 9, character: 14 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTEvaluationExpression] ]
      }
    },
    10 => ASTCallStatement {
      type: 'CallStatement',
      start: Position { line: 10, character: 1 },
      end: Position { line: 10, character: 16 },
      scope: [Circular *1],
      expression: ASTCallExpression {
        type: 'CallExpression',
        start: Position { line: 10, character: 6 },
        end: Position { line: 10, character: 16 },
        scope: [Circular *1],
        base: ASTIdentifier {
          type: 'Identifier',
          start: [Position],
          end: [Position],
          scope: [Circular *1],
          name: 'print'
        },
        arguments: [ [ASTUnaryExpression] ]
      }
    }
  }
}"
`;
