// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`parse default scripts ascii.src 1`] = `
"Chunk[
AssignmentStatement[Identifier[AsciiGen] = Identifier[AsciiGen]]
AssignmentStatement[Identifier[map] = Identifier[map]]
AssignmentStatement[MemberExpression[Identifier[map].Identifier[a]] = MemberExpression[Identifier[map].Identifier[a]]]
AssignmentStatement[MemberExpression[Identifier[map].Identifier[b]] = MemberExpression[Identifier[map].Identifier[b]]]
AssignmentStatement[MemberExpression[Identifier[map].Identifier[c]] = MemberExpression[Identifier[map].Identifier[c]]]
AssignmentStatement[MemberExpression[Identifier[map].Identifier[d]] = MemberExpression[Identifier[map].Identifier[d]]]
AssignmentStatement[MemberExpression[Identifier[map].Identifier[e]] = MemberExpression[Identifier[map].Identifier[e]]]
AssignmentStatement[MemberExpression[Identifier[map].Identifier[f]] = MemberExpression[Identifier[map].Identifier[f]]]
AssignmentStatement[MemberExpression[Identifier[map].Identifier[g]] = MemberExpression[Identifier[map].Identifier[g]]]
AssignmentStatement[MemberExpression[Identifier[map].Identifier[h]] = MemberExpression[Identifier[map].Identifier[h]]]
AssignmentStatement[MemberExpression[Identifier[map].Identifier[i]] = MemberExpression[Identifier[map].Identifier[i]]]
AssignmentStatement[MemberExpression[Identifier[map].Identifier[j]] = MemberExpression[Identifier[map].Identifier[j]]]
AssignmentStatement[MemberExpression[Identifier[map].Identifier[k]] = MemberExpression[Identifier[map].Identifier[k]]]
AssignmentStatement[MemberExpression[Identifier[map].Identifier[l]] = MemberExpression[Identifier[map].Identifier[l]]]
AssignmentStatement[MemberExpression[Identifier[map].Identifier[m]] = MemberExpression[Identifier[map].Identifier[m]]]
AssignmentStatement[MemberExpression[Identifier[map].Identifier[n]] = MemberExpression[Identifier[map].Identifier[n]]]
AssignmentStatement[MemberExpression[Identifier[map].Identifier[o]] = MemberExpression[Identifier[map].Identifier[o]]]
AssignmentStatement[MemberExpression[Identifier[map].Identifier[p]] = MemberExpression[Identifier[map].Identifier[p]]]
AssignmentStatement[MemberExpression[Identifier[map].Identifier[q]] = MemberExpression[Identifier[map].Identifier[q]]]
AssignmentStatement[MemberExpression[Identifier[map].Identifier[r]] = MemberExpression[Identifier[map].Identifier[r]]]
AssignmentStatement[MemberExpression[Identifier[map].Identifier[s]] = MemberExpression[Identifier[map].Identifier[s]]]
AssignmentStatement[MemberExpression[Identifier[map].Identifier[t]] = MemberExpression[Identifier[map].Identifier[t]]]
AssignmentStatement[MemberExpression[Identifier[map].Identifier[u]] = MemberExpression[Identifier[map].Identifier[u]]]
AssignmentStatement[MemberExpression[Identifier[map].Identifier[v]] = MemberExpression[Identifier[map].Identifier[v]]]
AssignmentStatement[MemberExpression[Identifier[map].Identifier[w]] = MemberExpression[Identifier[map].Identifier[w]]]
AssignmentStatement[MemberExpression[Identifier[map].Identifier[x]] = MemberExpression[Identifier[map].Identifier[x]]]
AssignmentStatement[MemberExpression[Identifier[map].Identifier[y]] = MemberExpression[Identifier[map].Identifier[y]]]
AssignmentStatement[MemberExpression[Identifier[map].Identifier[z]] = MemberExpression[Identifier[map].Identifier[z]]]
AssignmentStatement[IndexExpression[Identifier[map][Literal[0]]] = IndexExpression[Identifier[map][Literal[0]]]]
AssignmentStatement[IndexExpression[Identifier[map][Literal[1]]] = IndexExpression[Identifier[map][Literal[1]]]]
AssignmentStatement[IndexExpression[Identifier[map][Literal[2]]] = IndexExpression[Identifier[map][Literal[2]]]]
AssignmentStatement[IndexExpression[Identifier[map][Literal[3]]] = IndexExpression[Identifier[map][Literal[3]]]]
AssignmentStatement[IndexExpression[Identifier[map][Literal[4]]] = IndexExpression[Identifier[map][Literal[4]]]]
AssignmentStatement[IndexExpression[Identifier[map][Literal[5]]] = IndexExpression[Identifier[map][Literal[5]]]]
AssignmentStatement[IndexExpression[Identifier[map][Literal[6]]] = IndexExpression[Identifier[map][Literal[6]]]]
AssignmentStatement[IndexExpression[Identifier[map][Literal[7]]] = IndexExpression[Identifier[map][Literal[7]]]]
AssignmentStatement[IndexExpression[Identifier[map][Literal[8]]] = IndexExpression[Identifier[map][Literal[8]]]]
AssignmentStatement[IndexExpression[Identifier[map][Literal[9]]] = IndexExpression[Identifier[map][Literal[9]]]]
AssignmentStatement[IndexExpression[Identifier[map][Literal[ ]]] = IndexExpression[Identifier[map][Literal[ ]]]]
AssignmentStatement[MemberExpression[Identifier[AsciiGen].Identifier[MAP]] = MemberExpression[Identifier[AsciiGen].Identifier[MAP]]]
AssignmentStatement[MemberExpression[Identifier[AsciiGen].Identifier[gen]] = MemberExpression[Identifier[AsciiGen].Identifier[gen]]]
CallStatment[CallExpression[Identifier[print](CallExpression[MemberExpression[Identifier[AsciiGen].Identifier[gen]](Literal[Hallo])])]]
]"
`;

exports[`parse default scripts ascii.src unsafe 1`] = `
"Chunk[
AssignmentStatement[Identifier[AsciiGen] = Identifier[AsciiGen]]
AssignmentStatement[Identifier[map] = Identifier[map]]
AssignmentStatement[MemberExpression[Identifier[map].Identifier[a]] = MemberExpression[Identifier[map].Identifier[a]]]
AssignmentStatement[MemberExpression[Identifier[map].Identifier[b]] = MemberExpression[Identifier[map].Identifier[b]]]
AssignmentStatement[MemberExpression[Identifier[map].Identifier[c]] = MemberExpression[Identifier[map].Identifier[c]]]
AssignmentStatement[MemberExpression[Identifier[map].Identifier[d]] = MemberExpression[Identifier[map].Identifier[d]]]
AssignmentStatement[MemberExpression[Identifier[map].Identifier[e]] = MemberExpression[Identifier[map].Identifier[e]]]
AssignmentStatement[MemberExpression[Identifier[map].Identifier[f]] = MemberExpression[Identifier[map].Identifier[f]]]
AssignmentStatement[MemberExpression[Identifier[map].Identifier[g]] = MemberExpression[Identifier[map].Identifier[g]]]
AssignmentStatement[MemberExpression[Identifier[map].Identifier[h]] = MemberExpression[Identifier[map].Identifier[h]]]
AssignmentStatement[MemberExpression[Identifier[map].Identifier[i]] = MemberExpression[Identifier[map].Identifier[i]]]
AssignmentStatement[MemberExpression[Identifier[map].Identifier[j]] = MemberExpression[Identifier[map].Identifier[j]]]
AssignmentStatement[MemberExpression[Identifier[map].Identifier[k]] = MemberExpression[Identifier[map].Identifier[k]]]
AssignmentStatement[MemberExpression[Identifier[map].Identifier[l]] = MemberExpression[Identifier[map].Identifier[l]]]
AssignmentStatement[MemberExpression[Identifier[map].Identifier[m]] = MemberExpression[Identifier[map].Identifier[m]]]
AssignmentStatement[MemberExpression[Identifier[map].Identifier[n]] = MemberExpression[Identifier[map].Identifier[n]]]
AssignmentStatement[MemberExpression[Identifier[map].Identifier[o]] = MemberExpression[Identifier[map].Identifier[o]]]
AssignmentStatement[MemberExpression[Identifier[map].Identifier[p]] = MemberExpression[Identifier[map].Identifier[p]]]
AssignmentStatement[MemberExpression[Identifier[map].Identifier[q]] = MemberExpression[Identifier[map].Identifier[q]]]
AssignmentStatement[MemberExpression[Identifier[map].Identifier[r]] = MemberExpression[Identifier[map].Identifier[r]]]
AssignmentStatement[MemberExpression[Identifier[map].Identifier[s]] = MemberExpression[Identifier[map].Identifier[s]]]
AssignmentStatement[MemberExpression[Identifier[map].Identifier[t]] = MemberExpression[Identifier[map].Identifier[t]]]
AssignmentStatement[MemberExpression[Identifier[map].Identifier[u]] = MemberExpression[Identifier[map].Identifier[u]]]
AssignmentStatement[MemberExpression[Identifier[map].Identifier[v]] = MemberExpression[Identifier[map].Identifier[v]]]
AssignmentStatement[MemberExpression[Identifier[map].Identifier[w]] = MemberExpression[Identifier[map].Identifier[w]]]
AssignmentStatement[MemberExpression[Identifier[map].Identifier[x]] = MemberExpression[Identifier[map].Identifier[x]]]
AssignmentStatement[MemberExpression[Identifier[map].Identifier[y]] = MemberExpression[Identifier[map].Identifier[y]]]
AssignmentStatement[MemberExpression[Identifier[map].Identifier[z]] = MemberExpression[Identifier[map].Identifier[z]]]
AssignmentStatement[IndexExpression[Identifier[map][Literal[0]]] = IndexExpression[Identifier[map][Literal[0]]]]
AssignmentStatement[IndexExpression[Identifier[map][Literal[1]]] = IndexExpression[Identifier[map][Literal[1]]]]
AssignmentStatement[IndexExpression[Identifier[map][Literal[2]]] = IndexExpression[Identifier[map][Literal[2]]]]
AssignmentStatement[IndexExpression[Identifier[map][Literal[3]]] = IndexExpression[Identifier[map][Literal[3]]]]
AssignmentStatement[IndexExpression[Identifier[map][Literal[4]]] = IndexExpression[Identifier[map][Literal[4]]]]
AssignmentStatement[IndexExpression[Identifier[map][Literal[5]]] = IndexExpression[Identifier[map][Literal[5]]]]
AssignmentStatement[IndexExpression[Identifier[map][Literal[6]]] = IndexExpression[Identifier[map][Literal[6]]]]
AssignmentStatement[IndexExpression[Identifier[map][Literal[7]]] = IndexExpression[Identifier[map][Literal[7]]]]
AssignmentStatement[IndexExpression[Identifier[map][Literal[8]]] = IndexExpression[Identifier[map][Literal[8]]]]
AssignmentStatement[IndexExpression[Identifier[map][Literal[9]]] = IndexExpression[Identifier[map][Literal[9]]]]
AssignmentStatement[IndexExpression[Identifier[map][Literal[ ]]] = IndexExpression[Identifier[map][Literal[ ]]]]
AssignmentStatement[MemberExpression[Identifier[AsciiGen].Identifier[MAP]] = MemberExpression[Identifier[AsciiGen].Identifier[MAP]]]
AssignmentStatement[MemberExpression[Identifier[AsciiGen].Identifier[gen]] = MemberExpression[Identifier[AsciiGen].Identifier[gen]]]
CallStatment[CallExpression[Identifier[print](CallExpression[MemberExpression[Identifier[AsciiGen].Identifier[gen]](Literal[Hallo])])]]
]"
`;

exports[`parse default scripts binary-expressions.src 1`] = `
"Chunk[
CallStatment[AssignmentStatement[Identifier[a] = Identifier[a]]]
CallStatment[AssignmentStatement[Identifier[a] = Identifier[a]]]
CallStatment[AssignmentStatement[Identifier[a] = Identifier[a]]]
CallStatment[AssignmentStatement[Identifier[a] = Identifier[a]]]
Evaluation[Identifier[a] << Identifier[b]]
Evaluation[Identifier[a] >> Identifier[b]]
AssignmentStatement[Identifier[w] = Identifier[w]]
Evaluation[Identifier[a] | Identifier[b]]
Evaluation[Identifier[a] & Identifier[b]]
Evaluation[Identifier[a] ^ Identifier[b]]
Evaluation[Identifier[a] and Identifier[b]]
Evaluation[Identifier[a] or Identifier[b]]
Evaluation[MemberExpression[Identifier[test].Identifier[len]] / Literal[2]]
Evaluation[MemberExpression[Identifier[test].Identifier[len]] + Literal[2]]
Evaluation[MemberExpression[Identifier[test].Identifier[len]] - Literal[2]]
]"
`;

exports[`parse default scripts binary-expressions.src unsafe 1`] = `
"Chunk[
CallStatment[AssignmentStatement[Identifier[a] = Identifier[a]]]
CallStatment[AssignmentStatement[Identifier[a] = Identifier[a]]]
CallStatment[AssignmentStatement[Identifier[a] = Identifier[a]]]
CallStatment[AssignmentStatement[Identifier[a] = Identifier[a]]]
Evaluation[Identifier[a] << Identifier[b]]
Evaluation[Identifier[a] >> Identifier[b]]
AssignmentStatement[Identifier[w] = Identifier[w]]
Evaluation[Identifier[a] | Identifier[b]]
Evaluation[Identifier[a] & Identifier[b]]
Evaluation[Identifier[a] ^ Identifier[b]]
Evaluation[Identifier[a] and Identifier[b]]
Evaluation[Identifier[a] or Identifier[b]]
Evaluation[MemberExpression[Identifier[test].Identifier[len]] / Literal[2]]
Evaluation[MemberExpression[Identifier[test].Identifier[len]] + Literal[2]]
Evaluation[MemberExpression[Identifier[test].Identifier[len]] - Literal[2]]
]"
`;

exports[`parse default scripts callexpr-with-nl.src 1`] = `
"Chunk[
CallStatment[CallExpression[Identifier[x](Literal[1], Literal[2], Literal[3], Literal[4], Literal[5])]]
]"
`;

exports[`parse default scripts callexpr-with-nl.src unsafe 1`] = `
"Chunk[
CallStatment[CallExpression[Identifier[x](Literal[1], Literal[2], Literal[3], Literal[4], Literal[5])]]
]"
`;

exports[`parse default scripts eol.src 1`] = `
"Chunk[
IfStatement[
IfClause[Literal[true]
CallStatment[CallExpression[Identifier[print](Literal[true])]]
]
ElseClause[
CallStatment[CallExpression[Identifier[print](Literal[false])]]
]
]
WhileStatement[Literal[false]
CallStatment[CallExpression[Identifier[print](Literal[foo])]]
]
For[Identifier[foo] in ListConstructor[

]
CallStatment[CallExpression[Identifier[print](Literal[foo])]]
]
]"
`;

exports[`parse default scripts eol.src unsafe 1`] = `
"Chunk[
IfStatement[
IfClause[Literal[true]
CallStatment[CallExpression[Identifier[print](Literal[true])]]
]
ElseClause[
CallStatment[CallExpression[Identifier[print](Literal[false])]]
]
]
WhileStatement[Literal[false]
CallStatment[CallExpression[Identifier[print](Literal[foo])]]
]
For[Identifier[foo] in ListConstructor[

]
CallStatment[CallExpression[Identifier[print](Literal[foo])]]
]
]"
`;

exports[`parse default scripts if-clause.src 1`] = `
"Chunk[
AssignmentStatement[Identifier[params] = Identifier[params]]
CallStatment[CallExpression[Identifier[print](Evaluation[Evaluation[Evaluation[MemberExpression[Identifier[params].Identifier[len]] != Literal[1]] or Evaluation[IndexExpression[Identifier[params][Literal[0]]] == Literal[-h]]] or Evaluation[IndexExpression[Identifier[params][Literal[0]]] == Literal[--help]]])]]
CallStatment[CallExpression[Identifier[print](Evaluation[Evaluation[Evaluation[MemberExpression[Identifier[params].Identifier[len]] != Literal[1]] or Evaluation[IndexExpression[Identifier[params][Literal[0]]] == Literal[-h]]] or Evaluation[IndexExpression[Identifier[params][Literal[0]]] == Literal[--help]]])]]
]"
`;

exports[`parse default scripts if-clause.src unsafe 1`] = `
"Chunk[
AssignmentStatement[Identifier[params] = Identifier[params]]
CallStatment[CallExpression[Identifier[print](Evaluation[Evaluation[Evaluation[MemberExpression[Identifier[params].Identifier[len]] != Literal[1]] or Evaluation[IndexExpression[Identifier[params][Literal[0]]] == Literal[-h]]] or Evaluation[IndexExpression[Identifier[params][Literal[0]]] == Literal[--help]]])]]
CallStatment[CallExpression[Identifier[print](Evaluation[Evaluation[Evaluation[MemberExpression[Identifier[params].Identifier[len]] != Literal[1]] or Evaluation[IndexExpression[Identifier[params][Literal[0]]] == Literal[-h]]] or Evaluation[IndexExpression[Identifier[params][Literal[0]]] == Literal[--help]]])]]
]"
`;

exports[`parse default scripts if-shorthand.src 1`] = `
"Chunk[
IfStatement[
IfShortcutClause[Literal[true]
CallStatment[CallExpression[Identifier[print](Literal[true])]]
]
]
IfStatement[
IfShortcutClause[Literal[false]
CallStatment[CallExpression[Identifier[print](Literal[true])]]
]
ElseShortcutClause[
CallStatment[CallExpression[Identifier[print](Literal[true])]]
]
]
CallStatment[CallExpression[Identifier[print](Literal[was])]]
IfStatement[
IfClause[Literal[false]
CallStatment[CallExpression[Identifier[print](Literal[false])]]
]
ElseClause[
CallStatment[CallExpression[Identifier[print](Literal[true])]]
]
]
For[Identifier[i] in ListConstructor[

]
CallStatment[CallExpression[Identifier[print](Identifier[i])]]
]
For[Identifier[b] in ListConstructor[

]
CallStatment[CallExpression[Identifier[print](Identifier[b])]]
]
WhileStatement[Evaluation[Identifier[i] < Identifier[b]]
CallStatment[AssignmentStatement[Identifier[i] = Identifier[i]]]
]
WhileStatement[Evaluation[Identifier[b] < Identifier[i]]
CallStatment[AssignmentStatement[Identifier[b] = Identifier[b]]]
]
AssignmentStatement[Identifier[myFunction] = Identifier[myFunction]]
AssignmentStatement[Identifier[otherFunction] = Identifier[otherFunction]]
Function[Identifier[m] =>
ReturnStatement[Literal[was]]
]
Function[Identifier[b] =>
IfStatement[
IfShortcutClause[Identifier[a]
ReturnStatement[Literal[foo]]
]
]
]
IfStatement[
IfClause[NegationExpression[not UnaryExpression[@ Identifier[ref]]]

]
]
IfStatement[
IfClause[Literal[true]
AssignmentStatement[Identifier[elseSomething] = Identifier[elseSomething]]
]
ElseClause[

]
]
]"
`;

exports[`parse default scripts if-shorthand.src unsafe 1`] = `
"Chunk[
IfStatement[
IfShortcutClause[Literal[true]
CallStatment[CallExpression[Identifier[print](Literal[true])]]
]
]
IfStatement[
IfShortcutClause[Literal[false]
CallStatment[CallExpression[Identifier[print](Literal[true])]]
]
ElseShortcutClause[
CallStatment[CallExpression[Identifier[print](Literal[true])]]
]
]
CallStatment[CallExpression[Identifier[print](Literal[was])]]
IfStatement[
IfClause[Literal[false]
CallStatment[CallExpression[Identifier[print](Literal[false])]]
]
ElseClause[
CallStatment[CallExpression[Identifier[print](Literal[true])]]
]
]
For[Identifier[i] in ListConstructor[

]
CallStatment[CallExpression[Identifier[print](Identifier[i])]]
]
For[Identifier[b] in ListConstructor[

]
CallStatment[CallExpression[Identifier[print](Identifier[b])]]
]
WhileStatement[Evaluation[Identifier[i] < Identifier[b]]
CallStatment[AssignmentStatement[Identifier[i] = Identifier[i]]]
]
WhileStatement[Evaluation[Identifier[b] < Identifier[i]]
CallStatment[AssignmentStatement[Identifier[b] = Identifier[b]]]
]
AssignmentStatement[Identifier[myFunction] = Identifier[myFunction]]
AssignmentStatement[Identifier[otherFunction] = Identifier[otherFunction]]
Function[Identifier[m] =>
ReturnStatement[Literal[was]]
]
Function[Identifier[b] =>
IfStatement[
IfShortcutClause[Identifier[a]
ReturnStatement[Literal[foo]]
]
]
]
IfStatement[
IfClause[NegationExpression[not UnaryExpression[@ Identifier[ref]]]

]
]
IfStatement[
IfClause[Literal[true]
AssignmentStatement[Identifier[elseSomething] = Identifier[elseSomething]]
]
ElseClause[

]
]
]"
`;

exports[`parse default scripts invalid code 1`] = `Array []`;

exports[`parse default scripts invalid code 2`] = `
Array [
  [Error: Unexpected value ";" at line 3. Expected: ")"],
  [Error: Unexpected assignment or call at line 8.],
  [Error: Unexpected argument for "not" at line 11.],
  [Error: Unexpected argument for "not" at line 13.],
  [Error: Unexpected expression at line 17.],
  [Error: Unexpected expression at line 18.],
  [Error: Unexpected value "print" at line 28. Expected: "then"],
  [Error: Unexpected end of if statement "<eof>" at line 29.],
]
`;

exports[`parse default scripts map.src 1`] = `
"Chunk[
AssignmentStatement[Identifier[test] = Identifier[test]]
AssignmentStatement[Identifier[test2] = Identifier[test2]]
AssignmentStatement[Identifier[test3] = Identifier[test3]]
AssignmentStatement[Identifier[test4] = Identifier[test4]]
AssignmentStatement[Identifier[test5] = Identifier[test5]]
]"
`;

exports[`parse default scripts map.src unsafe 1`] = `
"Chunk[
AssignmentStatement[Identifier[test] = Identifier[test]]
AssignmentStatement[Identifier[test2] = Identifier[test2]]
AssignmentStatement[Identifier[test3] = Identifier[test3]]
AssignmentStatement[Identifier[test4] = Identifier[test4]]
AssignmentStatement[Identifier[test5] = Identifier[test5]]
]"
`;

exports[`parse default scripts member-with-nl.src 1`] = `
"Chunk[
CallStatment[MemberExpression[MemberExpression[MemberExpression[Identifier[x].Identifier[test]].Identifier[test]].Identifier[test]]]
]"
`;

exports[`parse default scripts member-with-nl.src unsafe 1`] = `
"Chunk[
CallStatment[MemberExpression[MemberExpression[MemberExpression[Identifier[x].Identifier[test]].Identifier[test]].Identifier[test]]]
]"
`;

exports[`parse default scripts multiline.src 1`] = `
"Chunk[
CallStatment[CallExpression[Identifier[print](Literal[

was
print(\\"was\\")
foo[\\"xxxx\\"].test
])]]
CallStatment[CallExpression[Identifier[print](Evaluation[Evaluation[Literal[
print(\\"was\\") ] + Literal[
foo[\\"xxxx\\"].test
]] + Literal[


was
]])]]
CallStatment[CallExpression[Identifier[print](Literal[

    if (typeof(@item.value) == \\"function\\") then

    end if
])]]
]"
`;

exports[`parse default scripts multiline.src unsafe 1`] = `
"Chunk[
CallStatment[CallExpression[Identifier[print](Literal[

was
print(\\"was\\")
foo[\\"xxxx\\"].test
])]]
CallStatment[CallExpression[Identifier[print](Evaluation[Evaluation[Literal[
print(\\"was\\") ] + Literal[
foo[\\"xxxx\\"].test
]] + Literal[


was
]])]]
CallStatment[CallExpression[Identifier[print](Literal[

    if (typeof(@item.value) == \\"function\\") then

    end if
])]]
]"
`;

exports[`parse default scripts negation.src 1`] = `
"Chunk[
AssignmentStatement[Identifier[test] = Identifier[test]]
AssignmentStatement[Identifier[foo] = Identifier[foo]]
CallStatment[CallExpression[Identifier[print](Identifier[test])]]
CallStatment[CallExpression[Identifier[print](Identifier[foo])]]
]"
`;

exports[`parse default scripts negation.src unsafe 1`] = `
"Chunk[
AssignmentStatement[Identifier[test] = Identifier[test]]
AssignmentStatement[Identifier[foo] = Identifier[foo]]
CallStatment[CallExpression[Identifier[print](Identifier[test])]]
CallStatment[CallExpression[Identifier[print](Identifier[foo])]]
]"
`;

exports[`parse default scripts obj-init.src 1`] = `
"Chunk[
AssignmentStatement[Identifier[valueOfIdentifier] = Identifier[valueOfIdentifier]]
AssignmentStatement[Identifier[myObject] = Identifier[myObject]]
CallStatment[CallExpression[Identifier[print](ListConstructor[
[object Object]
[object Object]
[object Object]
])]]
AssignmentStatement[Identifier[myList] = Identifier[myList]]
CallStatment[CallExpression[Identifier[print](Identifier[myList])]]
]"
`;

exports[`parse default scripts obj-init.src unsafe 1`] = `
"Chunk[
AssignmentStatement[Identifier[valueOfIdentifier] = Identifier[valueOfIdentifier]]
AssignmentStatement[Identifier[myObject] = Identifier[myObject]]
CallStatment[CallExpression[Identifier[print](ListConstructor[
[object Object]
[object Object]
[object Object]
])]]
AssignmentStatement[Identifier[myList] = Identifier[myList]]
CallStatment[CallExpression[Identifier[print](Identifier[myList])]]
]"
`;

exports[`parse default scripts password-generator.src 1`] = `
"Chunk[
AssignmentStatement[Identifier[PasswordGenerator] = Identifier[PasswordGenerator]]
AssignmentStatement[MemberExpression[Identifier[PasswordGenerator].Identifier[MAX_PASSWORD_LENGTH]] = MemberExpression[Identifier[PasswordGenerator].Identifier[MAX_PASSWORD_LENGTH]]]
AssignmentStatement[MemberExpression[Identifier[PasswordGenerator].Identifier[ALPHABETIC_CHARACTERS]] = MemberExpression[Identifier[PasswordGenerator].Identifier[ALPHABETIC_CHARACTERS]]]
AssignmentStatement[MemberExpression[Identifier[PasswordGenerator].Identifier[NUMBER_CHARACTERS]] = MemberExpression[Identifier[PasswordGenerator].Identifier[NUMBER_CHARACTERS]]]
AssignmentStatement[MemberExpression[Identifier[PasswordGenerator].Identifier[ALPHA_NUMERIC]] = MemberExpression[Identifier[PasswordGenerator].Identifier[ALPHA_NUMERIC]]]
AssignmentStatement[MemberExpression[Identifier[PasswordGenerator].Identifier[constructor]] = MemberExpression[Identifier[PasswordGenerator].Identifier[constructor]]]
AssignmentStatement[MemberExpression[Identifier[PasswordGenerator].Identifier[increaseBuffer]] = MemberExpression[Identifier[PasswordGenerator].Identifier[increaseBuffer]]]
AssignmentStatement[MemberExpression[Identifier[PasswordGenerator].Identifier[gen]] = MemberExpression[Identifier[PasswordGenerator].Identifier[gen]]]
AssignmentStatement[Identifier[pgen] = Identifier[pgen]]
AssignmentStatement[Identifier[index] = Identifier[index]]
AssignmentStatement[Identifier[max] = Identifier[max]]
AssignmentStatement[Identifier[result] = Identifier[result]]
WhileStatement[Evaluation[Identifier[index] < Identifier[max]]
CallStatment[CallExpression[MemberExpression[Identifier[result].Identifier[push]](CallExpression[MemberExpression[Identifier[pgen].Identifier[gen]]()])]]
AssignmentStatement[Identifier[index] = Identifier[index]]
]
CallStatment[CallExpression[Identifier[print](Identifier[result])]]
]"
`;

exports[`parse default scripts password-generator.src unsafe 1`] = `
"Chunk[
AssignmentStatement[Identifier[PasswordGenerator] = Identifier[PasswordGenerator]]
AssignmentStatement[MemberExpression[Identifier[PasswordGenerator].Identifier[MAX_PASSWORD_LENGTH]] = MemberExpression[Identifier[PasswordGenerator].Identifier[MAX_PASSWORD_LENGTH]]]
AssignmentStatement[MemberExpression[Identifier[PasswordGenerator].Identifier[ALPHABETIC_CHARACTERS]] = MemberExpression[Identifier[PasswordGenerator].Identifier[ALPHABETIC_CHARACTERS]]]
AssignmentStatement[MemberExpression[Identifier[PasswordGenerator].Identifier[NUMBER_CHARACTERS]] = MemberExpression[Identifier[PasswordGenerator].Identifier[NUMBER_CHARACTERS]]]
AssignmentStatement[MemberExpression[Identifier[PasswordGenerator].Identifier[ALPHA_NUMERIC]] = MemberExpression[Identifier[PasswordGenerator].Identifier[ALPHA_NUMERIC]]]
AssignmentStatement[MemberExpression[Identifier[PasswordGenerator].Identifier[constructor]] = MemberExpression[Identifier[PasswordGenerator].Identifier[constructor]]]
AssignmentStatement[MemberExpression[Identifier[PasswordGenerator].Identifier[increaseBuffer]] = MemberExpression[Identifier[PasswordGenerator].Identifier[increaseBuffer]]]
AssignmentStatement[MemberExpression[Identifier[PasswordGenerator].Identifier[gen]] = MemberExpression[Identifier[PasswordGenerator].Identifier[gen]]]
AssignmentStatement[Identifier[pgen] = Identifier[pgen]]
AssignmentStatement[Identifier[index] = Identifier[index]]
AssignmentStatement[Identifier[max] = Identifier[max]]
AssignmentStatement[Identifier[result] = Identifier[result]]
WhileStatement[Evaluation[Identifier[index] < Identifier[max]]
CallStatment[CallExpression[MemberExpression[Identifier[result].Identifier[push]](CallExpression[MemberExpression[Identifier[pgen].Identifier[gen]]()])]]
AssignmentStatement[Identifier[index] = Identifier[index]]
]
CallStatment[CallExpression[Identifier[print](Identifier[result])]]
]"
`;

exports[`parse default scripts pseudo-crypto.src 1`] = `
"Chunk[
AssignmentStatement[Identifier[String] = Identifier[String]]
AssignmentStatement[MemberExpression[Identifier[String].Identifier[constructor]] = MemberExpression[Identifier[String].Identifier[constructor]]]
AssignmentStatement[MemberExpression[Identifier[String].Identifier[parse]] = MemberExpression[Identifier[String].Identifier[parse]]]
AssignmentStatement[MemberExpression[Identifier[String].Identifier[startsWith]] = MemberExpression[Identifier[String].Identifier[startsWith]]]
AssignmentStatement[MemberExpression[Identifier[String].Identifier[substr]] = MemberExpression[Identifier[String].Identifier[substr]]]
AssignmentStatement[MemberExpression[Identifier[String].Identifier[indexOf]] = MemberExpression[Identifier[String].Identifier[indexOf]]]
AssignmentStatement[MemberExpression[Identifier[String].Identifier[replace]] = MemberExpression[Identifier[String].Identifier[replace]]]
AssignmentStatement[MemberExpression[Identifier[String].Identifier[remove]] = MemberExpression[Identifier[String].Identifier[remove]]]
AssignmentStatement[MemberExpression[Identifier[String].Identifier[toString]] = MemberExpression[Identifier[String].Identifier[toString]]]
AssignmentStatement[MemberExpression[Identifier[String].Identifier[length]] = MemberExpression[Identifier[String].Identifier[length]]]
AssignmentStatement[MemberExpression[Identifier[String].Identifier[split]] = MemberExpression[Identifier[String].Identifier[split]]]
AssignmentStatement[MemberExpression[Identifier[String].Identifier[trim]] = MemberExpression[Identifier[String].Identifier[trim]]]
AssignmentStatement[Identifier[Error] = Identifier[Error]]
AssignmentStatement[MemberExpression[Identifier[Error].Identifier[String]] = MemberExpression[Identifier[Error].Identifier[String]]]
AssignmentStatement[MemberExpression[Identifier[Error].Identifier[constructor]] = MemberExpression[Identifier[Error].Identifier[constructor]]]
AssignmentStatement[MemberExpression[Identifier[Error].Identifier[throw]] = MemberExpression[Identifier[Error].Identifier[throw]]]
AssignmentStatement[Identifier[Crypto] = Identifier[Crypto]]
AssignmentStatement[MemberExpression[Identifier[Crypto].Identifier[defaultCharset]] = MemberExpression[Identifier[Crypto].Identifier[defaultCharset]]]
AssignmentStatement[MemberExpression[Identifier[Crypto].Identifier[defaultSecret]] = MemberExpression[Identifier[Crypto].Identifier[defaultSecret]]]
AssignmentStatement[MemberExpression[Identifier[Crypto].Identifier[maxCharCode]] = MemberExpression[Identifier[Crypto].Identifier[maxCharCode]]]
AssignmentStatement[MemberExpression[Identifier[Crypto].Identifier[Error]] = MemberExpression[Identifier[Crypto].Identifier[Error]]]
AssignmentStatement[MemberExpression[Identifier[Crypto].Identifier[constructor]] = MemberExpression[Identifier[Crypto].Identifier[constructor]]]
AssignmentStatement[MemberExpression[Identifier[Crypto].Identifier[getHash]] = MemberExpression[Identifier[Crypto].Identifier[getHash]]]
AssignmentStatement[MemberExpression[Identifier[Crypto].Identifier[encrypt]] = MemberExpression[Identifier[Crypto].Identifier[encrypt]]]
AssignmentStatement[MemberExpression[Identifier[Crypto].Identifier[decrypt]] = MemberExpression[Identifier[Crypto].Identifier[decrypt]]]
AssignmentStatement[Identifier[test] = Identifier[test]]
AssignmentStatement[Identifier[pwd] = Identifier[pwd]]
AssignmentStatement[Identifier[foo] = Identifier[foo]]
AssignmentStatement[Identifier[decrypted] = Identifier[decrypted]]
CallStatment[CallExpression[Identifier[print](Identifier[foo])]]
CallStatment[CallExpression[Identifier[print](Identifier[decrypted])]]
]"
`;

exports[`parse default scripts pseudo-crypto.src unsafe 1`] = `
"Chunk[
AssignmentStatement[Identifier[String] = Identifier[String]]
AssignmentStatement[MemberExpression[Identifier[String].Identifier[constructor]] = MemberExpression[Identifier[String].Identifier[constructor]]]
AssignmentStatement[MemberExpression[Identifier[String].Identifier[parse]] = MemberExpression[Identifier[String].Identifier[parse]]]
AssignmentStatement[MemberExpression[Identifier[String].Identifier[startsWith]] = MemberExpression[Identifier[String].Identifier[startsWith]]]
AssignmentStatement[MemberExpression[Identifier[String].Identifier[substr]] = MemberExpression[Identifier[String].Identifier[substr]]]
AssignmentStatement[MemberExpression[Identifier[String].Identifier[indexOf]] = MemberExpression[Identifier[String].Identifier[indexOf]]]
AssignmentStatement[MemberExpression[Identifier[String].Identifier[replace]] = MemberExpression[Identifier[String].Identifier[replace]]]
AssignmentStatement[MemberExpression[Identifier[String].Identifier[remove]] = MemberExpression[Identifier[String].Identifier[remove]]]
AssignmentStatement[MemberExpression[Identifier[String].Identifier[toString]] = MemberExpression[Identifier[String].Identifier[toString]]]
AssignmentStatement[MemberExpression[Identifier[String].Identifier[length]] = MemberExpression[Identifier[String].Identifier[length]]]
AssignmentStatement[MemberExpression[Identifier[String].Identifier[split]] = MemberExpression[Identifier[String].Identifier[split]]]
AssignmentStatement[MemberExpression[Identifier[String].Identifier[trim]] = MemberExpression[Identifier[String].Identifier[trim]]]
AssignmentStatement[Identifier[Error] = Identifier[Error]]
AssignmentStatement[MemberExpression[Identifier[Error].Identifier[String]] = MemberExpression[Identifier[Error].Identifier[String]]]
AssignmentStatement[MemberExpression[Identifier[Error].Identifier[constructor]] = MemberExpression[Identifier[Error].Identifier[constructor]]]
AssignmentStatement[MemberExpression[Identifier[Error].Identifier[throw]] = MemberExpression[Identifier[Error].Identifier[throw]]]
AssignmentStatement[Identifier[Crypto] = Identifier[Crypto]]
AssignmentStatement[MemberExpression[Identifier[Crypto].Identifier[defaultCharset]] = MemberExpression[Identifier[Crypto].Identifier[defaultCharset]]]
AssignmentStatement[MemberExpression[Identifier[Crypto].Identifier[defaultSecret]] = MemberExpression[Identifier[Crypto].Identifier[defaultSecret]]]
AssignmentStatement[MemberExpression[Identifier[Crypto].Identifier[maxCharCode]] = MemberExpression[Identifier[Crypto].Identifier[maxCharCode]]]
AssignmentStatement[MemberExpression[Identifier[Crypto].Identifier[Error]] = MemberExpression[Identifier[Crypto].Identifier[Error]]]
AssignmentStatement[MemberExpression[Identifier[Crypto].Identifier[constructor]] = MemberExpression[Identifier[Crypto].Identifier[constructor]]]
AssignmentStatement[MemberExpression[Identifier[Crypto].Identifier[getHash]] = MemberExpression[Identifier[Crypto].Identifier[getHash]]]
AssignmentStatement[MemberExpression[Identifier[Crypto].Identifier[encrypt]] = MemberExpression[Identifier[Crypto].Identifier[encrypt]]]
AssignmentStatement[MemberExpression[Identifier[Crypto].Identifier[decrypt]] = MemberExpression[Identifier[Crypto].Identifier[decrypt]]]
AssignmentStatement[Identifier[test] = Identifier[test]]
AssignmentStatement[Identifier[pwd] = Identifier[pwd]]
AssignmentStatement[Identifier[foo] = Identifier[foo]]
AssignmentStatement[Identifier[decrypted] = Identifier[decrypted]]
CallStatment[CallExpression[Identifier[print](Identifier[foo])]]
CallStatment[CallExpression[Identifier[print](Identifier[decrypted])]]
]"
`;

exports[`parse default scripts random.src 1`] = `
"Chunk[
AssignmentStatement[Identifier[Random] = Identifier[Random]]
AssignmentStatement[MemberExpression[Identifier[Random].Identifier[pool]] = MemberExpression[Identifier[Random].Identifier[pool]]]
AssignmentStatement[MemberExpression[Identifier[Random].Identifier[defaultSeed]] = MemberExpression[Identifier[Random].Identifier[defaultSeed]]]
AssignmentStatement[MemberExpression[Identifier[Random].Identifier[createPool]] = MemberExpression[Identifier[Random].Identifier[createPool]]]
AssignmentStatement[MemberExpression[Identifier[Random].Identifier[calcSeed]] = MemberExpression[Identifier[Random].Identifier[calcSeed]]]
AssignmentStatement[MemberExpression[Identifier[Random].Identifier[gen]] = MemberExpression[Identifier[Random].Identifier[gen]]]
AssignmentStatement[MemberExpression[Identifier[Random].Identifier[seq]] = MemberExpression[Identifier[Random].Identifier[seq]]]
AssignmentStatement[MemberExpression[Identifier[Random].Identifier[get]] = MemberExpression[Identifier[Random].Identifier[get]]]
CallStatment[CallExpression[Identifier[print](CallExpression[MemberExpression[Identifier[Random].Identifier[get]](Literal[100], Literal[500])])]]
CallStatment[CallExpression[Identifier[print](CallExpression[MemberExpression[Identifier[Random].Identifier[seq]](Literal[100], Literal[500], Literal[test], Literal[10])])]]
]"
`;

exports[`parse default scripts random.src unsafe 1`] = `
"Chunk[
AssignmentStatement[Identifier[Random] = Identifier[Random]]
AssignmentStatement[MemberExpression[Identifier[Random].Identifier[pool]] = MemberExpression[Identifier[Random].Identifier[pool]]]
AssignmentStatement[MemberExpression[Identifier[Random].Identifier[defaultSeed]] = MemberExpression[Identifier[Random].Identifier[defaultSeed]]]
AssignmentStatement[MemberExpression[Identifier[Random].Identifier[createPool]] = MemberExpression[Identifier[Random].Identifier[createPool]]]
AssignmentStatement[MemberExpression[Identifier[Random].Identifier[calcSeed]] = MemberExpression[Identifier[Random].Identifier[calcSeed]]]
AssignmentStatement[MemberExpression[Identifier[Random].Identifier[gen]] = MemberExpression[Identifier[Random].Identifier[gen]]]
AssignmentStatement[MemberExpression[Identifier[Random].Identifier[seq]] = MemberExpression[Identifier[Random].Identifier[seq]]]
AssignmentStatement[MemberExpression[Identifier[Random].Identifier[get]] = MemberExpression[Identifier[Random].Identifier[get]]]
CallStatment[CallExpression[Identifier[print](CallExpression[MemberExpression[Identifier[Random].Identifier[get]](Literal[100], Literal[500])])]]
CallStatment[CallExpression[Identifier[print](CallExpression[MemberExpression[Identifier[Random].Identifier[seq]](Literal[100], Literal[500], Literal[test], Literal[10])])]]
]"
`;

exports[`parse default scripts scuffed-if-clauses.src 1`] = `
"Chunk[
IfStatement[
IfShortcutClause[Literal[true]
CallStatment[CallExpression[Identifier[print](Literal[true - 1])]]
]
]
IfStatement[
IfShortcutClause[Literal[true]
CallStatment[CallExpression[Identifier[print](Literal[true - 2])]]
]
ElseifShortcutClause[Literal[true]
CallStatment[CallExpression[Identifier[print](Literal[true - 2])]]
]
]
IfStatement[
IfShortcutClause[Literal[true]
CallStatment[CallExpression[Identifier[print](Literal[true - 3])]]
]
ElseifShortcutClause[Literal[true]
CallStatment[CallExpression[Identifier[print](Literal[true - 3])]]
]
ElseifShortcutClause[Literal[true]
CallStatment[CallExpression[Identifier[print](Literal[true - 3])]]
]
]
IfStatement[
IfShortcutClause[Literal[true]
CallStatment[CallExpression[Identifier[print](Literal[true - 4])]]
]
ElseifShortcutClause[Literal[true]
CallStatment[CallExpression[Identifier[print](Literal[true - 4])]]
]
ElseifShortcutClause[Literal[true]
CallStatment[CallExpression[Identifier[print](Literal[true - 4])]]
]
ElseShortcutClause[
CallStatment[CallExpression[Identifier[print](Literal[true - 4])]]
]
]
IfStatement[
IfShortcutClause[Literal[true]
CallStatment[CallExpression[Identifier[print](Literal[true - 5])]]
]
ElseifShortcutClause[Literal[true]
CallStatment[CallExpression[Identifier[print](Literal[true - 5])]]
]
ElseShortcutClause[
CallStatment[CallExpression[Identifier[print](Literal[true - 5])]]
]
]
IfStatement[
IfShortcutClause[Literal[true]
CallStatment[CallExpression[Identifier[print](Literal[true - 6])]]
]
ElseShortcutClause[
CallStatment[CallExpression[Identifier[print](Literal[true - 6])]]
]
]
]"
`;

exports[`parse default scripts scuffed-if-clauses.src unsafe 1`] = `
"Chunk[
IfStatement[
IfShortcutClause[Literal[true]
CallStatment[CallExpression[Identifier[print](Literal[true - 1])]]
]
]
IfStatement[
IfShortcutClause[Literal[true]
CallStatment[CallExpression[Identifier[print](Literal[true - 2])]]
]
ElseifShortcutClause[Literal[true]
CallStatment[CallExpression[Identifier[print](Literal[true - 2])]]
]
]
IfStatement[
IfShortcutClause[Literal[true]
CallStatment[CallExpression[Identifier[print](Literal[true - 3])]]
]
ElseifShortcutClause[Literal[true]
CallStatment[CallExpression[Identifier[print](Literal[true - 3])]]
]
ElseifShortcutClause[Literal[true]
CallStatment[CallExpression[Identifier[print](Literal[true - 3])]]
]
]
IfStatement[
IfShortcutClause[Literal[true]
CallStatment[CallExpression[Identifier[print](Literal[true - 4])]]
]
ElseifShortcutClause[Literal[true]
CallStatment[CallExpression[Identifier[print](Literal[true - 4])]]
]
ElseifShortcutClause[Literal[true]
CallStatment[CallExpression[Identifier[print](Literal[true - 4])]]
]
ElseShortcutClause[
CallStatment[CallExpression[Identifier[print](Literal[true - 4])]]
]
]
IfStatement[
IfShortcutClause[Literal[true]
CallStatment[CallExpression[Identifier[print](Literal[true - 5])]]
]
ElseifShortcutClause[Literal[true]
CallStatment[CallExpression[Identifier[print](Literal[true - 5])]]
]
ElseShortcutClause[
CallStatment[CallExpression[Identifier[print](Literal[true - 5])]]
]
]
IfStatement[
IfShortcutClause[Literal[true]
CallStatment[CallExpression[Identifier[print](Literal[true - 6])]]
]
ElseShortcutClause[
CallStatment[CallExpression[Identifier[print](Literal[true - 6])]]
]
]
]"
`;

exports[`parse default scripts simple-object.src 1`] = `
"Chunk[
AssignmentStatement[Identifier[test] = Identifier[test]]
AssignmentStatement[MemberExpression[Identifier[test].Identifier[here]] = MemberExpression[Identifier[test].Identifier[here]]]
AssignmentStatement[MemberExpression[Identifier[test].Identifier[was]] = MemberExpression[Identifier[test].Identifier[was]]]
CallStatment[CallExpression[Identifier[print](CallExpression[MemberExpression[Identifier[test].Identifier[was]]()])]]
]"
`;

exports[`parse default scripts simple-object.src unsafe 1`] = `
"Chunk[
AssignmentStatement[Identifier[test] = Identifier[test]]
AssignmentStatement[MemberExpression[Identifier[test].Identifier[here]] = MemberExpression[Identifier[test].Identifier[here]]]
AssignmentStatement[MemberExpression[Identifier[test].Identifier[was]] = MemberExpression[Identifier[test].Identifier[was]]]
CallStatment[CallExpression[Identifier[print](CallExpression[MemberExpression[Identifier[test].Identifier[was]]()])]]
]"
`;

exports[`parse default scripts slice.src 1`] = `
"Chunk[
AssignmentStatement[Identifier[divideString] = Identifier[divideString]]
CallStatment[CallExpression[Identifier[print](CallExpression[Identifier[divideString](Literal[blahhblahhblahhblahhblahhblahhgad], Literal[5])])]]
AssignmentStatement[MemberExpression[Identifier[test].Identifier[current_path]] = MemberExpression[Identifier[test].Identifier[current_path]]]
For[Identifier[i] in CallExpression[Identifier[range](Literal[0], Evaluation[MemberExpression[Identifier[s].Identifier[len]] - Literal[4]])]
IfStatement[
IfShortcutClause[CallExpression[MemberExpression[Identifier[f].Identifier[hasIndex]](IndexExpression[Identifier[s][SliceExpression[Identifier[i]:Evaluation[Identifier[i] + Literal[3]]]]])]
AssignmentStatement[IndexExpression[IndexExpression[Identifier[f][IndexExpression[Identifier[s][SliceExpression[Identifier[i]:Evaluation[Identifier[i] + Literal[3]]]]]]][MemberExpression[Identifier[s].Identifier[len]]]] = IndexExpression[IndexExpression[Identifier[f][IndexExpression[Identifier[s][SliceExpression[Identifier[i]:Evaluation[Identifier[i] + Literal[3]]]]]]][MemberExpression[Identifier[s].Identifier[len]]]]]
]
ElseShortcutClause[
AssignmentStatement[IndexExpression[Identifier[f][IndexExpression[Identifier[s][SliceExpression[Identifier[i]:Evaluation[Identifier[i] + Literal[3]]]]]]] = IndexExpression[Identifier[f][IndexExpression[Identifier[s][SliceExpression[Identifier[i]:Evaluation[Identifier[i] + Literal[3]]]]]]]]
]
]
]
CallStatment[IndexExpression[Identifier[foo][SliceExpression[Literal[1]:[object Object]]]]]
CallStatment[IndexExpression[Identifier[foo][SliceExpression[[object Object]:Literal[1]]]]]
CallStatment[IndexExpression[Identifier[foo][SliceExpression[IndexExpression[Identifier[foo][SliceExpression[Literal[1]:[object Object]]]]:[object Object]]]]]
CallStatment[IndexExpression[Identifier[foo][SliceExpression[[object Object]:IndexExpression[Identifier[foo][SliceExpression[[object Object]:Literal[1]]]]]]]]
CallStatment[IndexExpression[Identifier[foo][SliceExpression[IndexExpression[Identifier[foo][SliceExpression[Literal[1]:[object Object]]]]:IndexExpression[Identifier[foo][SliceExpression[[object Object]:Literal[1]]]]]]]]
]"
`;

exports[`parse default scripts slice.src unsafe 1`] = `
"Chunk[
AssignmentStatement[Identifier[divideString] = Identifier[divideString]]
CallStatment[CallExpression[Identifier[print](CallExpression[Identifier[divideString](Literal[blahhblahhblahhblahhblahhblahhgad], Literal[5])])]]
AssignmentStatement[MemberExpression[Identifier[test].Identifier[current_path]] = MemberExpression[Identifier[test].Identifier[current_path]]]
For[Identifier[i] in CallExpression[Identifier[range](Literal[0], Evaluation[MemberExpression[Identifier[s].Identifier[len]] - Literal[4]])]
IfStatement[
IfShortcutClause[CallExpression[MemberExpression[Identifier[f].Identifier[hasIndex]](IndexExpression[Identifier[s][SliceExpression[Identifier[i]:Evaluation[Identifier[i] + Literal[3]]]]])]
AssignmentStatement[IndexExpression[IndexExpression[Identifier[f][IndexExpression[Identifier[s][SliceExpression[Identifier[i]:Evaluation[Identifier[i] + Literal[3]]]]]]][MemberExpression[Identifier[s].Identifier[len]]]] = IndexExpression[IndexExpression[Identifier[f][IndexExpression[Identifier[s][SliceExpression[Identifier[i]:Evaluation[Identifier[i] + Literal[3]]]]]]][MemberExpression[Identifier[s].Identifier[len]]]]]
]
ElseShortcutClause[
AssignmentStatement[IndexExpression[Identifier[f][IndexExpression[Identifier[s][SliceExpression[Identifier[i]:Evaluation[Identifier[i] + Literal[3]]]]]]] = IndexExpression[Identifier[f][IndexExpression[Identifier[s][SliceExpression[Identifier[i]:Evaluation[Identifier[i] + Literal[3]]]]]]]]
]
]
]
CallStatment[IndexExpression[Identifier[foo][SliceExpression[Literal[1]:[object Object]]]]]
CallStatment[IndexExpression[Identifier[foo][SliceExpression[[object Object]:Literal[1]]]]]
CallStatment[IndexExpression[Identifier[foo][SliceExpression[IndexExpression[Identifier[foo][SliceExpression[Literal[1]:[object Object]]]]:[object Object]]]]]
CallStatment[IndexExpression[Identifier[foo][SliceExpression[[object Object]:IndexExpression[Identifier[foo][SliceExpression[[object Object]:Literal[1]]]]]]]]
CallStatment[IndexExpression[Identifier[foo][SliceExpression[IndexExpression[Identifier[foo][SliceExpression[Literal[1]:[object Object]]]]:IndexExpression[Identifier[foo][SliceExpression[[object Object]:Literal[1]]]]]]]]
]"
`;

exports[`parse default scripts unary.src 1`] = `
"Chunk[
AssignmentStatement[Identifier[test] = Identifier[test]]
CallStatment[CallExpression[Identifier[print](Evaluation[UnaryExpression[@ MemberExpression[Literal[was].Identifier[split]]] and Evaluation[Literal[false] or NegationExpression[not Literal[false]]]])]]
CallStatment[CallExpression[Identifier[print](UnaryExpression[@ Evaluation[MemberExpression[Literal[was].Identifier[split]] and Evaluation[Literal[false] or NegationExpression[not Literal[false]]]]])]]
CallStatment[CallExpression[Identifier[print](Evaluation[NegationExpression[not MemberExpression[Literal[was].Identifier[split]]] and Evaluation[Literal[false] or NegationExpression[not Literal[false]]]])]]
CallStatment[CallExpression[Identifier[print](NegationExpression[not Evaluation[MemberExpression[Literal[was].Identifier[split]] and Evaluation[Literal[false] or NegationExpression[not Literal[false]]]]])]]
CallStatment[CallExpression[Identifier[print](Evaluation[BinaryNegatedExpression[- Literal[1]] + Literal[2]])]]
CallStatment[CallExpression[Identifier[print](BinaryNegatedExpression[- Evaluation[Literal[1] + Literal[2]]])]]
]"
`;

exports[`parse default scripts unary.src unsafe 1`] = `
"Chunk[
AssignmentStatement[Identifier[test] = Identifier[test]]
CallStatment[CallExpression[Identifier[print](Evaluation[UnaryExpression[@ MemberExpression[Literal[was].Identifier[split]]] and Evaluation[Literal[false] or NegationExpression[not Literal[false]]]])]]
CallStatment[CallExpression[Identifier[print](UnaryExpression[@ Evaluation[MemberExpression[Literal[was].Identifier[split]] and Evaluation[Literal[false] or NegationExpression[not Literal[false]]]]])]]
CallStatment[CallExpression[Identifier[print](Evaluation[NegationExpression[not MemberExpression[Literal[was].Identifier[split]]] and Evaluation[Literal[false] or NegationExpression[not Literal[false]]]])]]
CallStatment[CallExpression[Identifier[print](NegationExpression[not Evaluation[MemberExpression[Literal[was].Identifier[split]] and Evaluation[Literal[false] or NegationExpression[not Literal[false]]]]])]]
CallStatment[CallExpression[Identifier[print](Evaluation[BinaryNegatedExpression[- Literal[1]] + Literal[2]])]]
CallStatment[CallExpression[Identifier[print](BinaryNegatedExpression[- Evaluation[Literal[1] + Literal[2]]])]]
]"
`;
